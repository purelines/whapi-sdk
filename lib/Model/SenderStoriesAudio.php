<?php

/**
 * SenderStoriesAudio
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Whapi API
 *
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Purelines\WhapiSdk\Model;

use \ArrayAccess;
use \Purelines\WhapiSdk\ObjectSerializer;

/**
 * SenderStoriesAudio Class Doc Comment
 *
 * @category Class
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SenderStoriesAudio implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SenderStoriesAudio';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'media' => '\Purelines\WhapiSdk\Model\SendMediaMedia',
        'mime_type' => 'string',
        'no_encode' => 'bool',
        'no_cache' => 'bool',
        'seconds' => 'int',
        'width' => 'int',
        'height' => 'int',
        'contacts' => 'string[]',
        'exclude_contacts' => 'string[]',
        'background_color' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'media' => null,
        'mime_type' => null,
        'no_encode' => null,
        'no_cache' => null,
        'seconds' => 'int32',
        'width' => 'int32',
        'height' => 'int32',
        'contacts' => null,
        'exclude_contacts' => null,
        'background_color' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'media' => false,
        'mime_type' => false,
        'no_encode' => false,
        'no_cache' => false,
        'seconds' => false,
        'width' => false,
        'height' => false,
        'contacts' => false,
        'exclude_contacts' => false,
        'background_color' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'media' => 'media',
        'mime_type' => 'mime_type',
        'no_encode' => 'no_encode',
        'no_cache' => 'no_cache',
        'seconds' => 'seconds',
        'width' => 'width',
        'height' => 'height',
        'contacts' => 'contacts',
        'exclude_contacts' => 'exclude_contacts',
        'background_color' => 'background_color',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'media' => 'setMedia',
        'mime_type' => 'setMimeType',
        'no_encode' => 'setNoEncode',
        'no_cache' => 'setNoCache',
        'seconds' => 'setSeconds',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'contacts' => 'setContacts',
        'exclude_contacts' => 'setExcludeContacts',
        'background_color' => 'setBackgroundColor',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'media' => 'getMedia',
        'mime_type' => 'getMimeType',
        'no_encode' => 'getNoEncode',
        'no_cache' => 'getNoCache',
        'seconds' => 'getSeconds',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'contacts' => 'getContacts',
        'exclude_contacts' => 'getExcludeContacts',
        'background_color' => 'getBackgroundColor',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('media', $data ?? [], null);
        $this->setIfExists('mime_type', $data ?? [], null);
        $this->setIfExists('no_encode', $data ?? [], null);
        $this->setIfExists('no_cache', $data ?? [], null);
        $this->setIfExists('seconds', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('contacts', $data ?? [], null);
        $this->setIfExists('exclude_contacts', $data ?? [], null);
        $this->setIfExists('background_color', $data ?? [], '#00000000');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['media'] === null) {
            $invalidProperties[] = "'media' can't be null";
        }
        if (!is_null($this->container['background_color']) && !preg_match("/^#[0-9a-fA-F]{6,8}$/", $this->container['background_color'])) {
            $invalidProperties[] = "invalid value for 'background_color', must be conform to the pattern /^#[0-9a-fA-F]{6,8}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets media
     *
     * @return \Purelines\WhapiSdk\Model\SendMediaMedia
     */
    public function getMedia()
    {
        return $this->container['media'];
    }

    /**
     * Sets media
     *
     * @param \Purelines\WhapiSdk\Model\SendMediaMedia $media media
     *
     * @return self
     */
    public function setMedia($media)
    {
        if (is_null($media)) {
            throw new \InvalidArgumentException('non-nullable media cannot be null');
        }
        $this->container['media'] = $media;

        return $this;
    }

    /**
     * Gets mime_type
     *
     * @return string|null
     */
    public function getMimeType()
    {
        return $this->container['mime_type'];
    }

    /**
     * Sets mime_type
     *
     * @param string|null $mime_type Mime type of media
     *
     * @return self
     */
    public function setMimeType($mime_type)
    {
        if (is_null($mime_type)) {
            throw new \InvalidArgumentException('non-nullable mime_type cannot be null');
        }
        $this->container['mime_type'] = $mime_type;

        return $this;
    }

    /**
     * Gets no_encode
     *
     * @return bool|null
     */
    public function getNoEncode()
    {
        return $this->container['no_encode'];
    }

    /**
     * Sets no_encode
     *
     * @param bool|null $no_encode Do not use our encoding
     *
     * @return self
     */
    public function setNoEncode($no_encode)
    {
        if (is_null($no_encode)) {
            throw new \InvalidArgumentException('non-nullable no_encode cannot be null');
        }
        $this->container['no_encode'] = $no_encode;

        return $this;
    }

    /**
     * Gets no_cache
     *
     * @return bool|null
     */
    public function getNoCache()
    {
        return $this->container['no_cache'];
    }

    /**
     * Sets no_cache
     *
     * @param bool|null $no_cache Do not use the cache in a request
     *
     * @return self
     */
    public function setNoCache($no_cache)
    {
        if (is_null($no_cache)) {
            throw new \InvalidArgumentException('non-nullable no_cache cannot be null');
        }
        $this->container['no_cache'] = $no_cache;

        return $this;
    }

    /**
     * Gets seconds
     *
     * @return int|null
     */
    public function getSeconds()
    {
        return $this->container['seconds'];
    }

    /**
     * Sets seconds
     *
     * @param int|null $seconds Optional. For audio files, this field indicates the duration of the audio file in seconds.
     *
     * @return self
     */
    public function setSeconds($seconds)
    {
        if (is_null($seconds)) {
            throw new \InvalidArgumentException('non-nullable seconds cannot be null');
        }
        $this->container['seconds'] = $seconds;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int|null $width Width of the media in pixels
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            throw new \InvalidArgumentException('non-nullable width cannot be null');
        }
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int|null $height Height of the media in pixels
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            throw new \InvalidArgumentException('non-nullable height cannot be null');
        }
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return string[]|null
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param string[]|null $contacts List of contacts to send the story to
     *
     * @return self
     */
    public function setContacts($contacts)
    {
        if (is_null($contacts)) {
            throw new \InvalidArgumentException('non-nullable contacts cannot be null');
        }
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets exclude_contacts
     *
     * @return string[]|null
     */
    public function getExcludeContacts()
    {
        return $this->container['exclude_contacts'];
    }

    /**
     * Sets exclude_contacts
     *
     * @param string[]|null $exclude_contacts List of contacts to exclude
     *
     * @return self
     */
    public function setExcludeContacts($exclude_contacts)
    {
        if (is_null($exclude_contacts)) {
            throw new \InvalidArgumentException('non-nullable exclude_contacts cannot be null');
        }
        $this->container['exclude_contacts'] = $exclude_contacts;

        return $this;
    }

    /**
     * Gets background_color
     *
     * @return string|null
     */
    public function getBackgroundColor()
    {
        return $this->container['background_color'];
    }

    /**
     * Sets background_color
     *
     * @param string|null $background_color Background color of the story (ARGB)
     *
     * @return self
     */
    public function setBackgroundColor($background_color)
    {
        if (is_null($background_color)) {
            throw new \InvalidArgumentException('non-nullable background_color cannot be null');
        }

        if ((!preg_match("/^#[0-9a-fA-F]{6,8}$/", ObjectSerializer::toString($background_color)))) {
            throw new \InvalidArgumentException("invalid value for \$background_color when calling SenderStoriesAudio., must conform to the pattern /^#[0-9a-fA-F]{6,8}$/.");
        }

        $this->container['background_color'] = $background_color;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT,
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


