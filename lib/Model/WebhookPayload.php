<?php

/**
 * WebhookPayload
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Whapi API
 *
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Purelines\WhapiSdk\Model;

use \ArrayAccess;
use \Purelines\WhapiSdk\ObjectSerializer;

/**
 * WebhookPayload Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebhookPayload implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WebhookPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'contacts' => '\Purelines\WhapiSdk\Model\Contact[]',
        'messages' => '\Purelines\WhapiSdk\Model\Message[]',
        'messages_updates' => '\Purelines\WhapiSdk\Model\MessageUpdate[]',
        'messages_removed' => 'string[]',
        'messages_removed_all' => 'string',
        'statuses' => '\Purelines\WhapiSdk\Model\Status[]',
        'chats' => '\Purelines\WhapiSdk\Model\Chat[]',
        'chats_updates' => '\Purelines\WhapiSdk\Model\ChatUpdate[]',
        'chats_removed' => 'string[]',
        'contacts_updates' => '\Purelines\WhapiSdk\Model\ContactUpdate[]',
        'groups' => '\Purelines\WhapiSdk\Model\Group[]',
        'groups_participants' => '\Purelines\WhapiSdk\Model\ParticipantEvent[]',
        'groups_updates' => '\Purelines\WhapiSdk\Model\GroupUpdate[]',
        'presences' => '\Purelines\WhapiSdk\Model\Presence[]',
        'labels' => '\Purelines\WhapiSdk\Model\Label[]',
        'labels_removed' => 'string[]',
        'calls' => '\Purelines\WhapiSdk\Model\CallEvent[]',
        'qr' => '\Purelines\WhapiSdk\Model\QR',
        'health' => '\Purelines\WhapiSdk\Model\Health',
        'user' => '\Purelines\WhapiSdk\Model\Contact',
        'errors' => '\Purelines\WhapiSdk\Model\Error[]',
        'event' => '\Purelines\WhapiSdk\Model\Event',
        'channel_id' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'contacts' => null,
        'messages' => null,
        'messages_updates' => null,
        'messages_removed' => null,
        'messages_removed_all' => null,
        'statuses' => null,
        'chats' => null,
        'chats_updates' => null,
        'chats_removed' => null,
        'contacts_updates' => null,
        'groups' => null,
        'groups_participants' => null,
        'groups_updates' => null,
        'presences' => null,
        'labels' => null,
        'labels_removed' => null,
        'calls' => null,
        'qr' => null,
        'health' => null,
        'user' => null,
        'errors' => null,
        'event' => null,
        'channel_id' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'contacts' => false,
        'messages' => false,
        'messages_updates' => false,
        'messages_removed' => false,
        'messages_removed_all' => false,
        'statuses' => false,
        'chats' => false,
        'chats_updates' => false,
        'chats_removed' => false,
        'contacts_updates' => false,
        'groups' => false,
        'groups_participants' => false,
        'groups_updates' => false,
        'presences' => false,
        'labels' => false,
        'labels_removed' => false,
        'calls' => false,
        'qr' => false,
        'health' => false,
        'user' => false,
        'errors' => false,
        'event' => false,
        'channel_id' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contacts' => 'contacts',
        'messages' => 'messages',
        'messages_updates' => 'messages_updates',
        'messages_removed' => 'messages_removed',
        'messages_removed_all' => 'messages_removed_all',
        'statuses' => 'statuses',
        'chats' => 'chats',
        'chats_updates' => 'chats_updates',
        'chats_removed' => 'chats_removed',
        'contacts_updates' => 'contacts_updates',
        'groups' => 'groups',
        'groups_participants' => 'groups_participants',
        'groups_updates' => 'groups_updates',
        'presences' => 'presences',
        'labels' => 'labels',
        'labels_removed' => 'labels_removed',
        'calls' => 'calls',
        'qr' => 'qr',
        'health' => 'health',
        'user' => 'user',
        'errors' => 'errors',
        'event' => 'event',
        'channel_id' => 'channel_id',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contacts' => 'setContacts',
        'messages' => 'setMessages',
        'messages_updates' => 'setMessagesUpdates',
        'messages_removed' => 'setMessagesRemoved',
        'messages_removed_all' => 'setMessagesRemovedAll',
        'statuses' => 'setStatuses',
        'chats' => 'setChats',
        'chats_updates' => 'setChatsUpdates',
        'chats_removed' => 'setChatsRemoved',
        'contacts_updates' => 'setContactsUpdates',
        'groups' => 'setGroups',
        'groups_participants' => 'setGroupsParticipants',
        'groups_updates' => 'setGroupsUpdates',
        'presences' => 'setPresences',
        'labels' => 'setLabels',
        'labels_removed' => 'setLabelsRemoved',
        'calls' => 'setCalls',
        'qr' => 'setQr',
        'health' => 'setHealth',
        'user' => 'setUser',
        'errors' => 'setErrors',
        'event' => 'setEvent',
        'channel_id' => 'setChannelId',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contacts' => 'getContacts',
        'messages' => 'getMessages',
        'messages_updates' => 'getMessagesUpdates',
        'messages_removed' => 'getMessagesRemoved',
        'messages_removed_all' => 'getMessagesRemovedAll',
        'statuses' => 'getStatuses',
        'chats' => 'getChats',
        'chats_updates' => 'getChatsUpdates',
        'chats_removed' => 'getChatsRemoved',
        'contacts_updates' => 'getContactsUpdates',
        'groups' => 'getGroups',
        'groups_participants' => 'getGroupsParticipants',
        'groups_updates' => 'getGroupsUpdates',
        'presences' => 'getPresences',
        'labels' => 'getLabels',
        'labels_removed' => 'getLabelsRemoved',
        'calls' => 'getCalls',
        'qr' => 'getQr',
        'health' => 'getHealth',
        'user' => 'getUser',
        'errors' => 'getErrors',
        'event' => 'getEvent',
        'channel_id' => 'getChannelId',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('contacts', $data ?? [], null);
        $this->setIfExists('messages', $data ?? [], null);
        $this->setIfExists('messages_updates', $data ?? [], null);
        $this->setIfExists('messages_removed', $data ?? [], null);
        $this->setIfExists('messages_removed_all', $data ?? [], null);
        $this->setIfExists('statuses', $data ?? [], null);
        $this->setIfExists('chats', $data ?? [], null);
        $this->setIfExists('chats_updates', $data ?? [], null);
        $this->setIfExists('chats_removed', $data ?? [], null);
        $this->setIfExists('contacts_updates', $data ?? [], null);
        $this->setIfExists('groups', $data ?? [], null);
        $this->setIfExists('groups_participants', $data ?? [], null);
        $this->setIfExists('groups_updates', $data ?? [], null);
        $this->setIfExists('presences', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
        $this->setIfExists('labels_removed', $data ?? [], null);
        $this->setIfExists('calls', $data ?? [], null);
        $this->setIfExists('qr', $data ?? [], null);
        $this->setIfExists('health', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('errors', $data ?? [], null);
        $this->setIfExists('event', $data ?? [], null);
        $this->setIfExists('channel_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contacts
     *
     * @return \Purelines\WhapiSdk\Model\Contact[]|null
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \Purelines\WhapiSdk\Model\Contact[]|null $contacts The contacts array contains all contacts that were sent to the webhook URL. Sent on event \"contacts.post\"
     *
     * @return self
     */
    public function setContacts($contacts)
    {
        if (is_null($contacts)) {
            throw new \InvalidArgumentException('non-nullable contacts cannot be null');
        }
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return \Purelines\WhapiSdk\Model\Message[]|null
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param \Purelines\WhapiSdk\Model\Message[]|null $messages The messages array contains all messages that were sent to the webhook URL. Sent on event \"messages.post\" or \"messages.put\"
     *
     * @return self
     */
    public function setMessages($messages)
    {
        if (is_null($messages)) {
            throw new \InvalidArgumentException('non-nullable messages cannot be null');
        }
        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets messages_updates
     *
     * @return \Purelines\WhapiSdk\Model\MessageUpdate[]|null
     */
    public function getMessagesUpdates()
    {
        return $this->container['messages_updates'];
    }

    /**
     * Sets messages_updates
     *
     * @param \Purelines\WhapiSdk\Model\MessageUpdate[]|null $messages_updates The messages updates array contains all messages updates that were sent to the webhook URL. Sent on event \"messages.patch\"
     *
     * @return self
     */
    public function setMessagesUpdates($messages_updates)
    {
        if (is_null($messages_updates)) {
            throw new \InvalidArgumentException('non-nullable messages_updates cannot be null');
        }
        $this->container['messages_updates'] = $messages_updates;

        return $this;
    }

    /**
     * Gets messages_removed
     *
     * @return string[]|null
     */
    public function getMessagesRemoved()
    {
        return $this->container['messages_removed'];
    }

    /**
     * Sets messages_removed
     *
     * @param string[]|null $messages_removed The messages removed array contains all messages removed that were sent to the webhook URL. Sent on event \"messages.delete\"
     *
     * @return self
     */
    public function setMessagesRemoved($messages_removed)
    {
        if (is_null($messages_removed)) {
            throw new \InvalidArgumentException('non-nullable messages_removed cannot be null');
        }
        $this->container['messages_removed'] = $messages_removed;

        return $this;
    }

    /**
     * Gets messages_removed_all
     *
     * @return string|null
     */
    public function getMessagesRemovedAll()
    {
        return $this->container['messages_removed_all'];
    }

    /**
     * Sets messages_removed_all
     *
     * @param string|null $messages_removed_all The messages removed all contains the chat ID of the chat that was cleared. Sent on event \"messages.delete\"
     *
     * @return self
     */
    public function setMessagesRemovedAll($messages_removed_all)
    {
        if (is_null($messages_removed_all)) {
            throw new \InvalidArgumentException('non-nullable messages_removed_all cannot be null');
        }
        $this->container['messages_removed_all'] = $messages_removed_all;

        return $this;
    }

    /**
     * Gets statuses
     *
     * @return \Purelines\WhapiSdk\Model\Status[]|null
     */
    public function getStatuses()
    {
        return $this->container['statuses'];
    }

    /**
     * Sets statuses
     *
     * @param \Purelines\WhapiSdk\Model\Status[]|null $statuses The messages statuses array contains all statuses that were sent to the webhook URL. Sent on event \"statuses.post\" or \"statuses.put\"
     *
     * @return self
     */
    public function setStatuses($statuses)
    {
        if (is_null($statuses)) {
            throw new \InvalidArgumentException('non-nullable statuses cannot be null');
        }
        $this->container['statuses'] = $statuses;

        return $this;
    }

    /**
     * Gets chats
     *
     * @return \Purelines\WhapiSdk\Model\Chat[]|null
     */
    public function getChats()
    {
        return $this->container['chats'];
    }

    /**
     * Sets chats
     *
     * @param \Purelines\WhapiSdk\Model\Chat[]|null $chats The chats array contains all chats that were sent to the webhook URL. Sent on event \"chats.post\" or \"chats.put\"
     *
     * @return self
     */
    public function setChats($chats)
    {
        if (is_null($chats)) {
            throw new \InvalidArgumentException('non-nullable chats cannot be null');
        }
        $this->container['chats'] = $chats;

        return $this;
    }

    /**
     * Gets chats_updates
     *
     * @return \Purelines\WhapiSdk\Model\ChatUpdate[]|null
     */
    public function getChatsUpdates()
    {
        return $this->container['chats_updates'];
    }

    /**
     * Sets chats_updates
     *
     * @param \Purelines\WhapiSdk\Model\ChatUpdate[]|null $chats_updates The chats updates array contains all chats updates that were sent to the webhook URL. Sent on event \"chats.patch\"
     *
     * @return self
     */
    public function setChatsUpdates($chats_updates)
    {
        if (is_null($chats_updates)) {
            throw new \InvalidArgumentException('non-nullable chats_updates cannot be null');
        }
        $this->container['chats_updates'] = $chats_updates;

        return $this;
    }

    /**
     * Gets chats_removed
     *
     * @return string[]|null
     */
    public function getChatsRemoved()
    {
        return $this->container['chats_removed'];
    }

    /**
     * Sets chats_removed
     *
     * @param string[]|null $chats_removed The chats removed array contains all chats removed that were sent to the webhook URL. Sent on event \"chats.delete\"
     *
     * @return self
     */
    public function setChatsRemoved($chats_removed)
    {
        if (is_null($chats_removed)) {
            throw new \InvalidArgumentException('non-nullable chats_removed cannot be null');
        }
        $this->container['chats_removed'] = $chats_removed;

        return $this;
    }

    /**
     * Gets contacts_updates
     *
     * @return \Purelines\WhapiSdk\Model\ContactUpdate[]|null
     */
    public function getContactsUpdates()
    {
        return $this->container['contacts_updates'];
    }

    /**
     * Sets contacts_updates
     *
     * @param \Purelines\WhapiSdk\Model\ContactUpdate[]|null $contacts_updates The contacts updates array contains all contacts updates that were sent to the webhook URL. Sent on event \"contacts.patch\"
     *
     * @return self
     */
    public function setContactsUpdates($contacts_updates)
    {
        if (is_null($contacts_updates)) {
            throw new \InvalidArgumentException('non-nullable contacts_updates cannot be null');
        }
        $this->container['contacts_updates'] = $contacts_updates;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \Purelines\WhapiSdk\Model\Group[]|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \Purelines\WhapiSdk\Model\Group[]|null $groups The groups array contains all groups that were sent to the webhook URL. Sent on event \"groups.post\"
     *
     * @return self
     */
    public function setGroups($groups)
    {
        if (is_null($groups)) {
            throw new \InvalidArgumentException('non-nullable groups cannot be null');
        }
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets groups_participants
     *
     * @return \Purelines\WhapiSdk\Model\ParticipantEvent[]|null
     */
    public function getGroupsParticipants()
    {
        return $this->container['groups_participants'];
    }

    /**
     * Sets groups_participants
     *
     * @param \Purelines\WhapiSdk\Model\ParticipantEvent[]|null $groups_participants The groups participants event array contains all groups participants event that were sent to the webhook URL. Sent on event \"groups.put\"
     *
     * @return self
     */
    public function setGroupsParticipants($groups_participants)
    {
        if (is_null($groups_participants)) {
            throw new \InvalidArgumentException('non-nullable groups_participants cannot be null');
        }
        $this->container['groups_participants'] = $groups_participants;

        return $this;
    }

    /**
     * Gets groups_updates
     *
     * @return \Purelines\WhapiSdk\Model\GroupUpdate[]|null
     */
    public function getGroupsUpdates()
    {
        return $this->container['groups_updates'];
    }

    /**
     * Sets groups_updates
     *
     * @param \Purelines\WhapiSdk\Model\GroupUpdate[]|null $groups_updates The groups updates array contains all groups updates that were sent to the webhook URL. Sent on event \"groups.patch\"
     *
     * @return self
     */
    public function setGroupsUpdates($groups_updates)
    {
        if (is_null($groups_updates)) {
            throw new \InvalidArgumentException('non-nullable groups_updates cannot be null');
        }
        $this->container['groups_updates'] = $groups_updates;

        return $this;
    }

    /**
     * Gets presences
     *
     * @return \Purelines\WhapiSdk\Model\Presence[]|null
     */
    public function getPresences()
    {
        return $this->container['presences'];
    }

    /**
     * Sets presences
     *
     * @param \Purelines\WhapiSdk\Model\Presence[]|null $presences The presences array contains all presences that were sent to the webhook URL. Sent on event \"presences.post\"
     *
     * @return self
     */
    public function setPresences($presences)
    {
        if (is_null($presences)) {
            throw new \InvalidArgumentException('non-nullable presences cannot be null');
        }
        $this->container['presences'] = $presences;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \Purelines\WhapiSdk\Model\Label[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \Purelines\WhapiSdk\Model\Label[]|null $labels The labels array contains all labels that were sent to the webhook URL. Sent on event \"labels.post\"
     *
     * @return self
     */
    public function setLabels($labels)
    {
        if (is_null($labels)) {
            throw new \InvalidArgumentException('non-nullable labels cannot be null');
        }
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets labels_removed
     *
     * @return string[]|null
     */
    public function getLabelsRemoved()
    {
        return $this->container['labels_removed'];
    }

    /**
     * Sets labels_removed
     *
     * @param string[]|null $labels_removed The labels removed array contains all labels removed that were sent to the webhook URL. Sent on event \"labels.delete\"
     *
     * @return self
     */
    public function setLabelsRemoved($labels_removed)
    {
        if (is_null($labels_removed)) {
            throw new \InvalidArgumentException('non-nullable labels_removed cannot be null');
        }
        $this->container['labels_removed'] = $labels_removed;

        return $this;
    }

    /**
     * Gets calls
     *
     * @return \Purelines\WhapiSdk\Model\CallEvent[]|null
     */
    public function getCalls()
    {
        return $this->container['calls'];
    }

    /**
     * Sets calls
     *
     * @param \Purelines\WhapiSdk\Model\CallEvent[]|null $calls The calls array contains all calls that were sent to the webhook URL. Sent on event \"calls.post\"
     *
     * @return self
     */
    public function setCalls($calls)
    {
        if (is_null($calls)) {
            throw new \InvalidArgumentException('non-nullable calls cannot be null');
        }
        $this->container['calls'] = $calls;

        return $this;
    }

    /**
     * Gets qr
     *
     * @return \Purelines\WhapiSdk\Model\QR|null
     */
    public function getQr()
    {
        return $this->container['qr'];
    }

    /**
     * Sets qr
     *
     * @param \Purelines\WhapiSdk\Model\QR|null $qr qr
     *
     * @return self
     */
    public function setQr($qr)
    {
        if (is_null($qr)) {
            throw new \InvalidArgumentException('non-nullable qr cannot be null');
        }
        $this->container['qr'] = $qr;

        return $this;
    }

    /**
     * Gets health
     *
     * @return \Purelines\WhapiSdk\Model\Health|null
     */
    public function getHealth()
    {
        return $this->container['health'];
    }

    /**
     * Sets health
     *
     * @param \Purelines\WhapiSdk\Model\Health|null $health health
     *
     * @return self
     */
    public function setHealth($health)
    {
        if (is_null($health)) {
            throw new \InvalidArgumentException('non-nullable health cannot be null');
        }
        $this->container['health'] = $health;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \Purelines\WhapiSdk\Model\Contact|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \Purelines\WhapiSdk\Model\Contact|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets errors
     *
     * @return \Purelines\WhapiSdk\Model\Error[]|null
     */
    public function getErrors()
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     *
     * @param \Purelines\WhapiSdk\Model\Error[]|null $errors errors
     *
     * @return self
     */
    public function setErrors($errors)
    {
        if (is_null($errors)) {
            throw new \InvalidArgumentException('non-nullable errors cannot be null');
        }
        $this->container['errors'] = $errors;

        return $this;
    }

    /**
     * Gets event
     *
     * @return \Purelines\WhapiSdk\Model\Event|null
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param \Purelines\WhapiSdk\Model\Event|null $event event
     *
     * @return self
     */
    public function setEvent($event)
    {
        if (is_null($event)) {
            throw new \InvalidArgumentException('non-nullable event cannot be null');
        }
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets channel_id
     *
     * @return string|null
     */
    public function getChannelId()
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     *
     * @param string|null $channel_id The channel ID
     *
     * @return self
     */
    public function setChannelId($channel_id)
    {
        if (is_null($channel_id)) {
            throw new \InvalidArgumentException('non-nullable channel_id cannot be null');
        }
        $this->container['channel_id'] = $channel_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT,
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


