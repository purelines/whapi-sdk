<?php

/**
 * MessageContent
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Whapi API
 *
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Purelines\WhapiSdk\Model;

use \ArrayAccess;
use \Purelines\WhapiSdk\ObjectSerializer;

/**
 * MessageContent Class Doc Comment
 *
 * @category Class
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MessageContent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MessageContent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'body' => '\Purelines\WhapiSdk\Model\MessagePropsInteractiveBody',
        'buttons' => '\Purelines\WhapiSdk\Model\Button[]',
        'sections' => '\Purelines\WhapiSdk\Model\ActionListSectionsInner[]',
        'button' => 'string',
        'view_once' => 'bool',
        'id' => 'string',
        'link' => 'string',
        'mime_type' => 'string',
        'file_size' => 'int',
        'file_name' => 'string',
        'sha256' => 'string',
        'timestamp' => 'float',
        'caption' => 'string',
        'preview' => 'string',
        'width' => 'int',
        'height' => 'int',
        'seconds' => 'int',
        'autoplay' => 'bool',
        'recording_time' => 'float',
        'waveform' => 'string',
        'page_count' => 'int',
        'url' => 'string',
        'catalog_id' => 'string',
        'newsletter_id' => 'string',
        'invite_code' => 'string',
        'title' => 'string',
        'description' => 'string',
        'canonical' => 'string',
        'newsletter_name' => 'string',
        'expiration' => 'float',
        'product_id' => 'string',
        'animated' => 'bool',
        'latitude' => 'float',
        'longitude' => 'float',
        'address' => 'string',
        'name' => 'string',
        'accuracy' => 'int',
        'speed' => 'int',
        'degrees' => 'int',
        'comment' => 'string',
        'sequence_number' => 'int',
        'time_offset' => 'float',
        'vcard' => 'string',
        'list' => '\Purelines\WhapiSdk\Model\VCard[]',
        'header' => '\Purelines\WhapiSdk\Model\MessagePropsInteractiveHeader',
        'footer' => '\Purelines\WhapiSdk\Model\MessagePropsInteractiveFooter',
        'action' => '\Purelines\WhapiSdk\Model\InteractiveAction',
        'type' => '\Purelines\WhapiSdk\Model\InteractiveType',
        'options' => 'string[]',
        'vote_limit' => 'int',
        'total' => 'int',
        'results' => '\Purelines\WhapiSdk\Model\PollResults[]',
        'list_reply' => '\Purelines\WhapiSdk\Model\ListReply',
        'buttons_reply' => '\Purelines\WhapiSdk\Model\ButtonsReply',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'body' => null,
        'buttons' => null,
        'sections' => null,
        'button' => null,
        'view_once' => null,
        'id' => null,
        'link' => null,
        'mime_type' => null,
        'file_size' => 'int64',
        'file_name' => null,
        'sha256' => null,
        'timestamp' => null,
        'caption' => null,
        'preview' => null,
        'width' => 'int32',
        'height' => 'int32',
        'seconds' => 'int32',
        'autoplay' => null,
        'recording_time' => null,
        'waveform' => null,
        'page_count' => null,
        'url' => null,
        'catalog_id' => null,
        'newsletter_id' => null,
        'invite_code' => null,
        'title' => null,
        'description' => null,
        'canonical' => null,
        'newsletter_name' => null,
        'expiration' => null,
        'product_id' => null,
        'animated' => null,
        'latitude' => 'double',
        'longitude' => 'double',
        'address' => null,
        'name' => null,
        'accuracy' => 'int32',
        'speed' => 'int32',
        'degrees' => 'int32',
        'comment' => null,
        'sequence_number' => 'int64',
        'time_offset' => null,
        'vcard' => null,
        'list' => null,
        'header' => null,
        'footer' => null,
        'action' => null,
        'type' => null,
        'options' => null,
        'vote_limit' => null,
        'total' => null,
        'results' => null,
        'list_reply' => null,
        'buttons_reply' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'body' => false,
        'buttons' => false,
        'sections' => false,
        'button' => false,
        'view_once' => false,
        'id' => false,
        'link' => false,
        'mime_type' => false,
        'file_size' => false,
        'file_name' => false,
        'sha256' => false,
        'timestamp' => false,
        'caption' => false,
        'preview' => false,
        'width' => false,
        'height' => false,
        'seconds' => false,
        'autoplay' => false,
        'recording_time' => false,
        'waveform' => false,
        'page_count' => false,
        'url' => false,
        'catalog_id' => false,
        'newsletter_id' => false,
        'invite_code' => false,
        'title' => false,
        'description' => false,
        'canonical' => false,
        'newsletter_name' => false,
        'expiration' => false,
        'product_id' => false,
        'animated' => false,
        'latitude' => false,
        'longitude' => false,
        'address' => false,
        'name' => false,
        'accuracy' => false,
        'speed' => false,
        'degrees' => false,
        'comment' => false,
        'sequence_number' => false,
        'time_offset' => false,
        'vcard' => false,
        'list' => false,
        'header' => false,
        'footer' => false,
        'action' => false,
        'type' => false,
        'options' => false,
        'vote_limit' => false,
        'total' => false,
        'results' => false,
        'list_reply' => false,
        'buttons_reply' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'body' => 'body',
        'buttons' => 'buttons',
        'sections' => 'sections',
        'button' => 'button',
        'view_once' => 'view_once',
        'id' => 'id',
        'link' => 'link',
        'mime_type' => 'mime_type',
        'file_size' => 'file_size',
        'file_name' => 'file_name',
        'sha256' => 'sha256',
        'timestamp' => 'timestamp',
        'caption' => 'caption',
        'preview' => 'preview',
        'width' => 'width',
        'height' => 'height',
        'seconds' => 'seconds',
        'autoplay' => 'autoplay',
        'recording_time' => 'recording_time',
        'waveform' => 'waveform',
        'page_count' => 'page_count',
        'url' => 'url',
        'catalog_id' => 'catalog_id',
        'newsletter_id' => 'newsletter_id',
        'invite_code' => 'invite_code',
        'title' => 'title',
        'description' => 'description',
        'canonical' => 'canonical',
        'newsletter_name' => 'newsletter_name',
        'expiration' => 'expiration',
        'product_id' => 'product_id',
        'animated' => 'animated',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'address' => 'address',
        'name' => 'name',
        'accuracy' => 'accuracy',
        'speed' => 'speed',
        'degrees' => 'degrees',
        'comment' => 'comment',
        'sequence_number' => 'sequence_number',
        'time_offset' => 'time_offset',
        'vcard' => 'vcard',
        'list' => 'list',
        'header' => 'header',
        'footer' => 'footer',
        'action' => 'action',
        'type' => 'type',
        'options' => 'options',
        'vote_limit' => 'vote_limit',
        'total' => 'total',
        'results' => 'results',
        'list_reply' => 'list_reply',
        'buttons_reply' => 'buttons_reply',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'body' => 'setBody',
        'buttons' => 'setButtons',
        'sections' => 'setSections',
        'button' => 'setButton',
        'view_once' => 'setViewOnce',
        'id' => 'setId',
        'link' => 'setLink',
        'mime_type' => 'setMimeType',
        'file_size' => 'setFileSize',
        'file_name' => 'setFileName',
        'sha256' => 'setSha256',
        'timestamp' => 'setTimestamp',
        'caption' => 'setCaption',
        'preview' => 'setPreview',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'seconds' => 'setSeconds',
        'autoplay' => 'setAutoplay',
        'recording_time' => 'setRecordingTime',
        'waveform' => 'setWaveform',
        'page_count' => 'setPageCount',
        'url' => 'setUrl',
        'catalog_id' => 'setCatalogId',
        'newsletter_id' => 'setNewsletterId',
        'invite_code' => 'setInviteCode',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'canonical' => 'setCanonical',
        'newsletter_name' => 'setNewsletterName',
        'expiration' => 'setExpiration',
        'product_id' => 'setProductId',
        'animated' => 'setAnimated',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'address' => 'setAddress',
        'name' => 'setName',
        'accuracy' => 'setAccuracy',
        'speed' => 'setSpeed',
        'degrees' => 'setDegrees',
        'comment' => 'setComment',
        'sequence_number' => 'setSequenceNumber',
        'time_offset' => 'setTimeOffset',
        'vcard' => 'setVcard',
        'list' => 'setList',
        'header' => 'setHeader',
        'footer' => 'setFooter',
        'action' => 'setAction',
        'type' => 'setType',
        'options' => 'setOptions',
        'vote_limit' => 'setVoteLimit',
        'total' => 'setTotal',
        'results' => 'setResults',
        'list_reply' => 'setListReply',
        'buttons_reply' => 'setButtonsReply',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'body' => 'getBody',
        'buttons' => 'getButtons',
        'sections' => 'getSections',
        'button' => 'getButton',
        'view_once' => 'getViewOnce',
        'id' => 'getId',
        'link' => 'getLink',
        'mime_type' => 'getMimeType',
        'file_size' => 'getFileSize',
        'file_name' => 'getFileName',
        'sha256' => 'getSha256',
        'timestamp' => 'getTimestamp',
        'caption' => 'getCaption',
        'preview' => 'getPreview',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'seconds' => 'getSeconds',
        'autoplay' => 'getAutoplay',
        'recording_time' => 'getRecordingTime',
        'waveform' => 'getWaveform',
        'page_count' => 'getPageCount',
        'url' => 'getUrl',
        'catalog_id' => 'getCatalogId',
        'newsletter_id' => 'getNewsletterId',
        'invite_code' => 'getInviteCode',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'canonical' => 'getCanonical',
        'newsletter_name' => 'getNewsletterName',
        'expiration' => 'getExpiration',
        'product_id' => 'getProductId',
        'animated' => 'getAnimated',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'address' => 'getAddress',
        'name' => 'getName',
        'accuracy' => 'getAccuracy',
        'speed' => 'getSpeed',
        'degrees' => 'getDegrees',
        'comment' => 'getComment',
        'sequence_number' => 'getSequenceNumber',
        'time_offset' => 'getTimeOffset',
        'vcard' => 'getVcard',
        'list' => 'getList',
        'header' => 'getHeader',
        'footer' => 'getFooter',
        'action' => 'getAction',
        'type' => 'getType',
        'options' => 'getOptions',
        'vote_limit' => 'getVoteLimit',
        'total' => 'getTotal',
        'results' => 'getResults',
        'list_reply' => 'getListReply',
        'buttons_reply' => 'getButtonsReply',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('body', $data ?? [], null);
        $this->setIfExists('buttons', $data ?? [], null);
        $this->setIfExists('sections', $data ?? [], null);
        $this->setIfExists('button', $data ?? [], null);
        $this->setIfExists('view_once', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('link', $data ?? [], null);
        $this->setIfExists('mime_type', $data ?? [], null);
        $this->setIfExists('file_size', $data ?? [], null);
        $this->setIfExists('file_name', $data ?? [], null);
        $this->setIfExists('sha256', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('caption', $data ?? [], null);
        $this->setIfExists('preview', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('seconds', $data ?? [], null);
        $this->setIfExists('autoplay', $data ?? [], null);
        $this->setIfExists('recording_time', $data ?? [], 0);
        $this->setIfExists('waveform', $data ?? [], null);
        $this->setIfExists('page_count', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('catalog_id', $data ?? [], null);
        $this->setIfExists('newsletter_id', $data ?? [], null);
        $this->setIfExists('invite_code', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('canonical', $data ?? [], null);
        $this->setIfExists('newsletter_name', $data ?? [], null);
        $this->setIfExists('expiration', $data ?? [], null);
        $this->setIfExists('product_id', $data ?? [], null);
        $this->setIfExists('animated', $data ?? [], null);
        $this->setIfExists('latitude', $data ?? [], null);
        $this->setIfExists('longitude', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('accuracy', $data ?? [], null);
        $this->setIfExists('speed', $data ?? [], null);
        $this->setIfExists('degrees', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('sequence_number', $data ?? [], null);
        $this->setIfExists('time_offset', $data ?? [], null);
        $this->setIfExists('vcard', $data ?? [], null);
        $this->setIfExists('list', $data ?? [], null);
        $this->setIfExists('header', $data ?? [], null);
        $this->setIfExists('footer', $data ?? [], null);
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
        $this->setIfExists('vote_limit', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('results', $data ?? [], null);
        $this->setIfExists('list_reply', $data ?? [], null);
        $this->setIfExists('buttons_reply', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['body'] === null) {
            $invalidProperties[] = "'body' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!preg_match("/^(?:media_init|[A-Za-z0-9]+-[0-9A-Fa-f-]+)$/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^(?:media_init|[A-Za-z0-9]+-[0-9A-Fa-f-]+)$/.";
        }

        if ($this->container['mime_type'] === null) {
            $invalidProperties[] = "'mime_type' can't be null";
        }
        if ($this->container['file_size'] === null) {
            $invalidProperties[] = "'file_size' can't be null";
        }
        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        if (!is_null($this->container['recording_time']) && ($this->container['recording_time'] < 0)) {
            $invalidProperties[] = "invalid value for 'recording_time', must be bigger than or equal to 0.";
        }

        if ($this->container['newsletter_id'] === null) {
            $invalidProperties[] = "'newsletter_id' can't be null";
        }
        if (!preg_match("/^[\\d]{10,18}@newsletter$/", $this->container['newsletter_id'])) {
            $invalidProperties[] = "invalid value for 'newsletter_id', must be conform to the pattern /^[\\d]{10,18}@newsletter$/.";
        }

        if (!is_null($this->container['invite_code']) && !preg_match("/^[A-Za-z0-9]{14,22}$/", $this->container['invite_code'])) {
            $invalidProperties[] = "invalid value for 'invite_code', must be conform to the pattern /^[A-Za-z0-9]{14,22}$/.";
        }

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['newsletter_name'] === null) {
            $invalidProperties[] = "'newsletter_name' can't be null";
        }
        if ($this->container['expiration'] === null) {
            $invalidProperties[] = "'expiration' can't be null";
        }
        if ($this->container['latitude'] === null) {
            $invalidProperties[] = "'latitude' can't be null";
        }
        if ($this->container['longitude'] === null) {
            $invalidProperties[] = "'longitude' can't be null";
        }
        if ($this->container['action'] === null) {
            $invalidProperties[] = "'action' can't be null";
        }
        if ($this->container['options'] === null) {
            $invalidProperties[] = "'options' can't be null";
        }
        if ((count($this->container['options']) > 12)) {
            $invalidProperties[] = "invalid value for 'options', number of items must be less than or equal to 12.";
        }

        if ((count($this->container['options']) < 2)) {
            $invalidProperties[] = "invalid value for 'options', number of items must be greater than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets body
     *
     * @return \Purelines\WhapiSdk\Model\MessagePropsInteractiveBody
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param \Purelines\WhapiSdk\Model\MessagePropsInteractiveBody $body body
     *
     * @return self
     */
    public function setBody($body)
    {
        if (is_null($body)) {
            throw new \InvalidArgumentException('non-nullable body cannot be null');
        }
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets buttons
     *
     * @return \Purelines\WhapiSdk\Model\Button[]|null
     */
    public function getButtons()
    {
        return $this->container['buttons'];
    }

    /**
     * Sets buttons
     *
     * @param \Purelines\WhapiSdk\Model\Button[]|null $buttons buttons
     *
     * @return self
     */
    public function setButtons($buttons)
    {
        if (is_null($buttons)) {
            throw new \InvalidArgumentException('non-nullable buttons cannot be null');
        }
        $this->container['buttons'] = $buttons;

        return $this;
    }

    /**
     * Gets sections
     *
     * @return \Purelines\WhapiSdk\Model\ActionListSectionsInner[]|null
     */
    public function getSections()
    {
        return $this->container['sections'];
    }

    /**
     * Sets sections
     *
     * @param \Purelines\WhapiSdk\Model\ActionListSectionsInner[]|null $sections Section of the message
     *
     * @return self
     */
    public function setSections($sections)
    {
        if (is_null($sections)) {
            throw new \InvalidArgumentException('non-nullable sections cannot be null');
        }
        $this->container['sections'] = $sections;

        return $this;
    }

    /**
     * Gets button
     *
     * @return string|null
     */
    public function getButton()
    {
        return $this->container['button'];
    }

    /**
     * Sets button
     *
     * @param string|null $button Button text for list of message
     *
     * @return self
     */
    public function setButton($button)
    {
        if (is_null($button)) {
            throw new \InvalidArgumentException('non-nullable button cannot be null');
        }
        $this->container['button'] = $button;

        return $this;
    }

    /**
     * Gets view_once
     *
     * @return bool|null
     */
    public function getViewOnce()
    {
        return $this->container['view_once'];
    }

    /**
     * Sets view_once
     *
     * @param bool|null $view_once Is view once
     *
     * @return self
     */
    public function setViewOnce($view_once)
    {
        if (is_null($view_once)) {
            throw new \InvalidArgumentException('non-nullable view_once cannot be null');
        }
        $this->container['view_once'] = $view_once;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Media ID (or media_init placeholder)
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        if ((!preg_match("/^(?:media_init|[A-Za-z0-9]+-[0-9A-Fa-f-]+)$/", ObjectSerializer::toString($id)))) {
            throw new \InvalidArgumentException("invalid value for \$id when calling MessageContent., must conform to the pattern /^(?:media_init|[A-Za-z0-9]+-[0-9A-Fa-f-]+)$/.");
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets link
     *
     * @return string|null
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param string|null $link Optional. Link to media
     *
     * @return self
     */
    public function setLink($link)
    {
        if (is_null($link)) {
            throw new \InvalidArgumentException('non-nullable link cannot be null');
        }
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets mime_type
     *
     * @return string
     */
    public function getMimeType()
    {
        return $this->container['mime_type'];
    }

    /**
     * Sets mime_type
     *
     * @param string $mime_type Mime type of media
     *
     * @return self
     */
    public function setMimeType($mime_type)
    {
        if (is_null($mime_type)) {
            throw new \InvalidArgumentException('non-nullable mime_type cannot be null');
        }
        $this->container['mime_type'] = $mime_type;

        return $this;
    }

    /**
     * Gets file_size
     *
     * @return int
     */
    public function getFileSize()
    {
        return $this->container['file_size'];
    }

    /**
     * Sets file_size
     *
     * @param int $file_size File size in bytes
     *
     * @return self
     */
    public function setFileSize($file_size)
    {
        if (is_null($file_size)) {
            throw new \InvalidArgumentException('non-nullable file_size cannot be null');
        }
        $this->container['file_size'] = $file_size;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string|null
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string|null $file_name Optional. File name
     *
     * @return self
     */
    public function setFileName($file_name)
    {
        if (is_null($file_name)) {
            throw new \InvalidArgumentException('non-nullable file_name cannot be null');
        }
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets sha256
     *
     * @return string|null
     */
    public function getSha256()
    {
        return $this->container['sha256'];
    }

    /**
     * Sets sha256
     *
     * @param string|null $sha256 Checksum
     *
     * @return self
     */
    public function setSha256($sha256)
    {
        if (is_null($sha256)) {
            throw new \InvalidArgumentException('non-nullable sha256 cannot be null');
        }
        $this->container['sha256'] = $sha256;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return float
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param float $timestamp Created at
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets caption
     *
     * @return string|null
     */
    public function getCaption()
    {
        return $this->container['caption'];
    }

    /**
     * Sets caption
     *
     * @param string|null $caption Optional. Text caption under the live location
     *
     * @return self
     */
    public function setCaption($caption)
    {
        if (is_null($caption)) {
            throw new \InvalidArgumentException('non-nullable caption cannot be null');
        }
        $this->container['caption'] = $caption;

        return $this;
    }

    /**
     * Gets preview
     *
     * @return string|null
     */
    public function getPreview()
    {
        return $this->container['preview'];
    }

    /**
     * Sets preview
     *
     * @param string|null $preview Optional. Base64 encoded preview of the media. In JPEG format.
     *
     * @return self
     */
    public function setPreview($preview)
    {
        if (is_null($preview)) {
            throw new \InvalidArgumentException('non-nullable preview cannot be null');
        }
        $this->container['preview'] = $preview;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int|null $width Width of the media in pixels
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            throw new \InvalidArgumentException('non-nullable width cannot be null');
        }
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int|null $height Height of the media in pixels
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            throw new \InvalidArgumentException('non-nullable height cannot be null');
        }
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets seconds
     *
     * @return int|null
     */
    public function getSeconds()
    {
        return $this->container['seconds'];
    }

    /**
     * Sets seconds
     *
     * @param int|null $seconds Optional. For audio files, this field indicates the duration of the audio file in seconds.
     *
     * @return self
     */
    public function setSeconds($seconds)
    {
        if (is_null($seconds)) {
            throw new \InvalidArgumentException('non-nullable seconds cannot be null');
        }
        $this->container['seconds'] = $seconds;

        return $this;
    }

    /**
     * Gets autoplay
     *
     * @return bool|null
     */
    public function getAutoplay()
    {
        return $this->container['autoplay'];
    }

    /**
     * Sets autoplay
     *
     * @param bool|null $autoplay Optional. If the media is a GIF, this field indicates whether the GIF should be played automatically when the message is received.
     *
     * @return self
     */
    public function setAutoplay($autoplay)
    {
        if (is_null($autoplay)) {
            throw new \InvalidArgumentException('non-nullable autoplay cannot be null');
        }
        $this->container['autoplay'] = $autoplay;

        return $this;
    }

    /**
     * Gets recording_time
     *
     * @return float|null
     */
    public function getRecordingTime()
    {
        return $this->container['recording_time'];
    }

    /**
     * Sets recording_time
     *
     * @param float|null $recording_time Time in seconds to simulate recording voice
     *
     * @return self
     */
    public function setRecordingTime($recording_time)
    {
        if (is_null($recording_time)) {
            throw new \InvalidArgumentException('non-nullable recording_time cannot be null');
        }

        if (($recording_time < 0)) {
            throw new \InvalidArgumentException('invalid value for $recording_time when calling MessageContent., must be bigger than or equal to 0.');
        }

        $this->container['recording_time'] = $recording_time;

        return $this;
    }

    /**
     * Gets waveform
     *
     * @return string|null
     */
    public function getWaveform()
    {
        return $this->container['waveform'];
    }

    /**
     * Sets waveform
     *
     * @param string|null $waveform Voice message waveform
     *
     * @return self
     */
    public function setWaveform($waveform)
    {
        if (is_null($waveform)) {
            throw new \InvalidArgumentException('non-nullable waveform cannot be null');
        }
        $this->container['waveform'] = $waveform;

        return $this;
    }

    /**
     * Gets page_count
     *
     * @return int|null
     */
    public function getPageCount()
    {
        return $this->container['page_count'];
    }

    /**
     * Sets page_count
     *
     * @param int|null $page_count Optional. Number of pages
     *
     * @return self
     */
    public function setPageCount($page_count)
    {
        if (is_null($page_count)) {
            throw new \InvalidArgumentException('non-nullable page_count cannot be null');
        }
        $this->container['page_count'] = $page_count;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url URL for the website where the user downloaded the location information
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets catalog_id
     *
     * @return string|null
     */
    public function getCatalogId()
    {
        return $this->container['catalog_id'];
    }

    /**
     * Sets catalog_id
     *
     * @param string|null $catalog_id Catalog ID
     *
     * @return self
     */
    public function setCatalogId($catalog_id)
    {
        if (is_null($catalog_id)) {
            throw new \InvalidArgumentException('non-nullable catalog_id cannot be null');
        }
        $this->container['catalog_id'] = $catalog_id;

        return $this;
    }

    /**
     * Gets newsletter_id
     *
     * @return string
     */
    public function getNewsletterId()
    {
        return $this->container['newsletter_id'];
    }

    /**
     * Sets newsletter_id
     *
     * @param string $newsletter_id Newsletter ID
     *
     * @return self
     */
    public function setNewsletterId($newsletter_id)
    {
        if (is_null($newsletter_id)) {
            throw new \InvalidArgumentException('non-nullable newsletter_id cannot be null');
        }

        if ((!preg_match("/^[\\d]{10,18}@newsletter$/", ObjectSerializer::toString($newsletter_id)))) {
            throw new \InvalidArgumentException("invalid value for \$newsletter_id when calling MessageContent., must conform to the pattern /^[\\d]{10,18}@newsletter$/.");
        }

        $this->container['newsletter_id'] = $newsletter_id;

        return $this;
    }

    /**
     * Gets invite_code
     *
     * @return string|null
     */
    public function getInviteCode()
    {
        return $this->container['invite_code'];
    }

    /**
     * Sets invite_code
     *
     * @param string|null $invite_code Invite code
     *
     * @return self
     */
    public function setInviteCode($invite_code)
    {
        if (is_null($invite_code)) {
            throw new \InvalidArgumentException('non-nullable invite_code cannot be null');
        }

        if ((!preg_match("/^[A-Za-z0-9]{14,22}$/", ObjectSerializer::toString($invite_code)))) {
            throw new \InvalidArgumentException("invalid value for \$invite_code when calling MessageContent., must conform to the pattern /^[A-Za-z0-9]{14,22}$/.");
        }

        $this->container['invite_code'] = $invite_code;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Title of poll
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the link
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets canonical
     *
     * @return string|null
     */
    public function getCanonical()
    {
        return $this->container['canonical'];
    }

    /**
     * Sets canonical
     *
     * @param string|null $canonical Canonical URL of the link (for example, if the link is shortened)
     *
     * @return self
     */
    public function setCanonical($canonical)
    {
        if (is_null($canonical)) {
            throw new \InvalidArgumentException('non-nullable canonical cannot be null');
        }
        $this->container['canonical'] = $canonical;

        return $this;
    }

    /**
     * Gets newsletter_name
     *
     * @return string
     */
    public function getNewsletterName()
    {
        return $this->container['newsletter_name'];
    }

    /**
     * Sets newsletter_name
     *
     * @param string $newsletter_name Newsletter name
     *
     * @return self
     */
    public function setNewsletterName($newsletter_name)
    {
        if (is_null($newsletter_name)) {
            throw new \InvalidArgumentException('non-nullable newsletter_name cannot be null');
        }
        $this->container['newsletter_name'] = $newsletter_name;

        return $this;
    }

    /**
     * Gets expiration
     *
     * @return float
     */
    public function getExpiration()
    {
        return $this->container['expiration'];
    }

    /**
     * Sets expiration
     *
     * @param float $expiration Expiration timestamp of the invitation
     *
     * @return self
     */
    public function setExpiration($expiration)
    {
        if (is_null($expiration)) {
            throw new \InvalidArgumentException('non-nullable expiration cannot be null');
        }
        $this->container['expiration'] = $expiration;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string|null
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string|null $product_id Product ID
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        if (is_null($product_id)) {
            throw new \InvalidArgumentException('non-nullable product_id cannot be null');
        }
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets animated
     *
     * @return bool|null
     */
    public function getAnimated()
    {
        return $this->container['animated'];
    }

    /**
     * Sets animated
     *
     * @param bool|null $animated Optional. For stickers, this field indicates whether the sticker is animated.
     *
     * @return self
     */
    public function setAnimated($animated)
    {
        if (is_null($animated)) {
            throw new \InvalidArgumentException('non-nullable animated cannot be null');
        }
        $this->container['animated'] = $animated;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float $latitude Latitude of live location being sent
     *
     * @return self
     */
    public function setLatitude($latitude)
    {
        if (is_null($latitude)) {
            throw new \InvalidArgumentException('non-nullable latitude cannot be null');
        }
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float $longitude Longitude of live location being sent
     *
     * @return self
     */
    public function setLongitude($longitude)
    {
        if (is_null($longitude)) {
            throw new \InvalidArgumentException('non-nullable longitude cannot be null');
        }
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address Address of the location
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of contact
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets accuracy
     *
     * @return int|null
     */
    public function getAccuracy()
    {
        return $this->container['accuracy'];
    }

    /**
     * Sets accuracy
     *
     * @param int|null $accuracy Accuracy of the live location in meters
     *
     * @return self
     */
    public function setAccuracy($accuracy)
    {
        if (is_null($accuracy)) {
            throw new \InvalidArgumentException('non-nullable accuracy cannot be null');
        }
        $this->container['accuracy'] = $accuracy;

        return $this;
    }

    /**
     * Gets speed
     *
     * @return int|null
     */
    public function getSpeed()
    {
        return $this->container['speed'];
    }

    /**
     * Sets speed
     *
     * @param int|null $speed Speed of the live location in meters per second
     *
     * @return self
     */
    public function setSpeed($speed)
    {
        if (is_null($speed)) {
            throw new \InvalidArgumentException('non-nullable speed cannot be null');
        }
        $this->container['speed'] = $speed;

        return $this;
    }

    /**
     * Gets degrees
     *
     * @return int|null
     */
    public function getDegrees()
    {
        return $this->container['degrees'];
    }

    /**
     * Sets degrees
     *
     * @param int|null $degrees Degrees clockwise from true north
     *
     * @return self
     */
    public function setDegrees($degrees)
    {
        if (is_null($degrees)) {
            throw new \InvalidArgumentException('non-nullable degrees cannot be null');
        }
        $this->container['degrees'] = $degrees;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Optional. Comment for the location
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets sequence_number
     *
     * @return int|null
     */
    public function getSequenceNumber()
    {
        return $this->container['sequence_number'];
    }

    /**
     * Sets sequence_number
     *
     * @param int|null $sequence_number Optional. Sequence number of the live location for event tracking
     *
     * @return self
     */
    public function setSequenceNumber($sequence_number)
    {
        if (is_null($sequence_number)) {
            throw new \InvalidArgumentException('non-nullable sequence_number cannot be null');
        }
        $this->container['sequence_number'] = $sequence_number;

        return $this;
    }

    /**
     * Gets time_offset
     *
     * @return float|null
     */
    public function getTimeOffset()
    {
        return $this->container['time_offset'];
    }

    /**
     * Sets time_offset
     *
     * @param float|null $time_offset Optional. Time offset of the live location
     *
     * @return self
     */
    public function setTimeOffset($time_offset)
    {
        if (is_null($time_offset)) {
            throw new \InvalidArgumentException('non-nullable time_offset cannot be null');
        }
        $this->container['time_offset'] = $time_offset;

        return $this;
    }

    /**
     * Gets vcard
     *
     * @return string|null
     */
    public function getVcard()
    {
        return $this->container['vcard'];
    }

    /**
     * Sets vcard
     *
     * @param string|null $vcard Vcard of contact
     *
     * @return self
     */
    public function setVcard($vcard)
    {
        if (is_null($vcard)) {
            throw new \InvalidArgumentException('non-nullable vcard cannot be null');
        }
        $this->container['vcard'] = $vcard;

        return $this;
    }

    /**
     * Gets list
     *
     * @return \Purelines\WhapiSdk\Model\VCard[]|null
     */
    public function getList()
    {
        return $this->container['list'];
    }

    /**
     * Sets list
     *
     * @param \Purelines\WhapiSdk\Model\VCard[]|null $list list
     *
     * @return self
     */
    public function setList($list)
    {
        if (is_null($list)) {
            throw new \InvalidArgumentException('non-nullable list cannot be null');
        }
        $this->container['list'] = $list;

        return $this;
    }

    /**
     * Gets header
     *
     * @return \Purelines\WhapiSdk\Model\MessagePropsInteractiveHeader|null
     */
    public function getHeader()
    {
        return $this->container['header'];
    }

    /**
     * Sets header
     *
     * @param \Purelines\WhapiSdk\Model\MessagePropsInteractiveHeader|null $header header
     *
     * @return self
     */
    public function setHeader($header)
    {
        if (is_null($header)) {
            throw new \InvalidArgumentException('non-nullable header cannot be null');
        }
        $this->container['header'] = $header;

        return $this;
    }

    /**
     * Gets footer
     *
     * @return \Purelines\WhapiSdk\Model\MessagePropsInteractiveFooter|null
     */
    public function getFooter()
    {
        return $this->container['footer'];
    }

    /**
     * Sets footer
     *
     * @param \Purelines\WhapiSdk\Model\MessagePropsInteractiveFooter|null $footer footer
     *
     * @return self
     */
    public function setFooter($footer)
    {
        if (is_null($footer)) {
            throw new \InvalidArgumentException('non-nullable footer cannot be null');
        }
        $this->container['footer'] = $footer;

        return $this;
    }

    /**
     * Gets action
     *
     * @return \Purelines\WhapiSdk\Model\InteractiveAction
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param \Purelines\WhapiSdk\Model\InteractiveAction $action action
     *
     * @return self
     */
    public function setAction($action)
    {
        if (is_null($action)) {
            throw new \InvalidArgumentException('non-nullable action cannot be null');
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Purelines\WhapiSdk\Model\InteractiveType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Purelines\WhapiSdk\Model\InteractiveType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets options
     *
     * @return string[]
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param string[] $options Options of poll
     *
     * @return self
     */
    public function setOptions($options)
    {
        if (is_null($options)) {
            throw new \InvalidArgumentException('non-nullable options cannot be null');
        }

        if ((count($options) > 12)) {
            throw new \InvalidArgumentException('invalid value for $options when calling MessageContent., number of items must be less than or equal to 12.');
        }
        if ((count($options) < 2)) {
            throw new \InvalidArgumentException('invalid length for $options when calling MessageContent., number of items must be greater than or equal to 2.');
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets vote_limit
     *
     * @return int|null
     */
    public function getVoteLimit()
    {
        return $this->container['vote_limit'];
    }

    /**
     * Sets vote_limit
     *
     * @param int|null $vote_limit Number of selectable options in poll (1 - can choose only one option, 0 - any number of options)
     *
     * @return self
     */
    public function setVoteLimit($vote_limit)
    {
        if (is_null($vote_limit)) {
            throw new \InvalidArgumentException('non-nullable vote_limit cannot be null');
        }
        $this->container['vote_limit'] = $vote_limit;

        return $this;
    }

    /**
     * Gets total
     *
     * @return int|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int|null $total Total count of selected options
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets results
     *
     * @return \Purelines\WhapiSdk\Model\PollResults[]|null
     */
    public function getResults()
    {
        return $this->container['results'];
    }

    /**
     * Sets results
     *
     * @param \Purelines\WhapiSdk\Model\PollResults[]|null $results results
     *
     * @return self
     */
    public function setResults($results)
    {
        if (is_null($results)) {
            throw new \InvalidArgumentException('non-nullable results cannot be null');
        }
        $this->container['results'] = $results;

        return $this;
    }

    /**
     * Gets list_reply
     *
     * @return \Purelines\WhapiSdk\Model\ListReply|null
     */
    public function getListReply()
    {
        return $this->container['list_reply'];
    }

    /**
     * Sets list_reply
     *
     * @param \Purelines\WhapiSdk\Model\ListReply|null $list_reply list_reply
     *
     * @return self
     */
    public function setListReply($list_reply)
    {
        if (is_null($list_reply)) {
            throw new \InvalidArgumentException('non-nullable list_reply cannot be null');
        }
        $this->container['list_reply'] = $list_reply;

        return $this;
    }

    /**
     * Gets buttons_reply
     *
     * @return \Purelines\WhapiSdk\Model\ButtonsReply|null
     */
    public function getButtonsReply()
    {
        return $this->container['buttons_reply'];
    }

    /**
     * Sets buttons_reply
     *
     * @param \Purelines\WhapiSdk\Model\ButtonsReply|null $buttons_reply buttons_reply
     *
     * @return self
     */
    public function setButtonsReply($buttons_reply)
    {
        if (is_null($buttons_reply)) {
            throw new \InvalidArgumentException('non-nullable buttons_reply cannot be null');
        }
        $this->container['buttons_reply'] = $buttons_reply;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT,
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


