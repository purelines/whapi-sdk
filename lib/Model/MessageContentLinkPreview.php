<?php

/**
 * MessageContentLinkPreview
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Whapi API
 *
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Purelines\WhapiSdk\Model;

use \ArrayAccess;
use \Purelines\WhapiSdk\ObjectSerializer;

/**
 * MessageContentLinkPreview Class Doc Comment
 *
 * @category Class
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MessageContentLinkPreview implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MessageContentLinkPreview';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'body' => 'string',
        'title' => 'string',
        'description' => 'string',
        'canonical' => 'string',
        'preview' => 'string',
        'view_once' => 'bool',
        'url' => 'string',
        'id' => 'string',
        'link' => 'string',
        'sha256' => 'string',
        'catalog_id' => 'string',
        'newsletter_id' => 'string',
        'invite_code' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'body' => null,
        'title' => null,
        'description' => null,
        'canonical' => null,
        'preview' => null,
        'view_once' => null,
        'url' => null,
        'id' => null,
        'link' => null,
        'sha256' => null,
        'catalog_id' => null,
        'newsletter_id' => null,
        'invite_code' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'body' => false,
        'title' => false,
        'description' => false,
        'canonical' => false,
        'preview' => false,
        'view_once' => false,
        'url' => false,
        'id' => false,
        'link' => false,
        'sha256' => false,
        'catalog_id' => false,
        'newsletter_id' => false,
        'invite_code' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'body' => 'body',
        'title' => 'title',
        'description' => 'description',
        'canonical' => 'canonical',
        'preview' => 'preview',
        'view_once' => 'view_once',
        'url' => 'url',
        'id' => 'id',
        'link' => 'link',
        'sha256' => 'sha256',
        'catalog_id' => 'catalog_id',
        'newsletter_id' => 'newsletter_id',
        'invite_code' => 'invite_code',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'body' => 'setBody',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'canonical' => 'setCanonical',
        'preview' => 'setPreview',
        'view_once' => 'setViewOnce',
        'url' => 'setUrl',
        'id' => 'setId',
        'link' => 'setLink',
        'sha256' => 'setSha256',
        'catalog_id' => 'setCatalogId',
        'newsletter_id' => 'setNewsletterId',
        'invite_code' => 'setInviteCode',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'body' => 'getBody',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'canonical' => 'getCanonical',
        'preview' => 'getPreview',
        'view_once' => 'getViewOnce',
        'url' => 'getUrl',
        'id' => 'getId',
        'link' => 'getLink',
        'sha256' => 'getSha256',
        'catalog_id' => 'getCatalogId',
        'newsletter_id' => 'getNewsletterId',
        'invite_code' => 'getInviteCode',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('body', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('canonical', $data ?? [], null);
        $this->setIfExists('preview', $data ?? [], null);
        $this->setIfExists('view_once', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('link', $data ?? [], null);
        $this->setIfExists('sha256', $data ?? [], null);
        $this->setIfExists('catalog_id', $data ?? [], null);
        $this->setIfExists('newsletter_id', $data ?? [], null);
        $this->setIfExists('invite_code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['body'] === null) {
            $invalidProperties[] = "'body' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if (!is_null($this->container['id']) && !preg_match("/^[a-zA-Z0-9]+-[0-9a-fA-F-]+$/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^[a-zA-Z0-9]+-[0-9a-fA-F-]+$/.";
        }

        if (!is_null($this->container['catalog_id']) && !preg_match("/^([\\d]{7,15})?$/", $this->container['catalog_id'])) {
            $invalidProperties[] = "invalid value for 'catalog_id', must be conform to the pattern /^([\\d]{7,15})?$/.";
        }

        if (!is_null($this->container['newsletter_id']) && !preg_match("/^[\\d]{10,18}@newsletter$/", $this->container['newsletter_id'])) {
            $invalidProperties[] = "invalid value for 'newsletter_id', must be conform to the pattern /^[\\d]{10,18}@newsletter$/.";
        }

        if (!is_null($this->container['invite_code']) && !preg_match("/^[A-Za-z0-9]{14,22}$/", $this->container['invite_code'])) {
            $invalidProperties[] = "invalid value for 'invite_code', must be conform to the pattern /^[A-Za-z0-9]{14,22}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body Message text
     *
     * @return self
     */
    public function setBody($body)
    {
        if (is_null($body)) {
            throw new \InvalidArgumentException('non-nullable body cannot be null');
        }
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Title of the link
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the link
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets canonical
     *
     * @return string|null
     */
    public function getCanonical()
    {
        return $this->container['canonical'];
    }

    /**
     * Sets canonical
     *
     * @param string|null $canonical Canonical URL of the link (for example, if the link is shortened)
     *
     * @return self
     */
    public function setCanonical($canonical)
    {
        if (is_null($canonical)) {
            throw new \InvalidArgumentException('non-nullable canonical cannot be null');
        }
        $this->container['canonical'] = $canonical;

        return $this;
    }

    /**
     * Gets preview
     *
     * @return string|null
     */
    public function getPreview()
    {
        return $this->container['preview'];
    }

    /**
     * Sets preview
     *
     * @param string|null $preview Base64 encoded image for mini version link preview. In JPEG format
     *
     * @return self
     */
    public function setPreview($preview)
    {
        if (is_null($preview)) {
            throw new \InvalidArgumentException('non-nullable preview cannot be null');
        }
        $this->container['preview'] = $preview;

        return $this;
    }

    /**
     * Gets view_once
     *
     * @return bool|null
     */
    public function getViewOnce()
    {
        return $this->container['view_once'];
    }

    /**
     * Sets view_once
     *
     * @param bool|null $view_once Is view once
     *
     * @return self
     */
    public function setViewOnce($view_once)
    {
        if (is_null($view_once)) {
            throw new \InvalidArgumentException('non-nullable view_once cannot be null');
        }
        $this->container['view_once'] = $view_once;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url URL of the link
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Media ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        if ((!preg_match("/^[a-zA-Z0-9]+-[0-9a-fA-F-]+$/", ObjectSerializer::toString($id)))) {
            throw new \InvalidArgumentException("invalid value for \$id when calling MessageContentLinkPreview., must conform to the pattern /^[a-zA-Z0-9]+-[0-9a-fA-F-]+$/.");
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets link
     *
     * @return string|null
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param string|null $link Optional. Link to media
     *
     * @return self
     */
    public function setLink($link)
    {
        if (is_null($link)) {
            throw new \InvalidArgumentException('non-nullable link cannot be null');
        }
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets sha256
     *
     * @return string|null
     */
    public function getSha256()
    {
        return $this->container['sha256'];
    }

    /**
     * Sets sha256
     *
     * @param string|null $sha256 Checksum
     *
     * @return self
     */
    public function setSha256($sha256)
    {
        if (is_null($sha256)) {
            throw new \InvalidArgumentException('non-nullable sha256 cannot be null');
        }
        $this->container['sha256'] = $sha256;

        return $this;
    }

    /**
     * Gets catalog_id
     *
     * @return string|null
     */
    public function getCatalogId()
    {
        return $this->container['catalog_id'];
    }

    /**
     * Sets catalog_id
     *
     * @param string|null $catalog_id Contact ID
     *
     * @return self
     */
    public function setCatalogId($catalog_id)
    {
        if (is_null($catalog_id)) {
            throw new \InvalidArgumentException('non-nullable catalog_id cannot be null');
        }

        if ((!preg_match("/^([\\d]{7,15})?$/", ObjectSerializer::toString($catalog_id)))) {
            throw new \InvalidArgumentException("invalid value for \$catalog_id when calling MessageContentLinkPreview., must conform to the pattern /^([\\d]{7,15})?$/.");
        }

        $this->container['catalog_id'] = $catalog_id;

        return $this;
    }

    /**
     * Gets newsletter_id
     *
     * @return string|null
     */
    public function getNewsletterId()
    {
        return $this->container['newsletter_id'];
    }

    /**
     * Sets newsletter_id
     *
     * @param string|null $newsletter_id Newsletter ID
     *
     * @return self
     */
    public function setNewsletterId($newsletter_id)
    {
        if (is_null($newsletter_id)) {
            throw new \InvalidArgumentException('non-nullable newsletter_id cannot be null');
        }

        if ((!preg_match("/^[\\d]{10,18}@newsletter$/", ObjectSerializer::toString($newsletter_id)))) {
            throw new \InvalidArgumentException("invalid value for \$newsletter_id when calling MessageContentLinkPreview., must conform to the pattern /^[\\d]{10,18}@newsletter$/.");
        }

        $this->container['newsletter_id'] = $newsletter_id;

        return $this;
    }

    /**
     * Gets invite_code
     *
     * @return string|null
     */
    public function getInviteCode()
    {
        return $this->container['invite_code'];
    }

    /**
     * Sets invite_code
     *
     * @param string|null $invite_code Invite code
     *
     * @return self
     */
    public function setInviteCode($invite_code)
    {
        if (is_null($invite_code)) {
            throw new \InvalidArgumentException('non-nullable invite_code cannot be null');
        }

        if ((!preg_match("/^[A-Za-z0-9]{14,22}$/", ObjectSerializer::toString($invite_code)))) {
            throw new \InvalidArgumentException("invalid value for \$invite_code when calling MessageContentLinkPreview., must conform to the pattern /^[A-Za-z0-9]{14,22}$/.");
        }

        $this->container['invite_code'] = $invite_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT,
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


