<?php

/**
 * Chat
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Whapi API
 *
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Purelines\WhapiSdk\Model;

use \ArrayAccess;
use \Purelines\WhapiSdk\ObjectSerializer;

/**
 * Chat Class Doc Comment
 *
 * @category Class
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Chat implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Chat';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'type' => 'string',
        'timestamp' => 'int',
        'chat_pic' => 'string',
        'chat_pic_full' => 'string',
        'pin' => 'bool',
        'mute' => 'bool',
        'mute_until' => 'int',
        'archive' => 'bool',
        'unread' => 'int',
        'unread_mention' => 'bool',
        'read_only' => 'bool',
        'not_spam' => 'bool',
        'last_message' => '\Purelines\WhapiSdk\Model\Message',
        'labels' => '\Purelines\WhapiSdk\Model\Label[]',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'type' => null,
        'timestamp' => null,
        'chat_pic' => null,
        'chat_pic_full' => null,
        'pin' => null,
        'mute' => null,
        'mute_until' => null,
        'archive' => null,
        'unread' => null,
        'unread_mention' => null,
        'read_only' => null,
        'not_spam' => null,
        'last_message' => null,
        'labels' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'type' => false,
        'timestamp' => false,
        'chat_pic' => false,
        'chat_pic_full' => false,
        'pin' => false,
        'mute' => false,
        'mute_until' => false,
        'archive' => false,
        'unread' => false,
        'unread_mention' => false,
        'read_only' => false,
        'not_spam' => false,
        'last_message' => false,
        'labels' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'type' => 'type',
        'timestamp' => 'timestamp',
        'chat_pic' => 'chat_pic',
        'chat_pic_full' => 'chat_pic_full',
        'pin' => 'pin',
        'mute' => 'mute',
        'mute_until' => 'mute_until',
        'archive' => 'archive',
        'unread' => 'unread',
        'unread_mention' => 'unread_mention',
        'read_only' => 'read_only',
        'not_spam' => 'not_spam',
        'last_message' => 'last_message',
        'labels' => 'labels',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'type' => 'setType',
        'timestamp' => 'setTimestamp',
        'chat_pic' => 'setChatPic',
        'chat_pic_full' => 'setChatPicFull',
        'pin' => 'setPin',
        'mute' => 'setMute',
        'mute_until' => 'setMuteUntil',
        'archive' => 'setArchive',
        'unread' => 'setUnread',
        'unread_mention' => 'setUnreadMention',
        'read_only' => 'setReadOnly',
        'not_spam' => 'setNotSpam',
        'last_message' => 'setLastMessage',
        'labels' => 'setLabels',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'type' => 'getType',
        'timestamp' => 'getTimestamp',
        'chat_pic' => 'getChatPic',
        'chat_pic_full' => 'getChatPicFull',
        'pin' => 'getPin',
        'mute' => 'getMute',
        'mute_until' => 'getMuteUntil',
        'archive' => 'getArchive',
        'unread' => 'getUnread',
        'unread_mention' => 'getUnreadMention',
        'read_only' => 'getReadOnly',
        'not_spam' => 'getNotSpam',
        'last_message' => 'getLastMessage',
        'labels' => 'getLabels',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_GROUP = 'group';
    public const TYPE_CONTACT = 'contact';
    public const TYPE_BROADCAST = 'broadcast';
    public const TYPE_NEWSLETTER = 'newsletter';
    public const TYPE_UNKNOWN = 'unknown';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_GROUP,
            self::TYPE_CONTACT,
            self::TYPE_BROADCAST,
            self::TYPE_NEWSLETTER,
            self::TYPE_UNKNOWN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('chat_pic', $data ?? [], null);
        $this->setIfExists('chat_pic_full', $data ?? [], null);
        $this->setIfExists('pin', $data ?? [], null);
        $this->setIfExists('mute', $data ?? [], null);
        $this->setIfExists('mute_until', $data ?? [], null);
        $this->setIfExists('archive', $data ?? [], null);
        $this->setIfExists('unread', $data ?? [], null);
        $this->setIfExists('unread_mention', $data ?? [], null);
        $this->setIfExists('read_only', $data ?? [], null);
        $this->setIfExists('not_spam', $data ?? [], null);
        $this->setIfExists('last_message', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!preg_match("/^[\\d-]{10,31}@[\\w\\.]{1,}$/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^[\\d-]{10,31}@[\\w\\.]{1,}$/.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues),
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Chat ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        if ((!preg_match("/^[\\d-]{10,31}@[\\w\\.]{1,}$/", ObjectSerializer::toString($id)))) {
            throw new \InvalidArgumentException("invalid value for \$id when calling Chat., must conform to the pattern /^[\\d-]{10,31}@[\\w\\.]{1,}$/.");
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Chat name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Chat type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues),
                ),
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return int|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param int|null $timestamp Chat timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets chat_pic
     *
     * @return string|null
     */
    public function getChatPic()
    {
        return $this->container['chat_pic'];
    }

    /**
     * Sets chat_pic
     *
     * @param string|null $chat_pic Chat picture URL
     *
     * @return self
     */
    public function setChatPic($chat_pic)
    {
        if (is_null($chat_pic)) {
            throw new \InvalidArgumentException('non-nullable chat_pic cannot be null');
        }
        $this->container['chat_pic'] = $chat_pic;

        return $this;
    }

    /**
     * Gets chat_pic_full
     *
     * @return string|null
     */
    public function getChatPicFull()
    {
        return $this->container['chat_pic_full'];
    }

    /**
     * Sets chat_pic_full
     *
     * @param string|null $chat_pic_full Chat full picture URL
     *
     * @return self
     */
    public function setChatPicFull($chat_pic_full)
    {
        if (is_null($chat_pic_full)) {
            throw new \InvalidArgumentException('non-nullable chat_pic_full cannot be null');
        }
        $this->container['chat_pic_full'] = $chat_pic_full;

        return $this;
    }

    /**
     * Gets pin
     *
     * @return bool|null
     */
    public function getPin()
    {
        return $this->container['pin'];
    }

    /**
     * Sets pin
     *
     * @param bool|null $pin Is chat pinned
     *
     * @return self
     */
    public function setPin($pin)
    {
        if (is_null($pin)) {
            throw new \InvalidArgumentException('non-nullable pin cannot be null');
        }
        $this->container['pin'] = $pin;

        return $this;
    }

    /**
     * Gets mute
     *
     * @return bool|null
     */
    public function getMute()
    {
        return $this->container['mute'];
    }

    /**
     * Sets mute
     *
     * @param bool|null $mute Is chat muted
     *
     * @return self
     */
    public function setMute($mute)
    {
        if (is_null($mute)) {
            throw new \InvalidArgumentException('non-nullable mute cannot be null');
        }
        $this->container['mute'] = $mute;

        return $this;
    }

    /**
     * Gets mute_until
     *
     * @return int|null
     */
    public function getMuteUntil()
    {
        return $this->container['mute_until'];
    }

    /**
     * Sets mute_until
     *
     * @param int|null $mute_until Chat mute until
     *
     * @return self
     */
    public function setMuteUntil($mute_until)
    {
        if (is_null($mute_until)) {
            throw new \InvalidArgumentException('non-nullable mute_until cannot be null');
        }
        $this->container['mute_until'] = $mute_until;

        return $this;
    }

    /**
     * Gets archive
     *
     * @return bool|null
     */
    public function getArchive()
    {
        return $this->container['archive'];
    }

    /**
     * Sets archive
     *
     * @param bool|null $archive Is chat archived
     *
     * @return self
     */
    public function setArchive($archive)
    {
        if (is_null($archive)) {
            throw new \InvalidArgumentException('non-nullable archive cannot be null');
        }
        $this->container['archive'] = $archive;

        return $this;
    }

    /**
     * Gets unread
     *
     * @return int|null
     */
    public function getUnread()
    {
        return $this->container['unread'];
    }

    /**
     * Sets unread
     *
     * @param int|null $unread Unread messages count
     *
     * @return self
     */
    public function setUnread($unread)
    {
        if (is_null($unread)) {
            throw new \InvalidArgumentException('non-nullable unread cannot be null');
        }
        $this->container['unread'] = $unread;

        return $this;
    }

    /**
     * Gets unread_mention
     *
     * @return bool|null
     */
    public function getUnreadMention()
    {
        return $this->container['unread_mention'];
    }

    /**
     * Sets unread_mention
     *
     * @param bool|null $unread_mention Is chat unread mention
     *
     * @return self
     */
    public function setUnreadMention($unread_mention)
    {
        if (is_null($unread_mention)) {
            throw new \InvalidArgumentException('non-nullable unread_mention cannot be null');
        }
        $this->container['unread_mention'] = $unread_mention;

        return $this;
    }

    /**
     * Gets read_only
     *
     * @return bool|null
     */
    public function getReadOnly()
    {
        return $this->container['read_only'];
    }

    /**
     * Sets read_only
     *
     * @param bool|null $read_only Is chat read only
     *
     * @return self
     */
    public function setReadOnly($read_only)
    {
        if (is_null($read_only)) {
            throw new \InvalidArgumentException('non-nullable read_only cannot be null');
        }
        $this->container['read_only'] = $read_only;

        return $this;
    }

    /**
     * Gets not_spam
     *
     * @return bool|null
     */
    public function getNotSpam()
    {
        return $this->container['not_spam'];
    }

    /**
     * Sets not_spam
     *
     * @param bool|null $not_spam Is chat not spam
     *
     * @return self
     */
    public function setNotSpam($not_spam)
    {
        if (is_null($not_spam)) {
            throw new \InvalidArgumentException('non-nullable not_spam cannot be null');
        }
        $this->container['not_spam'] = $not_spam;

        return $this;
    }

    /**
     * Gets last_message
     *
     * @return \Purelines\WhapiSdk\Model\Message|null
     */
    public function getLastMessage()
    {
        return $this->container['last_message'];
    }

    /**
     * Sets last_message
     *
     * @param \Purelines\WhapiSdk\Model\Message|null $last_message last_message
     *
     * @return self
     */
    public function setLastMessage($last_message)
    {
        if (is_null($last_message)) {
            throw new \InvalidArgumentException('non-nullable last_message cannot be null');
        }
        $this->container['last_message'] = $last_message;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \Purelines\WhapiSdk\Model\Label[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \Purelines\WhapiSdk\Model\Label[]|null $labels Labels associated with chat
     *
     * @return self
     */
    public function setLabels($labels)
    {
        if (is_null($labels)) {
            throw new \InvalidArgumentException('non-nullable labels cannot be null');
        }
        $this->container['labels'] = $labels;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT,
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


