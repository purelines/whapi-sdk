<?php

/**
 * SenderMedia
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Whapi API
 *
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Purelines\WhapiSdk\Model;

use \ArrayAccess;
use \Purelines\WhapiSdk\ObjectSerializer;

/**
 * SenderMedia Class Doc Comment
 *
 * @category Class
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SenderMedia implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SenderMedia';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'to' => 'string',
        'quoted' => 'string',
        'edit' => 'string',
        'width' => 'int',
        'height' => 'int',
        'mentions' => 'string[]',
        'view_once' => 'bool',
        'caption' => 'string',
        'preview' => 'string',
        'autoplay' => 'bool',
        'animated' => 'bool',
        'filename' => 'string',
        'seconds' => 'int',
        'recording_time' => 'float',
        'waveform' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'to' => null,
        'quoted' => null,
        'edit' => null,
        'width' => 'int32',
        'height' => 'int32',
        'mentions' => null,
        'view_once' => null,
        'caption' => null,
        'preview' => null,
        'autoplay' => null,
        'animated' => null,
        'filename' => null,
        'seconds' => 'int32',
        'recording_time' => null,
        'waveform' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'to' => false,
        'quoted' => false,
        'edit' => false,
        'width' => false,
        'height' => false,
        'mentions' => false,
        'view_once' => false,
        'caption' => false,
        'preview' => false,
        'autoplay' => false,
        'animated' => false,
        'filename' => false,
        'seconds' => false,
        'recording_time' => false,
        'waveform' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'to' => 'to',
        'quoted' => 'quoted',
        'edit' => 'edit',
        'width' => 'width',
        'height' => 'height',
        'mentions' => 'mentions',
        'view_once' => 'view_once',
        'caption' => 'caption',
        'preview' => 'preview',
        'autoplay' => 'autoplay',
        'animated' => 'animated',
        'filename' => 'filename',
        'seconds' => 'seconds',
        'recording_time' => 'recording_time',
        'waveform' => 'waveform',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'to' => 'setTo',
        'quoted' => 'setQuoted',
        'edit' => 'setEdit',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'mentions' => 'setMentions',
        'view_once' => 'setViewOnce',
        'caption' => 'setCaption',
        'preview' => 'setPreview',
        'autoplay' => 'setAutoplay',
        'animated' => 'setAnimated',
        'filename' => 'setFilename',
        'seconds' => 'setSeconds',
        'recording_time' => 'setRecordingTime',
        'waveform' => 'setWaveform',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'to' => 'getTo',
        'quoted' => 'getQuoted',
        'edit' => 'getEdit',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'mentions' => 'getMentions',
        'view_once' => 'getViewOnce',
        'caption' => 'getCaption',
        'preview' => 'getPreview',
        'autoplay' => 'getAutoplay',
        'animated' => 'getAnimated',
        'filename' => 'getFilename',
        'seconds' => 'getSeconds',
        'recording_time' => 'getRecordingTime',
        'waveform' => 'getWaveform',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('quoted', $data ?? [], null);
        $this->setIfExists('edit', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('mentions', $data ?? [], null);
        $this->setIfExists('view_once', $data ?? [], null);
        $this->setIfExists('caption', $data ?? [], null);
        $this->setIfExists('preview', $data ?? [], null);
        $this->setIfExists('autoplay', $data ?? [], null);
        $this->setIfExists('animated', $data ?? [], null);
        $this->setIfExists('filename', $data ?? [], null);
        $this->setIfExists('seconds', $data ?? [], null);
        $this->setIfExists('recording_time', $data ?? [], 0);
        $this->setIfExists('waveform', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['to'] === null) {
            $invalidProperties[] = "'to' can't be null";
        }
        if (!preg_match("/^[\\d-]{9,31}(@[\\w\\.]{1,})?$/", $this->container['to'])) {
            $invalidProperties[] = "invalid value for 'to', must be conform to the pattern /^[\\d-]{9,31}(@[\\w\\.]{1,})?$/.";
        }

        if (!is_null($this->container['quoted']) && !preg_match("/^[A-Za-z0-9._]{4,30}-[A-Za-z0-9._]{4,14}(-[A-Za-z0-9._]{4,10})?(-[A-Za-z0-9._]{2,10})?$/", $this->container['quoted'])) {
            $invalidProperties[] = "invalid value for 'quoted', must be conform to the pattern /^[A-Za-z0-9._]{4,30}-[A-Za-z0-9._]{4,14}(-[A-Za-z0-9._]{4,10})?(-[A-Za-z0-9._]{2,10})?$/.";
        }

        if (!is_null($this->container['edit']) && !preg_match("/^[A-Za-z0-9._]{4,30}-[A-Za-z0-9._]{4,14}(-[A-Za-z0-9._]{4,10})?(-[A-Za-z0-9._]{2,10})?$/", $this->container['edit'])) {
            $invalidProperties[] = "invalid value for 'edit', must be conform to the pattern /^[A-Za-z0-9._]{4,30}-[A-Za-z0-9._]{4,14}(-[A-Za-z0-9._]{4,10})?(-[A-Za-z0-9._]{2,10})?$/.";
        }

        if (!is_null($this->container['recording_time']) && ($this->container['recording_time'] < 0)) {
            $invalidProperties[] = "invalid value for 'recording_time', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets to
     *
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string $to Use the phone number or [Chat ID](https://support.whapi.cloud/help-desk/faq/chat-id.-what-is-it-and-how-to-get-it) of the contact/group/channel to which you want to send the message. Use [Get groups](https://whapi.readme.io/reference/getgroups) to get the group ID.
     *
     * @return self
     */
    public function setTo($to)
    {
        if (is_null($to)) {
            throw new \InvalidArgumentException('non-nullable to cannot be null');
        }

        if ((!preg_match("/^[\\d-]{9,31}(@[\\w\\.]{1,})?$/", ObjectSerializer::toString($to)))) {
            throw new \InvalidArgumentException("invalid value for \$to when calling SenderMedia., must conform to the pattern /^[\\d-]{9,31}(@[\\w\\.]{1,})?$/.");
        }

        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets quoted
     *
     * @return string|null
     */
    public function getQuoted()
    {
        return $this->container['quoted'];
    }

    /**
     * Sets quoted
     *
     * @param string|null $quoted Message ID of the message to be quoted
     *
     * @return self
     */
    public function setQuoted($quoted)
    {
        if (is_null($quoted)) {
            throw new \InvalidArgumentException('non-nullable quoted cannot be null');
        }

        if ((!preg_match("/^[A-Za-z0-9._]{4,30}-[A-Za-z0-9._]{4,14}(-[A-Za-z0-9._]{4,10})?(-[A-Za-z0-9._]{2,10})?$/", ObjectSerializer::toString($quoted)))) {
            throw new \InvalidArgumentException("invalid value for \$quoted when calling SenderMedia., must conform to the pattern /^[A-Za-z0-9._]{4,30}-[A-Za-z0-9._]{4,14}(-[A-Za-z0-9._]{4,10})?(-[A-Za-z0-9._]{2,10})?$/.");
        }

        $this->container['quoted'] = $quoted;

        return $this;
    }

    /**
     * Gets edit
     *
     * @return string|null
     */
    public function getEdit()
    {
        return $this->container['edit'];
    }

    /**
     * Sets edit
     *
     * @param string|null $edit Message ID of the message to be edited
     *
     * @return self
     */
    public function setEdit($edit)
    {
        if (is_null($edit)) {
            throw new \InvalidArgumentException('non-nullable edit cannot be null');
        }

        if ((!preg_match("/^[A-Za-z0-9._]{4,30}-[A-Za-z0-9._]{4,14}(-[A-Za-z0-9._]{4,10})?(-[A-Za-z0-9._]{2,10})?$/", ObjectSerializer::toString($edit)))) {
            throw new \InvalidArgumentException("invalid value for \$edit when calling SenderMedia., must conform to the pattern /^[A-Za-z0-9._]{4,30}-[A-Za-z0-9._]{4,14}(-[A-Za-z0-9._]{4,10})?(-[A-Za-z0-9._]{2,10})?$/.");
        }

        $this->container['edit'] = $edit;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int|null $width Width of the media in pixels
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            throw new \InvalidArgumentException('non-nullable width cannot be null');
        }
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int|null $height Height of the media in pixels
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            throw new \InvalidArgumentException('non-nullable height cannot be null');
        }
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets mentions
     *
     * @return string[]|null
     */
    public function getMentions()
    {
        return $this->container['mentions'];
    }

    /**
     * Sets mentions
     *
     * @param string[]|null $mentions The numbers of the mentioned users
     *
     * @return self
     */
    public function setMentions($mentions)
    {
        if (is_null($mentions)) {
            throw new \InvalidArgumentException('non-nullable mentions cannot be null');
        }
        $this->container['mentions'] = $mentions;

        return $this;
    }

    /**
     * Gets view_once
     *
     * @return bool|null
     */
    public function getViewOnce()
    {
        return $this->container['view_once'];
    }

    /**
     * Sets view_once
     *
     * @param bool|null $view_once Is view once
     *
     * @return self
     */
    public function setViewOnce($view_once)
    {
        if (is_null($view_once)) {
            throw new \InvalidArgumentException('non-nullable view_once cannot be null');
        }
        $this->container['view_once'] = $view_once;

        return $this;
    }

    /**
     * Gets caption
     *
     * @return string|null
     */
    public function getCaption()
    {
        return $this->container['caption'];
    }

    /**
     * Sets caption
     *
     * @param string|null $caption Optional. Text caption under the document.
     *
     * @return self
     */
    public function setCaption($caption)
    {
        if (is_null($caption)) {
            throw new \InvalidArgumentException('non-nullable caption cannot be null');
        }
        $this->container['caption'] = $caption;

        return $this;
    }

    /**
     * Gets preview
     *
     * @return string|null
     */
    public function getPreview()
    {
        return $this->container['preview'];
    }

    /**
     * Sets preview
     *
     * @param string|null $preview Optional. Base64 encoded preview of the media. In JPEG format.
     *
     * @return self
     */
    public function setPreview($preview)
    {
        if (is_null($preview)) {
            throw new \InvalidArgumentException('non-nullable preview cannot be null');
        }
        $this->container['preview'] = $preview;

        return $this;
    }

    /**
     * Gets autoplay
     *
     * @return bool|null
     */
    public function getAutoplay()
    {
        return $this->container['autoplay'];
    }

    /**
     * Sets autoplay
     *
     * @param bool|null $autoplay Optional. This field indicates whether the GIF should be played automatically when the message is received.
     *
     * @return self
     */
    public function setAutoplay($autoplay)
    {
        if (is_null($autoplay)) {
            throw new \InvalidArgumentException('non-nullable autoplay cannot be null');
        }
        $this->container['autoplay'] = $autoplay;

        return $this;
    }

    /**
     * Gets animated
     *
     * @return bool|null
     */
    public function getAnimated()
    {
        return $this->container['animated'];
    }

    /**
     * Sets animated
     *
     * @param bool|null $animated Optional. For stickers, this field indicates whether the sticker is animated.
     *
     * @return self
     */
    public function setAnimated($animated)
    {
        if (is_null($animated)) {
            throw new \InvalidArgumentException('non-nullable animated cannot be null');
        }
        $this->container['animated'] = $animated;

        return $this;
    }

    /**
     * Gets filename
     *
     * @return string|null
     */
    public function getFilename()
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     *
     * @param string|null $filename Optional. File name
     *
     * @return self
     */
    public function setFilename($filename)
    {
        if (is_null($filename)) {
            throw new \InvalidArgumentException('non-nullable filename cannot be null');
        }
        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets seconds
     *
     * @return int|null
     */
    public function getSeconds()
    {
        return $this->container['seconds'];
    }

    /**
     * Sets seconds
     *
     * @param int|null $seconds Optional. For audio files, this field indicates the duration of the audio file in seconds.
     *
     * @return self
     */
    public function setSeconds($seconds)
    {
        if (is_null($seconds)) {
            throw new \InvalidArgumentException('non-nullable seconds cannot be null');
        }
        $this->container['seconds'] = $seconds;

        return $this;
    }

    /**
     * Gets recording_time
     *
     * @return float|null
     */
    public function getRecordingTime()
    {
        return $this->container['recording_time'];
    }

    /**
     * Sets recording_time
     *
     * @param float|null $recording_time Time in seconds to simulate recording voice
     *
     * @return self
     */
    public function setRecordingTime($recording_time)
    {
        if (is_null($recording_time)) {
            throw new \InvalidArgumentException('non-nullable recording_time cannot be null');
        }

        if (($recording_time < 0)) {
            throw new \InvalidArgumentException('invalid value for $recording_time when calling SenderMedia., must be bigger than or equal to 0.');
        }

        $this->container['recording_time'] = $recording_time;

        return $this;
    }

    /**
     * Gets waveform
     *
     * @return string|null
     */
    public function getWaveform()
    {
        return $this->container['waveform'];
    }

    /**
     * Sets waveform
     *
     * @param string|null $waveform Voice message waveform
     *
     * @return self
     */
    public function setWaveform($waveform)
    {
        if (is_null($waveform)) {
            throw new \InvalidArgumentException('non-nullable waveform cannot be null');
        }
        $this->container['waveform'] = $waveform;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT,
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


