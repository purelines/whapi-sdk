<?php

/**
 * CreateEventRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Whapi API
 *
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Purelines\WhapiSdk\Model;

use \ArrayAccess;
use \Purelines\WhapiSdk\ObjectSerializer;

/**
 * CreateEventRequest Class Doc Comment
 *
 * @category Class
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateEventRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateEventRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'view_once' => 'bool',
        'to' => 'string',
        'title' => 'string',
        'description' => 'string',
        'start_time' => 'float',
        'end_time' => 'float',
        'degrees_latitude' => 'float',
        'degrees_longitude' => 'float',
        'location_name' => 'string',
        'location_address' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'view_once' => null,
        'to' => null,
        'title' => null,
        'description' => null,
        'start_time' => null,
        'end_time' => null,
        'degrees_latitude' => 'double',
        'degrees_longitude' => 'double',
        'location_name' => null,
        'location_address' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'view_once' => false,
        'to' => false,
        'title' => false,
        'description' => false,
        'start_time' => false,
        'end_time' => false,
        'degrees_latitude' => false,
        'degrees_longitude' => false,
        'location_name' => false,
        'location_address' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'view_once' => 'view_once',
        'to' => 'to',
        'title' => 'title',
        'description' => 'description',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'degrees_latitude' => 'degreesLatitude',
        'degrees_longitude' => 'degreesLongitude',
        'location_name' => 'locationName',
        'location_address' => 'locationAddress',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'view_once' => 'setViewOnce',
        'to' => 'setTo',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'start_time' => 'setStartTime',
        'end_time' => 'setEndTime',
        'degrees_latitude' => 'setDegreesLatitude',
        'degrees_longitude' => 'setDegreesLongitude',
        'location_name' => 'setLocationName',
        'location_address' => 'setLocationAddress',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'view_once' => 'getViewOnce',
        'to' => 'getTo',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'start_time' => 'getStartTime',
        'end_time' => 'getEndTime',
        'degrees_latitude' => 'getDegreesLatitude',
        'degrees_longitude' => 'getDegreesLongitude',
        'location_name' => 'getLocationName',
        'location_address' => 'getLocationAddress',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('view_once', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('start_time', $data ?? [], null);
        $this->setIfExists('end_time', $data ?? [], null);
        $this->setIfExists('degrees_latitude', $data ?? [], null);
        $this->setIfExists('degrees_longitude', $data ?? [], null);
        $this->setIfExists('location_name', $data ?? [], null);
        $this->setIfExists('location_address', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['to'] === null) {
            $invalidProperties[] = "'to' can't be null";
        }
        if (!preg_match("/^[\\d-]{10,31}(@[\\w\\.]{1,})?$/", $this->container['to'])) {
            $invalidProperties[] = "invalid value for 'to', must be conform to the pattern /^[\\d-]{10,31}(@[\\w\\.]{1,})?$/.";
        }

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['start_time'] === null) {
            $invalidProperties[] = "'start_time' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets view_once
     *
     * @return bool|null
     */
    public function getViewOnce()
    {
        return $this->container['view_once'];
    }

    /**
     * Sets view_once
     *
     * @param bool|null $view_once Is view once
     *
     * @return self
     */
    public function setViewOnce($view_once)
    {
        if (is_null($view_once)) {
            throw new \InvalidArgumentException('non-nullable view_once cannot be null');
        }
        $this->container['view_once'] = $view_once;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string $to Use [Get communities](https://gate.whapi.cloud/communities) to get the community ID.
     *
     * @return self
     */
    public function setTo($to)
    {
        if (is_null($to)) {
            throw new \InvalidArgumentException('non-nullable to cannot be null');
        }

        if ((!preg_match("/^[\\d-]{10,31}(@[\\w\\.]{1,})?$/", ObjectSerializer::toString($to)))) {
            throw new \InvalidArgumentException("invalid value for \$to when calling CreateEventRequest., must conform to the pattern /^[\\d-]{10,31}(@[\\w\\.]{1,})?$/.");
        }

        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Event name.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Event description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return float
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param float $start_time Start time (format timestamp)
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        if (is_null($start_time)) {
            throw new \InvalidArgumentException('non-nullable start_time cannot be null');
        }
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return float|null
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param float|null $end_time End time (format timestamp)
     *
     * @return self
     */
    public function setEndTime($end_time)
    {
        if (is_null($end_time)) {
            throw new \InvalidArgumentException('non-nullable end_time cannot be null');
        }
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets degrees_latitude
     *
     * @return float|null
     */
    public function getDegreesLatitude()
    {
        return $this->container['degrees_latitude'];
    }

    /**
     * Sets degrees_latitude
     *
     * @param float|null $degrees_latitude degrees_latitude
     *
     * @return self
     */
    public function setDegreesLatitude($degrees_latitude)
    {
        if (is_null($degrees_latitude)) {
            throw new \InvalidArgumentException('non-nullable degrees_latitude cannot be null');
        }
        $this->container['degrees_latitude'] = $degrees_latitude;

        return $this;
    }

    /**
     * Gets degrees_longitude
     *
     * @return float|null
     */
    public function getDegreesLongitude()
    {
        return $this->container['degrees_longitude'];
    }

    /**
     * Sets degrees_longitude
     *
     * @param float|null $degrees_longitude degrees_longitude
     *
     * @return self
     */
    public function setDegreesLongitude($degrees_longitude)
    {
        if (is_null($degrees_longitude)) {
            throw new \InvalidArgumentException('non-nullable degrees_longitude cannot be null');
        }
        $this->container['degrees_longitude'] = $degrees_longitude;

        return $this;
    }

    /**
     * Gets location_name
     *
     * @return string|null
     */
    public function getLocationName()
    {
        return $this->container['location_name'];
    }

    /**
     * Sets location_name
     *
     * @param string|null $location_name location_name
     *
     * @return self
     */
    public function setLocationName($location_name)
    {
        if (is_null($location_name)) {
            throw new \InvalidArgumentException('non-nullable location_name cannot be null');
        }
        $this->container['location_name'] = $location_name;

        return $this;
    }

    /**
     * Gets location_address
     *
     * @return string|null
     */
    public function getLocationAddress()
    {
        return $this->container['location_address'];
    }

    /**
     * Sets location_address
     *
     * @param string|null $location_address location_address
     *
     * @return self
     */
    public function setLocationAddress($location_address)
    {
        if (is_null($location_address)) {
            throw new \InvalidArgumentException('non-nullable location_address cannot be null');
        }
        $this->container['location_address'] = $location_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT,
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


