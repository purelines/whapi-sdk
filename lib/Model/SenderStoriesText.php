<?php

/**
 * SenderStoriesText
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Whapi API
 *
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Purelines\WhapiSdk\Model;

use \ArrayAccess;
use \Purelines\WhapiSdk\ObjectSerializer;

/**
 * SenderStoriesText Class Doc Comment
 *
 * @category Class
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SenderStoriesText implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SenderStoriesText';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'contacts' => 'string[]',
        'exclude_contacts' => 'string[]',
        'caption' => 'string',
        'background_color' => 'string',
        'caption_color' => 'string',
        'font_type' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'contacts' => null,
        'exclude_contacts' => null,
        'caption' => null,
        'background_color' => null,
        'caption_color' => null,
        'font_type' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'contacts' => false,
        'exclude_contacts' => false,
        'caption' => false,
        'background_color' => false,
        'caption_color' => false,
        'font_type' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contacts' => 'contacts',
        'exclude_contacts' => 'exclude_contacts',
        'caption' => 'caption',
        'background_color' => 'background_color',
        'caption_color' => 'caption_color',
        'font_type' => 'font_type',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contacts' => 'setContacts',
        'exclude_contacts' => 'setExcludeContacts',
        'caption' => 'setCaption',
        'background_color' => 'setBackgroundColor',
        'caption_color' => 'setCaptionColor',
        'font_type' => 'setFontType',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contacts' => 'getContacts',
        'exclude_contacts' => 'getExcludeContacts',
        'caption' => 'getCaption',
        'background_color' => 'getBackgroundColor',
        'caption_color' => 'getCaptionColor',
        'font_type' => 'getFontType',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FONT_TYPE_SYSTEM = 'SYSTEM';
    public const FONT_TYPE_SYSTEM_TEXT = 'SYSTEM_TEXT';
    public const FONT_TYPE_FB_SCRIPT = 'FB_SCRIPT';
    public const FONT_TYPE_SYSTEM_BOLD = 'SYSTEM_BOLD';
    public const FONT_TYPE_MORNINGBREEZE_REGULAR = 'MORNINGBREEZE_REGULAR';
    public const FONT_TYPE_CALISTOGA_REGULAR = 'CALISTOGA_REGULAR';
    public const FONT_TYPE_EXO2_EXTRABOLD = 'EXO2_EXTRABOLD';
    public const FONT_TYPE_COURIERPRIME_BOLD = 'COURIERPRIME_BOLD';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFontTypeAllowableValues()
    {
        return [
            self::FONT_TYPE_SYSTEM,
            self::FONT_TYPE_SYSTEM_TEXT,
            self::FONT_TYPE_FB_SCRIPT,
            self::FONT_TYPE_SYSTEM_BOLD,
            self::FONT_TYPE_MORNINGBREEZE_REGULAR,
            self::FONT_TYPE_CALISTOGA_REGULAR,
            self::FONT_TYPE_EXO2_EXTRABOLD,
            self::FONT_TYPE_COURIERPRIME_BOLD,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('contacts', $data ?? [], null);
        $this->setIfExists('exclude_contacts', $data ?? [], null);
        $this->setIfExists('caption', $data ?? [], null);
        $this->setIfExists('background_color', $data ?? [], '#00000000');
        $this->setIfExists('caption_color', $data ?? [], '#FFFFFFFF');
        $this->setIfExists('font_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['caption'] === null) {
            $invalidProperties[] = "'caption' can't be null";
        }
        if (!is_null($this->container['background_color']) && !preg_match("/^#[0-9a-fA-F]{6,8}$/", $this->container['background_color'])) {
            $invalidProperties[] = "invalid value for 'background_color', must be conform to the pattern /^#[0-9a-fA-F]{6,8}$/.";
        }

        if (!is_null($this->container['caption_color']) && !preg_match("/^#[0-9a-fA-F]{6,8}$/", $this->container['caption_color'])) {
            $invalidProperties[] = "invalid value for 'caption_color', must be conform to the pattern /^#[0-9a-fA-F]{6,8}$/.";
        }

        $allowedValues = $this->getFontTypeAllowableValues();
        if (!is_null($this->container['font_type']) && !in_array($this->container['font_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'font_type', must be one of '%s'",
                $this->container['font_type'],
                implode("', '", $allowedValues),
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contacts
     *
     * @return string[]|null
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param string[]|null $contacts List of contacts to send the story to
     *
     * @return self
     */
    public function setContacts($contacts)
    {
        if (is_null($contacts)) {
            throw new \InvalidArgumentException('non-nullable contacts cannot be null');
        }
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets exclude_contacts
     *
     * @return string[]|null
     */
    public function getExcludeContacts()
    {
        return $this->container['exclude_contacts'];
    }

    /**
     * Sets exclude_contacts
     *
     * @param string[]|null $exclude_contacts List of contacts to exclude
     *
     * @return self
     */
    public function setExcludeContacts($exclude_contacts)
    {
        if (is_null($exclude_contacts)) {
            throw new \InvalidArgumentException('non-nullable exclude_contacts cannot be null');
        }
        $this->container['exclude_contacts'] = $exclude_contacts;

        return $this;
    }

    /**
     * Gets caption
     *
     * @return string
     */
    public function getCaption()
    {
        return $this->container['caption'];
    }

    /**
     * Sets caption
     *
     * @param string $caption Optional. Text caption under the media.
     *
     * @return self
     */
    public function setCaption($caption)
    {
        if (is_null($caption)) {
            throw new \InvalidArgumentException('non-nullable caption cannot be null');
        }
        $this->container['caption'] = $caption;

        return $this;
    }

    /**
     * Gets background_color
     *
     * @return string|null
     */
    public function getBackgroundColor()
    {
        return $this->container['background_color'];
    }

    /**
     * Sets background_color
     *
     * @param string|null $background_color Background color of the story (ARGB)
     *
     * @return self
     */
    public function setBackgroundColor($background_color)
    {
        if (is_null($background_color)) {
            throw new \InvalidArgumentException('non-nullable background_color cannot be null');
        }

        if ((!preg_match("/^#[0-9a-fA-F]{6,8}$/", ObjectSerializer::toString($background_color)))) {
            throw new \InvalidArgumentException("invalid value for \$background_color when calling SenderStoriesText., must conform to the pattern /^#[0-9a-fA-F]{6,8}$/.");
        }

        $this->container['background_color'] = $background_color;

        return $this;
    }

    /**
     * Gets caption_color
     *
     * @return string|null
     */
    public function getCaptionColor()
    {
        return $this->container['caption_color'];
    }

    /**
     * Sets caption_color
     *
     * @param string|null $caption_color Caption color of the story (ARGB)
     *
     * @return self
     */
    public function setCaptionColor($caption_color)
    {
        if (is_null($caption_color)) {
            throw new \InvalidArgumentException('non-nullable caption_color cannot be null');
        }

        if ((!preg_match("/^#[0-9a-fA-F]{6,8}$/", ObjectSerializer::toString($caption_color)))) {
            throw new \InvalidArgumentException("invalid value for \$caption_color when calling SenderStoriesText., must conform to the pattern /^#[0-9a-fA-F]{6,8}$/.");
        }

        $this->container['caption_color'] = $caption_color;

        return $this;
    }

    /**
     * Gets font_type
     *
     * @return string|null
     */
    public function getFontType()
    {
        return $this->container['font_type'];
    }

    /**
     * Sets font_type
     *
     * @param string|null $font_type Font style of the story
     *
     * @return self
     */
    public function setFontType($font_type)
    {
        if (is_null($font_type)) {
            throw new \InvalidArgumentException('non-nullable font_type cannot be null');
        }
        $allowedValues = $this->getFontTypeAllowableValues();
        if (!in_array($font_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'font_type', must be one of '%s'",
                    $font_type,
                    implode("', '", $allowedValues),
                ),
            );
        }
        $this->container['font_type'] = $font_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT,
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


