<?php

/**
 * MessageContextAD
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Whapi API
 *
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Purelines\WhapiSdk\Model;

use \ArrayAccess;
use \Purelines\WhapiSdk\ObjectSerializer;

/**
 * MessageContextAD Class Doc Comment
 *
 * @category Class
 * @description Advertisement message from META-business
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MessageContextAD implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MessageContextAD';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'advertiser_name' => 'string',
        'media_type' => '\Purelines\WhapiSdk\Model\MediaMessageType',
        'preview' => 'string',
        'preview_url' => 'string',
        'title' => 'string',
        'body' => 'string',
        'media_url' => 'string',
        'source' => '\Purelines\WhapiSdk\Model\MessageContextADSource',
        'auto_reply' => 'bool',
        'attrib' => 'bool',
        'ctwa' => 'string',
        'ref' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'advertiser_name' => null,
        'media_type' => null,
        'preview' => null,
        'preview_url' => null,
        'title' => null,
        'body' => null,
        'media_url' => null,
        'source' => null,
        'auto_reply' => null,
        'attrib' => null,
        'ctwa' => null,
        'ref' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'advertiser_name' => false,
        'media_type' => false,
        'preview' => false,
        'preview_url' => false,
        'title' => false,
        'body' => false,
        'media_url' => false,
        'source' => false,
        'auto_reply' => false,
        'attrib' => false,
        'ctwa' => false,
        'ref' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'advertiser_name' => 'advertiser_name',
        'media_type' => 'media_type',
        'preview' => 'preview',
        'preview_url' => 'preview_url',
        'title' => 'title',
        'body' => 'body',
        'media_url' => 'media_url',
        'source' => 'source',
        'auto_reply' => 'auto_reply',
        'attrib' => 'attrib',
        'ctwa' => 'ctwa',
        'ref' => 'ref',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'advertiser_name' => 'setAdvertiserName',
        'media_type' => 'setMediaType',
        'preview' => 'setPreview',
        'preview_url' => 'setPreviewUrl',
        'title' => 'setTitle',
        'body' => 'setBody',
        'media_url' => 'setMediaUrl',
        'source' => 'setSource',
        'auto_reply' => 'setAutoReply',
        'attrib' => 'setAttrib',
        'ctwa' => 'setCtwa',
        'ref' => 'setRef',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'advertiser_name' => 'getAdvertiserName',
        'media_type' => 'getMediaType',
        'preview' => 'getPreview',
        'preview_url' => 'getPreviewUrl',
        'title' => 'getTitle',
        'body' => 'getBody',
        'media_url' => 'getMediaUrl',
        'source' => 'getSource',
        'auto_reply' => 'getAutoReply',
        'attrib' => 'getAttrib',
        'ctwa' => 'getCtwa',
        'ref' => 'getRef',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('advertiser_name', $data ?? [], null);
        $this->setIfExists('media_type', $data ?? [], null);
        $this->setIfExists('preview', $data ?? [], null);
        $this->setIfExists('preview_url', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('body', $data ?? [], null);
        $this->setIfExists('media_url', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('auto_reply', $data ?? [], null);
        $this->setIfExists('attrib', $data ?? [], null);
        $this->setIfExists('ctwa', $data ?? [], null);
        $this->setIfExists('ref', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets advertiser_name
     *
     * @return string|null
     */
    public function getAdvertiserName()
    {
        return $this->container['advertiser_name'];
    }

    /**
     * Sets advertiser_name
     *
     * @param string|null $advertiser_name Name of the advertiser
     *
     * @return self
     */
    public function setAdvertiserName($advertiser_name)
    {
        if (is_null($advertiser_name)) {
            throw new \InvalidArgumentException('non-nullable advertiser_name cannot be null');
        }
        $this->container['advertiser_name'] = $advertiser_name;

        return $this;
    }

    /**
     * Gets media_type
     *
     * @return \Purelines\WhapiSdk\Model\MediaMessageType|null
     */
    public function getMediaType()
    {
        return $this->container['media_type'];
    }

    /**
     * Sets media_type
     *
     * @param \Purelines\WhapiSdk\Model\MediaMessageType|null $media_type media_type
     *
     * @return self
     */
    public function setMediaType($media_type)
    {
        if (is_null($media_type)) {
            throw new \InvalidArgumentException('non-nullable media_type cannot be null');
        }
        $this->container['media_type'] = $media_type;

        return $this;
    }

    /**
     * Gets preview
     *
     * @return string|null
     */
    public function getPreview()
    {
        return $this->container['preview'];
    }

    /**
     * Sets preview
     *
     * @param string|null $preview Base64 encoded preview. In JPEG format.
     *
     * @return self
     */
    public function setPreview($preview)
    {
        if (is_null($preview)) {
            throw new \InvalidArgumentException('non-nullable preview cannot be null');
        }
        $this->container['preview'] = $preview;

        return $this;
    }

    /**
     * Gets preview_url
     *
     * @return string|null
     */
    public function getPreviewUrl()
    {
        return $this->container['preview_url'];
    }

    /**
     * Sets preview_url
     *
     * @param string|null $preview_url URL of the preview
     *
     * @return self
     */
    public function setPreviewUrl($preview_url)
    {
        if (is_null($preview_url)) {
            throw new \InvalidArgumentException('non-nullable preview_url cannot be null');
        }
        $this->container['preview_url'] = $preview_url;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Title of the advertisement
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string|null
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string|null $body Body of the advertisement
     *
     * @return self
     */
    public function setBody($body)
    {
        if (is_null($body)) {
            throw new \InvalidArgumentException('non-nullable body cannot be null');
        }
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets media_url
     *
     * @return string|null
     */
    public function getMediaUrl()
    {
        return $this->container['media_url'];
    }

    /**
     * Sets media_url
     *
     * @param string|null $media_url URL of the media
     *
     * @return self
     */
    public function setMediaUrl($media_url)
    {
        if (is_null($media_url)) {
            throw new \InvalidArgumentException('non-nullable media_url cannot be null');
        }
        $this->container['media_url'] = $media_url;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \Purelines\WhapiSdk\Model\MessageContextADSource|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \Purelines\WhapiSdk\Model\MessageContextADSource|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets auto_reply
     *
     * @return bool|null
     */
    public function getAutoReply()
    {
        return $this->container['auto_reply'];
    }

    /**
     * Sets auto_reply
     *
     * @param bool|null $auto_reply True if the advertisement contains an auto-reply
     *
     * @return self
     */
    public function setAutoReply($auto_reply)
    {
        if (is_null($auto_reply)) {
            throw new \InvalidArgumentException('non-nullable auto_reply cannot be null');
        }
        $this->container['auto_reply'] = $auto_reply;

        return $this;
    }

    /**
     * Gets attrib
     *
     * @return bool|null
     */
    public function getAttrib()
    {
        return $this->container['attrib'];
    }

    /**
     * Sets attrib
     *
     * @param bool|null $attrib True if the advertisement shows the attributions
     *
     * @return self
     */
    public function setAttrib($attrib)
    {
        if (is_null($attrib)) {
            throw new \InvalidArgumentException('non-nullable attrib cannot be null');
        }
        $this->container['attrib'] = $attrib;

        return $this;
    }

    /**
     * Gets ctwa
     *
     * @return string|null
     */
    public function getCtwa()
    {
        return $this->container['ctwa'];
    }

    /**
     * Sets ctwa
     *
     * @param string|null $ctwa Call to action
     *
     * @return self
     */
    public function setCtwa($ctwa)
    {
        if (is_null($ctwa)) {
            throw new \InvalidArgumentException('non-nullable ctwa cannot be null');
        }
        $this->container['ctwa'] = $ctwa;

        return $this;
    }

    /**
     * Gets ref
     *
     * @return string|null
     */
    public function getRef()
    {
        return $this->container['ref'];
    }

    /**
     * Sets ref
     *
     * @param string|null $ref Reference
     *
     * @return self
     */
    public function setRef($ref)
    {
        if (is_null($ref)) {
            throw new \InvalidArgumentException('non-nullable ref cannot be null');
        }
        $this->container['ref'] = $ref;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT,
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


