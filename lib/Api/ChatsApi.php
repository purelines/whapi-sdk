<?php

/**
 * ChatsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Whapi API
 *
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Purelines\WhapiSdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Purelines\WhapiSdk\ApiException;
use Purelines\WhapiSdk\Configuration;
use Purelines\WhapiSdk\FormDataProcessor;
use Purelines\WhapiSdk\HeaderSelector;
use Purelines\WhapiSdk\ObjectSerializer;

/**
 * ChatsApi Class Doc Comment
 *
 * @category Class
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ChatsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'archiveChat' => [
            'application/json',
        ],
        'deleteChat' => [
            'application/json',
        ],
        'getChat' => [
            'application/json',
        ],
        'getChats' => [
            'application/json',
        ],
        'patchChat' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0,
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation archiveChat
     *
     * 🗄 Archive/Unarchive chat
     *
     * @param  string $chat_id Chat ID (required)
     * @param  \Purelines\WhapiSdk\Model\ArchiveChatRequest|null $archive_chat_request Request body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archiveChat'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function archiveChat($chat_id, $archive_chat_request = null, string $contentType = self::contentTypes['archiveChat'][0])
    {
        list($response) = $this->archiveChatWithHttpInfo($chat_id, $archive_chat_request, $contentType);
        return $response;
    }

    /**
     * Operation archiveChatWithHttpInfo
     *
     * 🗄 Archive/Unarchive chat
     *
     * @param  string $chat_id Chat ID (required)
     * @param  \Purelines\WhapiSdk\Model\ArchiveChatRequest|null $archive_chat_request Request body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archiveChat'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function archiveChatWithHttpInfo($chat_id, $archive_chat_request = null, string $contentType = self::contentTypes['archiveChat'][0])
    {
        $request = $this->archiveChatRequest($chat_id, $archive_chat_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseSuccess',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation archiveChatAsync
     *
     * 🗄 Archive/Unarchive chat
     *
     * @param  string $chat_id Chat ID (required)
     * @param  \Purelines\WhapiSdk\Model\ArchiveChatRequest|null $archive_chat_request Request body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archiveChat'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archiveChatAsync($chat_id, $archive_chat_request = null, string $contentType = self::contentTypes['archiveChat'][0])
    {
        return $this->archiveChatAsyncWithHttpInfo($chat_id, $archive_chat_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation archiveChatAsyncWithHttpInfo
     *
     * 🗄 Archive/Unarchive chat
     *
     * @param  string $chat_id Chat ID (required)
     * @param  \Purelines\WhapiSdk\Model\ArchiveChatRequest|null $archive_chat_request Request body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archiveChat'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archiveChatAsyncWithHttpInfo($chat_id, $archive_chat_request = null, string $contentType = self::contentTypes['archiveChat'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseSuccess';
        $request = $this->archiveChatRequest($chat_id, $archive_chat_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'archiveChat'
     *
     * @param  string $chat_id Chat ID (required)
     * @param  \Purelines\WhapiSdk\Model\ArchiveChatRequest|null $archive_chat_request Request body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archiveChat'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function archiveChatRequest($chat_id, $archive_chat_request = null, string $contentType = self::contentTypes['archiveChat'][0])
    {

        // verify the required parameter 'chat_id' is set
        if ($chat_id === null || (is_array($chat_id) && count($chat_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chat_id when calling archiveChat',
            );
        }
        if (!preg_match("/^[\\d-]{10,31}@[\\w\\.]{1,}$/", $chat_id)) {
            throw new \InvalidArgumentException("invalid value for \"chat_id\" when calling ChatsApi.archiveChat, must conform to the pattern /^[\\d-]{10,31}@[\\w\\.]{1,}$/.");
        }



        $resourcePath = '/chats/{ChatID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($chat_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ChatID' . '}',
                ObjectSerializer::toPathValue($chat_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($archive_chat_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($archive_chat_request));
            } else {
                $httpBody = $archive_chat_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation deleteChat
     *
     * ❌ Delete chat
     *
     * @param  string $chat_id Chat ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteChat'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function deleteChat($chat_id, string $contentType = self::contentTypes['deleteChat'][0])
    {
        list($response) = $this->deleteChatWithHttpInfo($chat_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteChatWithHttpInfo
     *
     * ❌ Delete chat
     *
     * @param  string $chat_id Chat ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteChat'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteChatWithHttpInfo($chat_id, string $contentType = self::contentTypes['deleteChat'][0])
    {
        $request = $this->deleteChatRequest($chat_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseSuccess',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation deleteChatAsync
     *
     * ❌ Delete chat
     *
     * @param  string $chat_id Chat ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteChat'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteChatAsync($chat_id, string $contentType = self::contentTypes['deleteChat'][0])
    {
        return $this->deleteChatAsyncWithHttpInfo($chat_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation deleteChatAsyncWithHttpInfo
     *
     * ❌ Delete chat
     *
     * @param  string $chat_id Chat ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteChat'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteChatAsyncWithHttpInfo($chat_id, string $contentType = self::contentTypes['deleteChat'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseSuccess';
        $request = $this->deleteChatRequest($chat_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'deleteChat'
     *
     * @param  string $chat_id Chat ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteChat'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteChatRequest($chat_id, string $contentType = self::contentTypes['deleteChat'][0])
    {

        // verify the required parameter 'chat_id' is set
        if ($chat_id === null || (is_array($chat_id) && count($chat_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chat_id when calling deleteChat',
            );
        }
        if (!preg_match("/^[\\d-]{10,31}@[\\w\\.]{1,}$/", $chat_id)) {
            throw new \InvalidArgumentException("invalid value for \"chat_id\" when calling ChatsApi.deleteChat, must conform to the pattern /^[\\d-]{10,31}@[\\w\\.]{1,}$/.");
        }


        $resourcePath = '/chats/{ChatID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($chat_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ChatID' . '}',
                ObjectSerializer::toPathValue($chat_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation getChat
     *
     * Get chat
     *
     * @param  string $chat_id Chat ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChat'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\Chat|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function getChat($chat_id, string $contentType = self::contentTypes['getChat'][0])
    {
        list($response) = $this->getChatWithHttpInfo($chat_id, $contentType);
        return $response;
    }

    /**
     * Operation getChatWithHttpInfo
     *
     * Get chat
     *
     * @param  string $chat_id Chat ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChat'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\Chat|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChatWithHttpInfo($chat_id, string $contentType = self::contentTypes['getChat'][0])
    {
        $request = $this->getChatRequest($chat_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\Chat',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\Chat',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\Chat',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation getChatAsync
     *
     * Get chat
     *
     * @param  string $chat_id Chat ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChat'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChatAsync($chat_id, string $contentType = self::contentTypes['getChat'][0])
    {
        return $this->getChatAsyncWithHttpInfo($chat_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation getChatAsyncWithHttpInfo
     *
     * Get chat
     *
     * @param  string $chat_id Chat ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChat'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChatAsyncWithHttpInfo($chat_id, string $contentType = self::contentTypes['getChat'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\Chat';
        $request = $this->getChatRequest($chat_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'getChat'
     *
     * @param  string $chat_id Chat ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChat'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getChatRequest($chat_id, string $contentType = self::contentTypes['getChat'][0])
    {

        // verify the required parameter 'chat_id' is set
        if ($chat_id === null || (is_array($chat_id) && count($chat_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chat_id when calling getChat',
            );
        }
        if (!preg_match("/^[\\d-]{10,31}@[\\w\\.]{1,}$/", $chat_id)) {
            throw new \InvalidArgumentException("invalid value for \"chat_id\" when calling ChatsApi.getChat, must conform to the pattern /^[\\d-]{10,31}@[\\w\\.]{1,}$/.");
        }


        $resourcePath = '/chats/{ChatID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($chat_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ChatID' . '}',
                ObjectSerializer::toPathValue($chat_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation getChats
     *
     * Get chats
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChats'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ChatsList|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function getChats($count = 100, $offset = null, string $contentType = self::contentTypes['getChats'][0])
    {
        list($response) = $this->getChatsWithHttpInfo($count, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getChatsWithHttpInfo
     *
     * Get chats
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChats'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ChatsList|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChatsWithHttpInfo($count = 100, $offset = null, string $contentType = self::contentTypes['getChats'][0])
    {
        $request = $this->getChatsRequest($count, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ChatsList',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ChatsList',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ChatsList',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation getChatsAsync
     *
     * Get chats
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChatsAsync($count = 100, $offset = null, string $contentType = self::contentTypes['getChats'][0])
    {
        return $this->getChatsAsyncWithHttpInfo($count, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation getChatsAsyncWithHttpInfo
     *
     * Get chats
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChatsAsyncWithHttpInfo($count = 100, $offset = null, string $contentType = self::contentTypes['getChats'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ChatsList';
        $request = $this->getChatsRequest($count, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'getChats'
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getChatsRequest($count = 100, $offset = null, string $contentType = self::contentTypes['getChats'][0])
    {

        if ($count !== null && $count > 500) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling ChatsApi.getChats, must be smaller than or equal to 500.');
        }
        if ($count !== null && $count < 1) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling ChatsApi.getChats, must be bigger than or equal to 1.');
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling ChatsApi.getChats, must be bigger than or equal to 0.');
        }


        $resourcePath = '/chats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation patchChat
     *
     * ⚙️Chat Settings Management: Pin, Mute, Read, Disappearing.
     *
     * @param  string $chat_id Chat ID (required)
     * @param  \Purelines\WhapiSdk\Model\PatchChatRequest|null $patch_chat_request Request body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchChat'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function patchChat($chat_id, $patch_chat_request = null, string $contentType = self::contentTypes['patchChat'][0])
    {
        list($response) = $this->patchChatWithHttpInfo($chat_id, $patch_chat_request, $contentType);
        return $response;
    }

    /**
     * Operation patchChatWithHttpInfo
     *
     * ⚙️Chat Settings Management: Pin, Mute, Read, Disappearing.
     *
     * @param  string $chat_id Chat ID (required)
     * @param  \Purelines\WhapiSdk\Model\PatchChatRequest|null $patch_chat_request Request body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchChat'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchChatWithHttpInfo($chat_id, $patch_chat_request = null, string $contentType = self::contentTypes['patchChat'][0])
    {
        $request = $this->patchChatRequest($chat_id, $patch_chat_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseSuccess',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation patchChatAsync
     *
     * ⚙️Chat Settings Management: Pin, Mute, Read, Disappearing.
     *
     * @param  string $chat_id Chat ID (required)
     * @param  \Purelines\WhapiSdk\Model\PatchChatRequest|null $patch_chat_request Request body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchChat'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchChatAsync($chat_id, $patch_chat_request = null, string $contentType = self::contentTypes['patchChat'][0])
    {
        return $this->patchChatAsyncWithHttpInfo($chat_id, $patch_chat_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation patchChatAsyncWithHttpInfo
     *
     * ⚙️Chat Settings Management: Pin, Mute, Read, Disappearing.
     *
     * @param  string $chat_id Chat ID (required)
     * @param  \Purelines\WhapiSdk\Model\PatchChatRequest|null $patch_chat_request Request body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchChat'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchChatAsyncWithHttpInfo($chat_id, $patch_chat_request = null, string $contentType = self::contentTypes['patchChat'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseSuccess';
        $request = $this->patchChatRequest($chat_id, $patch_chat_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'patchChat'
     *
     * @param  string $chat_id Chat ID (required)
     * @param  \Purelines\WhapiSdk\Model\PatchChatRequest|null $patch_chat_request Request body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchChat'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchChatRequest($chat_id, $patch_chat_request = null, string $contentType = self::contentTypes['patchChat'][0])
    {

        // verify the required parameter 'chat_id' is set
        if ($chat_id === null || (is_array($chat_id) && count($chat_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chat_id when calling patchChat',
            );
        }
        if (!preg_match("/^[\\d-]{10,31}@[\\w\\.]{1,}$/", $chat_id)) {
            throw new \InvalidArgumentException("invalid value for \"chat_id\" when calling ChatsApi.patchChat, must conform to the pattern /^[\\d-]{10,31}@[\\w\\.]{1,}$/.");
        }



        $resourcePath = '/chats/{ChatID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($chat_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ChatID' . '}',
                ObjectSerializer::toPathValue($chat_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($patch_chat_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($patch_chat_request));
            } else {
                $httpBody = $patch_chat_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        if ($this->config->getCertFile()) {
            $options[RequestOptions::CERT] = $this->config->getCertFile();
        }

        if ($this->config->getKeyFile()) {
            $options[RequestOptions::SSL_KEY] = $this->config->getKeyFile();
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response,
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri(),
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content,
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders(),
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode,
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
