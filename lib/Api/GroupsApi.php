<?php

/**
 * GroupsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Whapi API
 *
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Purelines\WhapiSdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Purelines\WhapiSdk\ApiException;
use Purelines\WhapiSdk\Configuration;
use Purelines\WhapiSdk\FormDataProcessor;
use Purelines\WhapiSdk\HeaderSelector;
use Purelines\WhapiSdk\ObjectSerializer;

/**
 * GroupsApi Class Doc Comment
 *
 * @category Class
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GroupsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'acceptGroupInvite' => [
            'application/json',
        ],
        'addGroupParticipant' => [
            'application/json',
        ],
        'approveGroupApplicationsList' => [
            'application/json',
        ],
        'createGroup' => [
            'application/json',
        ],
        'deleteGroupIcon' => [
            'application/json',
        ],
        'demoteGroupAdmin' => [
            'application/json',
        ],
        'getGroup' => [
            'application/json',
        ],
        'getGroupApplicationsList' => [
            'application/json',
        ],
        'getGroupIcon' => [
            'application/json',
        ],
        'getGroupInvite' => [
            'application/json',
        ],
        'getGroupMetadataByInviteCode' => [
            'application/json',
        ],
        'getGroups' => [
            'application/json',
        ],
        'leaveGroup' => [
            'application/json',
        ],
        'promoteToGroupAdmin' => [
            'application/json',
        ],
        'rejectGroupApplicationsList' => [
            'application/json',
        ],
        'removeGroupParticipant' => [
            'application/json',
        ],
        'revokeGroupInvite' => [
            'application/json',
        ],
        'sendGroupInvite' => [
            'application/json',
            'multipart/form-data',
        ],
        'setGroupIcon' => [
            'image/jpeg',
            'image/png',
            'application/json',
        ],
        'updateGroupInfo' => [
            'application/json',
        ],
        'updateGroupSetting' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0,
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation acceptGroupInvite
     *
     * Accept group invite
     *
     * @param  \Purelines\WhapiSdk\Model\GroupInvite $group_invite Group data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptGroupInvite'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\NewGroup|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function acceptGroupInvite($group_invite, string $contentType = self::contentTypes['acceptGroupInvite'][0])
    {
        list($response) = $this->acceptGroupInviteWithHttpInfo($group_invite, $contentType);
        return $response;
    }

    /**
     * Operation acceptGroupInviteWithHttpInfo
     *
     * Accept group invite
     *
     * @param  \Purelines\WhapiSdk\Model\GroupInvite $group_invite Group data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptGroupInvite'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\NewGroup|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function acceptGroupInviteWithHttpInfo($group_invite, string $contentType = self::contentTypes['acceptGroupInvite'][0])
    {
        $request = $this->acceptGroupInviteRequest($group_invite, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\NewGroup',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\NewGroup',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\NewGroup',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation acceptGroupInviteAsync
     *
     * Accept group invite
     *
     * @param  \Purelines\WhapiSdk\Model\GroupInvite $group_invite Group data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptGroupInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptGroupInviteAsync($group_invite, string $contentType = self::contentTypes['acceptGroupInvite'][0])
    {
        return $this->acceptGroupInviteAsyncWithHttpInfo($group_invite, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation acceptGroupInviteAsyncWithHttpInfo
     *
     * Accept group invite
     *
     * @param  \Purelines\WhapiSdk\Model\GroupInvite $group_invite Group data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptGroupInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptGroupInviteAsyncWithHttpInfo($group_invite, string $contentType = self::contentTypes['acceptGroupInvite'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\NewGroup';
        $request = $this->acceptGroupInviteRequest($group_invite, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'acceptGroupInvite'
     *
     * @param  \Purelines\WhapiSdk\Model\GroupInvite $group_invite Group data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptGroupInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function acceptGroupInviteRequest($group_invite, string $contentType = self::contentTypes['acceptGroupInvite'][0])
    {

        // verify the required parameter 'group_invite' is set
        if ($group_invite === null || (is_array($group_invite) && count($group_invite) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_invite when calling acceptGroupInvite',
            );
        }


        $resourcePath = '/groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($group_invite)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($group_invite));
            } else {
                $httpBody = $group_invite;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation addGroupParticipant
     *
     * Add group participant
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ListParticipantsRequest $list_participants_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addGroupParticipant'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseListParticipants|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function addGroupParticipant($group_id, $list_participants_request, string $contentType = self::contentTypes['addGroupParticipant'][0])
    {
        list($response) = $this->addGroupParticipantWithHttpInfo($group_id, $list_participants_request, $contentType);
        return $response;
    }

    /**
     * Operation addGroupParticipantWithHttpInfo
     *
     * Add group participant
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ListParticipantsRequest $list_participants_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addGroupParticipant'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseListParticipants|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function addGroupParticipantWithHttpInfo($group_id, $list_participants_request, string $contentType = self::contentTypes['addGroupParticipant'][0])
    {
        $request = $this->addGroupParticipantRequest($group_id, $list_participants_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseListParticipants',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseListParticipants',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseListParticipants',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation addGroupParticipantAsync
     *
     * Add group participant
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ListParticipantsRequest $list_participants_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addGroupParticipant'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addGroupParticipantAsync($group_id, $list_participants_request, string $contentType = self::contentTypes['addGroupParticipant'][0])
    {
        return $this->addGroupParticipantAsyncWithHttpInfo($group_id, $list_participants_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation addGroupParticipantAsyncWithHttpInfo
     *
     * Add group participant
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ListParticipantsRequest $list_participants_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addGroupParticipant'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addGroupParticipantAsyncWithHttpInfo($group_id, $list_participants_request, string $contentType = self::contentTypes['addGroupParticipant'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseListParticipants';
        $request = $this->addGroupParticipantRequest($group_id, $list_participants_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'addGroupParticipant'
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ListParticipantsRequest $list_participants_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addGroupParticipant'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addGroupParticipantRequest($group_id, $list_participants_request, string $contentType = self::contentTypes['addGroupParticipant'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling addGroupParticipant',
            );
        }
        if (!preg_match("/^[\\d-]{10,31}@g\\.us$/", $group_id)) {
            throw new \InvalidArgumentException("invalid value for \"group_id\" when calling GroupsApi.addGroupParticipant, must conform to the pattern /^[\\d-]{10,31}@g\\.us$/.");
        }

        // verify the required parameter 'list_participants_request' is set
        if ($list_participants_request === null || (is_array($list_participants_request) && count($list_participants_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_participants_request when calling addGroupParticipant',
            );
        }


        $resourcePath = '/groups/{GroupID}/participants';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'GroupID' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($list_participants_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($list_participants_request));
            } else {
                $httpBody = $list_participants_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation approveGroupApplicationsList
     *
     * Accept group application for listed user
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ApplicationRequest|null $application_request Chat ID list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approveGroupApplicationsList'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\GroupApplicationChange[]|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function approveGroupApplicationsList($group_id, $application_request = null, string $contentType = self::contentTypes['approveGroupApplicationsList'][0])
    {
        list($response) = $this->approveGroupApplicationsListWithHttpInfo($group_id, $application_request, $contentType);
        return $response;
    }

    /**
     * Operation approveGroupApplicationsListWithHttpInfo
     *
     * Accept group application for listed user
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ApplicationRequest|null $application_request Chat ID list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approveGroupApplicationsList'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\GroupApplicationChange[]|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function approveGroupApplicationsListWithHttpInfo($group_id, $application_request = null, string $contentType = self::contentTypes['approveGroupApplicationsList'][0])
    {
        $request = $this->approveGroupApplicationsListRequest($group_id, $application_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\GroupApplicationChange[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\GroupApplicationChange[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\GroupApplicationChange[]',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation approveGroupApplicationsListAsync
     *
     * Accept group application for listed user
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ApplicationRequest|null $application_request Chat ID list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approveGroupApplicationsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveGroupApplicationsListAsync($group_id, $application_request = null, string $contentType = self::contentTypes['approveGroupApplicationsList'][0])
    {
        return $this->approveGroupApplicationsListAsyncWithHttpInfo($group_id, $application_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation approveGroupApplicationsListAsyncWithHttpInfo
     *
     * Accept group application for listed user
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ApplicationRequest|null $application_request Chat ID list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approveGroupApplicationsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveGroupApplicationsListAsyncWithHttpInfo($group_id, $application_request = null, string $contentType = self::contentTypes['approveGroupApplicationsList'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\GroupApplicationChange[]';
        $request = $this->approveGroupApplicationsListRequest($group_id, $application_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'approveGroupApplicationsList'
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ApplicationRequest|null $application_request Chat ID list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approveGroupApplicationsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function approveGroupApplicationsListRequest($group_id, $application_request = null, string $contentType = self::contentTypes['approveGroupApplicationsList'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling approveGroupApplicationsList',
            );
        }
        if (!preg_match("/^[\\d-]{10,31}@g\\.us$/", $group_id)) {
            throw new \InvalidArgumentException("invalid value for \"group_id\" when calling GroupsApi.approveGroupApplicationsList, must conform to the pattern /^[\\d-]{10,31}@g\\.us$/.");
        }



        $resourcePath = '/groups/{GroupID}/applications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'GroupID' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($application_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($application_request));
            } else {
                $httpBody = $application_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation createGroup
     *
     * Create group
     *
     * @param  \Purelines\WhapiSdk\Model\CreateGroupRequest $create_group_request Group data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createGroup'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\GroupCreate|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function createGroup($create_group_request, string $contentType = self::contentTypes['createGroup'][0])
    {
        list($response) = $this->createGroupWithHttpInfo($create_group_request, $contentType);
        return $response;
    }

    /**
     * Operation createGroupWithHttpInfo
     *
     * Create group
     *
     * @param  \Purelines\WhapiSdk\Model\CreateGroupRequest $create_group_request Group data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createGroup'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\GroupCreate|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createGroupWithHttpInfo($create_group_request, string $contentType = self::contentTypes['createGroup'][0])
    {
        $request = $this->createGroupRequest($create_group_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\GroupCreate',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\GroupCreate',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\GroupCreate',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation createGroupAsync
     *
     * Create group
     *
     * @param  \Purelines\WhapiSdk\Model\CreateGroupRequest $create_group_request Group data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createGroupAsync($create_group_request, string $contentType = self::contentTypes['createGroup'][0])
    {
        return $this->createGroupAsyncWithHttpInfo($create_group_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation createGroupAsyncWithHttpInfo
     *
     * Create group
     *
     * @param  \Purelines\WhapiSdk\Model\CreateGroupRequest $create_group_request Group data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createGroupAsyncWithHttpInfo($create_group_request, string $contentType = self::contentTypes['createGroup'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\GroupCreate';
        $request = $this->createGroupRequest($create_group_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'createGroup'
     *
     * @param  \Purelines\WhapiSdk\Model\CreateGroupRequest $create_group_request Group data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createGroupRequest($create_group_request, string $contentType = self::contentTypes['createGroup'][0])
    {

        // verify the required parameter 'create_group_request' is set
        if ($create_group_request === null || (is_array($create_group_request) && count($create_group_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_group_request when calling createGroup',
            );
        }


        $resourcePath = '/groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($create_group_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_group_request));
            } else {
                $httpBody = $create_group_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation deleteGroupIcon
     *
     * Delete group icon
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteGroupIcon'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function deleteGroupIcon($group_id, string $contentType = self::contentTypes['deleteGroupIcon'][0])
    {
        list($response) = $this->deleteGroupIconWithHttpInfo($group_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteGroupIconWithHttpInfo
     *
     * Delete group icon
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteGroupIcon'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteGroupIconWithHttpInfo($group_id, string $contentType = self::contentTypes['deleteGroupIcon'][0])
    {
        $request = $this->deleteGroupIconRequest($group_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseSuccess',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation deleteGroupIconAsync
     *
     * Delete group icon
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteGroupIcon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteGroupIconAsync($group_id, string $contentType = self::contentTypes['deleteGroupIcon'][0])
    {
        return $this->deleteGroupIconAsyncWithHttpInfo($group_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation deleteGroupIconAsyncWithHttpInfo
     *
     * Delete group icon
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteGroupIcon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteGroupIconAsyncWithHttpInfo($group_id, string $contentType = self::contentTypes['deleteGroupIcon'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseSuccess';
        $request = $this->deleteGroupIconRequest($group_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'deleteGroupIcon'
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteGroupIcon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteGroupIconRequest($group_id, string $contentType = self::contentTypes['deleteGroupIcon'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling deleteGroupIcon',
            );
        }
        if (!preg_match("/^[\\d-]{10,31}@g\\.us$/", $group_id)) {
            throw new \InvalidArgumentException("invalid value for \"group_id\" when calling GroupsApi.deleteGroupIcon, must conform to the pattern /^[\\d-]{10,31}@g\\.us$/.");
        }


        $resourcePath = '/groups/{GroupID}/icon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'GroupID' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation demoteGroupAdmin
     *
     * Demote group admin
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ListParticipantsRequest $list_participants_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['demoteGroupAdmin'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function demoteGroupAdmin($group_id, $list_participants_request, string $contentType = self::contentTypes['demoteGroupAdmin'][0])
    {
        list($response) = $this->demoteGroupAdminWithHttpInfo($group_id, $list_participants_request, $contentType);
        return $response;
    }

    /**
     * Operation demoteGroupAdminWithHttpInfo
     *
     * Demote group admin
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ListParticipantsRequest $list_participants_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['demoteGroupAdmin'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function demoteGroupAdminWithHttpInfo($group_id, $list_participants_request, string $contentType = self::contentTypes['demoteGroupAdmin'][0])
    {
        $request = $this->demoteGroupAdminRequest($group_id, $list_participants_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseSuccess',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation demoteGroupAdminAsync
     *
     * Demote group admin
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ListParticipantsRequest $list_participants_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['demoteGroupAdmin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function demoteGroupAdminAsync($group_id, $list_participants_request, string $contentType = self::contentTypes['demoteGroupAdmin'][0])
    {
        return $this->demoteGroupAdminAsyncWithHttpInfo($group_id, $list_participants_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation demoteGroupAdminAsyncWithHttpInfo
     *
     * Demote group admin
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ListParticipantsRequest $list_participants_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['demoteGroupAdmin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function demoteGroupAdminAsyncWithHttpInfo($group_id, $list_participants_request, string $contentType = self::contentTypes['demoteGroupAdmin'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseSuccess';
        $request = $this->demoteGroupAdminRequest($group_id, $list_participants_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'demoteGroupAdmin'
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ListParticipantsRequest $list_participants_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['demoteGroupAdmin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function demoteGroupAdminRequest($group_id, $list_participants_request, string $contentType = self::contentTypes['demoteGroupAdmin'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling demoteGroupAdmin',
            );
        }
        if (!preg_match("/^[\\d-]{10,31}@g\\.us$/", $group_id)) {
            throw new \InvalidArgumentException("invalid value for \"group_id\" when calling GroupsApi.demoteGroupAdmin, must conform to the pattern /^[\\d-]{10,31}@g\\.us$/.");
        }

        // verify the required parameter 'list_participants_request' is set
        if ($list_participants_request === null || (is_array($list_participants_request) && count($list_participants_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_participants_request when calling demoteGroupAdmin',
            );
        }


        $resourcePath = '/groups/{GroupID}/admins';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'GroupID' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($list_participants_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($list_participants_request));
            } else {
                $httpBody = $list_participants_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation getGroup
     *
     * Get group
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroup'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\Group|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function getGroup($group_id, string $contentType = self::contentTypes['getGroup'][0])
    {
        list($response) = $this->getGroupWithHttpInfo($group_id, $contentType);
        return $response;
    }

    /**
     * Operation getGroupWithHttpInfo
     *
     * Get group
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroup'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\Group|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupWithHttpInfo($group_id, string $contentType = self::contentTypes['getGroup'][0])
    {
        $request = $this->getGroupRequest($group_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\Group',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\Group',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\Group',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation getGroupAsync
     *
     * Get group
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupAsync($group_id, string $contentType = self::contentTypes['getGroup'][0])
    {
        return $this->getGroupAsyncWithHttpInfo($group_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation getGroupAsyncWithHttpInfo
     *
     * Get group
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupAsyncWithHttpInfo($group_id, string $contentType = self::contentTypes['getGroup'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\Group';
        $request = $this->getGroupRequest($group_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'getGroup'
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGroupRequest($group_id, string $contentType = self::contentTypes['getGroup'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling getGroup',
            );
        }
        if (!preg_match("/^[\\d-]{10,31}@g\\.us$/", $group_id)) {
            throw new \InvalidArgumentException("invalid value for \"group_id\" when calling GroupsApi.getGroup, must conform to the pattern /^[\\d-]{10,31}@g\\.us$/.");
        }


        $resourcePath = '/groups/{GroupID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'GroupID' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation getGroupApplicationsList
     *
     * Get list of join requests to the group
     *
     * @param  string $group_id Group ID (required)
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroupApplicationsList'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\GroupApplicationList|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function getGroupApplicationsList($group_id, $count = 100, $offset = null, string $contentType = self::contentTypes['getGroupApplicationsList'][0])
    {
        list($response) = $this->getGroupApplicationsListWithHttpInfo($group_id, $count, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getGroupApplicationsListWithHttpInfo
     *
     * Get list of join requests to the group
     *
     * @param  string $group_id Group ID (required)
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroupApplicationsList'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\GroupApplicationList|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupApplicationsListWithHttpInfo($group_id, $count = 100, $offset = null, string $contentType = self::contentTypes['getGroupApplicationsList'][0])
    {
        $request = $this->getGroupApplicationsListRequest($group_id, $count, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\GroupApplicationList',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\GroupApplicationList',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\GroupApplicationList',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation getGroupApplicationsListAsync
     *
     * Get list of join requests to the group
     *
     * @param  string $group_id Group ID (required)
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroupApplicationsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupApplicationsListAsync($group_id, $count = 100, $offset = null, string $contentType = self::contentTypes['getGroupApplicationsList'][0])
    {
        return $this->getGroupApplicationsListAsyncWithHttpInfo($group_id, $count, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation getGroupApplicationsListAsyncWithHttpInfo
     *
     * Get list of join requests to the group
     *
     * @param  string $group_id Group ID (required)
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroupApplicationsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupApplicationsListAsyncWithHttpInfo($group_id, $count = 100, $offset = null, string $contentType = self::contentTypes['getGroupApplicationsList'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\GroupApplicationList';
        $request = $this->getGroupApplicationsListRequest($group_id, $count, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'getGroupApplicationsList'
     *
     * @param  string $group_id Group ID (required)
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroupApplicationsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGroupApplicationsListRequest($group_id, $count = 100, $offset = null, string $contentType = self::contentTypes['getGroupApplicationsList'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling getGroupApplicationsList',
            );
        }
        if (!preg_match("/^[\\d-]{10,31}@g\\.us$/", $group_id)) {
            throw new \InvalidArgumentException("invalid value for \"group_id\" when calling GroupsApi.getGroupApplicationsList, must conform to the pattern /^[\\d-]{10,31}@g\\.us$/.");
        }

        if ($count !== null && $count > 500) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling GroupsApi.getGroupApplicationsList, must be smaller than or equal to 500.');
        }
        if ($count !== null && $count < 1) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling GroupsApi.getGroupApplicationsList, must be bigger than or equal to 1.');
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling GroupsApi.getGroupApplicationsList, must be bigger than or equal to 0.');
        }


        $resourcePath = '/groups/{GroupID}/applications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);


        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'GroupID' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation getGroupIcon
     *
     * Get group icon
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroupIcon'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function getGroupIcon($group_id, string $contentType = self::contentTypes['getGroupIcon'][0])
    {
        list($response) = $this->getGroupIconWithHttpInfo($group_id, $contentType);
        return $response;
    }

    /**
     * Operation getGroupIconWithHttpInfo
     *
     * Get group icon
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroupIcon'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupIconWithHttpInfo($group_id, string $contentType = self::contentTypes['getGroupIcon'][0])
    {
        $request = $this->getGroupIconRequest($group_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SplFileObject',
                        $request,
                        $response,
                    );
                case 204:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\SplFileObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation getGroupIconAsync
     *
     * Get group icon
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroupIcon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupIconAsync($group_id, string $contentType = self::contentTypes['getGroupIcon'][0])
    {
        return $this->getGroupIconAsyncWithHttpInfo($group_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation getGroupIconAsyncWithHttpInfo
     *
     * Get group icon
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroupIcon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupIconAsyncWithHttpInfo($group_id, string $contentType = self::contentTypes['getGroupIcon'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getGroupIconRequest($group_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'getGroupIcon'
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroupIcon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGroupIconRequest($group_id, string $contentType = self::contentTypes['getGroupIcon'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling getGroupIcon',
            );
        }
        if (!preg_match("/^[\\d-]{10,31}@g\\.us$/", $group_id)) {
            throw new \InvalidArgumentException("invalid value for \"group_id\" when calling GroupsApi.getGroupIcon, must conform to the pattern /^[\\d-]{10,31}@g\\.us$/.");
        }


        $resourcePath = '/groups/{GroupID}/icon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'GroupID' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['image/png', 'application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation getGroupInvite
     *
     * Get group invite
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroupInvite'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\GroupInvite|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function getGroupInvite($group_id, string $contentType = self::contentTypes['getGroupInvite'][0])
    {
        list($response) = $this->getGroupInviteWithHttpInfo($group_id, $contentType);
        return $response;
    }

    /**
     * Operation getGroupInviteWithHttpInfo
     *
     * Get group invite
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroupInvite'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\GroupInvite|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupInviteWithHttpInfo($group_id, string $contentType = self::contentTypes['getGroupInvite'][0])
    {
        $request = $this->getGroupInviteRequest($group_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\GroupInvite',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\GroupInvite',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\GroupInvite',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation getGroupInviteAsync
     *
     * Get group invite
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroupInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupInviteAsync($group_id, string $contentType = self::contentTypes['getGroupInvite'][0])
    {
        return $this->getGroupInviteAsyncWithHttpInfo($group_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation getGroupInviteAsyncWithHttpInfo
     *
     * Get group invite
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroupInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupInviteAsyncWithHttpInfo($group_id, string $contentType = self::contentTypes['getGroupInvite'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\GroupInvite';
        $request = $this->getGroupInviteRequest($group_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'getGroupInvite'
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroupInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGroupInviteRequest($group_id, string $contentType = self::contentTypes['getGroupInvite'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling getGroupInvite',
            );
        }
        if (!preg_match("/^[\\d-]{10,31}@g\\.us$/", $group_id)) {
            throw new \InvalidArgumentException("invalid value for \"group_id\" when calling GroupsApi.getGroupInvite, must conform to the pattern /^[\\d-]{10,31}@g\\.us$/.");
        }


        $resourcePath = '/groups/{GroupID}/invite';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'GroupID' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation getGroupMetadataByInviteCode
     *
     * Get group info by invite code
     *
     * @param  string $invite_code Invite Code (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroupMetadataByInviteCode'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\GroupInfoByInviteCode|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function getGroupMetadataByInviteCode($invite_code, string $contentType = self::contentTypes['getGroupMetadataByInviteCode'][0])
    {
        list($response) = $this->getGroupMetadataByInviteCodeWithHttpInfo($invite_code, $contentType);
        return $response;
    }

    /**
     * Operation getGroupMetadataByInviteCodeWithHttpInfo
     *
     * Get group info by invite code
     *
     * @param  string $invite_code Invite Code (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroupMetadataByInviteCode'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\GroupInfoByInviteCode|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupMetadataByInviteCodeWithHttpInfo($invite_code, string $contentType = self::contentTypes['getGroupMetadataByInviteCode'][0])
    {
        $request = $this->getGroupMetadataByInviteCodeRequest($invite_code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\GroupInfoByInviteCode',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\GroupInfoByInviteCode',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\GroupInfoByInviteCode',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation getGroupMetadataByInviteCodeAsync
     *
     * Get group info by invite code
     *
     * @param  string $invite_code Invite Code (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroupMetadataByInviteCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupMetadataByInviteCodeAsync($invite_code, string $contentType = self::contentTypes['getGroupMetadataByInviteCode'][0])
    {
        return $this->getGroupMetadataByInviteCodeAsyncWithHttpInfo($invite_code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation getGroupMetadataByInviteCodeAsyncWithHttpInfo
     *
     * Get group info by invite code
     *
     * @param  string $invite_code Invite Code (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroupMetadataByInviteCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupMetadataByInviteCodeAsyncWithHttpInfo($invite_code, string $contentType = self::contentTypes['getGroupMetadataByInviteCode'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\GroupInfoByInviteCode';
        $request = $this->getGroupMetadataByInviteCodeRequest($invite_code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'getGroupMetadataByInviteCode'
     *
     * @param  string $invite_code Invite Code (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroupMetadataByInviteCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGroupMetadataByInviteCodeRequest($invite_code, string $contentType = self::contentTypes['getGroupMetadataByInviteCode'][0])
    {

        // verify the required parameter 'invite_code' is set
        if ($invite_code === null || (is_array($invite_code) && count($invite_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invite_code when calling getGroupMetadataByInviteCode',
            );
        }
        if (!preg_match("/^[A-Za-z0-9]{14,22}$/", $invite_code)) {
            throw new \InvalidArgumentException("invalid value for \"invite_code\" when calling GroupsApi.getGroupMetadataByInviteCode, must conform to the pattern /^[A-Za-z0-9]{14,22}$/.");
        }


        $resourcePath = '/groups/link/{InviteCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($invite_code !== null) {
            $resourcePath = str_replace(
                '{' . 'InviteCode' . '}',
                ObjectSerializer::toPathValue($invite_code),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation getGroups
     *
     * Get groups
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroups'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\GroupsList|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function getGroups($count = 100, $offset = null, string $contentType = self::contentTypes['getGroups'][0])
    {
        list($response) = $this->getGroupsWithHttpInfo($count, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getGroupsWithHttpInfo
     *
     * Get groups
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroups'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\GroupsList|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupsWithHttpInfo($count = 100, $offset = null, string $contentType = self::contentTypes['getGroups'][0])
    {
        $request = $this->getGroupsRequest($count, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\GroupsList',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\GroupsList',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\GroupsList',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation getGroupsAsync
     *
     * Get groups
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupsAsync($count = 100, $offset = null, string $contentType = self::contentTypes['getGroups'][0])
    {
        return $this->getGroupsAsyncWithHttpInfo($count, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation getGroupsAsyncWithHttpInfo
     *
     * Get groups
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupsAsyncWithHttpInfo($count = 100, $offset = null, string $contentType = self::contentTypes['getGroups'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\GroupsList';
        $request = $this->getGroupsRequest($count, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'getGroups'
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGroupsRequest($count = 100, $offset = null, string $contentType = self::contentTypes['getGroups'][0])
    {

        if ($count !== null && $count > 500) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling GroupsApi.getGroups, must be smaller than or equal to 500.');
        }
        if ($count !== null && $count < 1) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling GroupsApi.getGroups, must be bigger than or equal to 1.');
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling GroupsApi.getGroups, must be bigger than or equal to 0.');
        }


        $resourcePath = '/groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation leaveGroup
     *
     * Leave group
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaveGroup'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function leaveGroup($group_id, string $contentType = self::contentTypes['leaveGroup'][0])
    {
        list($response) = $this->leaveGroupWithHttpInfo($group_id, $contentType);
        return $response;
    }

    /**
     * Operation leaveGroupWithHttpInfo
     *
     * Leave group
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaveGroup'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function leaveGroupWithHttpInfo($group_id, string $contentType = self::contentTypes['leaveGroup'][0])
    {
        $request = $this->leaveGroupRequest($group_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseSuccess',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation leaveGroupAsync
     *
     * Leave group
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaveGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leaveGroupAsync($group_id, string $contentType = self::contentTypes['leaveGroup'][0])
    {
        return $this->leaveGroupAsyncWithHttpInfo($group_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation leaveGroupAsyncWithHttpInfo
     *
     * Leave group
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaveGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leaveGroupAsyncWithHttpInfo($group_id, string $contentType = self::contentTypes['leaveGroup'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseSuccess';
        $request = $this->leaveGroupRequest($group_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'leaveGroup'
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaveGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function leaveGroupRequest($group_id, string $contentType = self::contentTypes['leaveGroup'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling leaveGroup',
            );
        }
        if (!preg_match("/^[\\d-]{10,31}@g\\.us$/", $group_id)) {
            throw new \InvalidArgumentException("invalid value for \"group_id\" when calling GroupsApi.leaveGroup, must conform to the pattern /^[\\d-]{10,31}@g\\.us$/.");
        }


        $resourcePath = '/groups/{GroupID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'GroupID' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation promoteToGroupAdmin
     *
     * Promote to group admin
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ListParticipantsRequest $list_participants_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['promoteToGroupAdmin'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function promoteToGroupAdmin($group_id, $list_participants_request, string $contentType = self::contentTypes['promoteToGroupAdmin'][0])
    {
        list($response) = $this->promoteToGroupAdminWithHttpInfo($group_id, $list_participants_request, $contentType);
        return $response;
    }

    /**
     * Operation promoteToGroupAdminWithHttpInfo
     *
     * Promote to group admin
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ListParticipantsRequest $list_participants_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['promoteToGroupAdmin'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function promoteToGroupAdminWithHttpInfo($group_id, $list_participants_request, string $contentType = self::contentTypes['promoteToGroupAdmin'][0])
    {
        $request = $this->promoteToGroupAdminRequest($group_id, $list_participants_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseSuccess',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation promoteToGroupAdminAsync
     *
     * Promote to group admin
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ListParticipantsRequest $list_participants_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['promoteToGroupAdmin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promoteToGroupAdminAsync($group_id, $list_participants_request, string $contentType = self::contentTypes['promoteToGroupAdmin'][0])
    {
        return $this->promoteToGroupAdminAsyncWithHttpInfo($group_id, $list_participants_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation promoteToGroupAdminAsyncWithHttpInfo
     *
     * Promote to group admin
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ListParticipantsRequest $list_participants_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['promoteToGroupAdmin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function promoteToGroupAdminAsyncWithHttpInfo($group_id, $list_participants_request, string $contentType = self::contentTypes['promoteToGroupAdmin'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseSuccess';
        $request = $this->promoteToGroupAdminRequest($group_id, $list_participants_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'promoteToGroupAdmin'
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ListParticipantsRequest $list_participants_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['promoteToGroupAdmin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function promoteToGroupAdminRequest($group_id, $list_participants_request, string $contentType = self::contentTypes['promoteToGroupAdmin'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling promoteToGroupAdmin',
            );
        }
        if (!preg_match("/^[\\d-]{10,31}@g\\.us$/", $group_id)) {
            throw new \InvalidArgumentException("invalid value for \"group_id\" when calling GroupsApi.promoteToGroupAdmin, must conform to the pattern /^[\\d-]{10,31}@g\\.us$/.");
        }

        // verify the required parameter 'list_participants_request' is set
        if ($list_participants_request === null || (is_array($list_participants_request) && count($list_participants_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_participants_request when calling promoteToGroupAdmin',
            );
        }


        $resourcePath = '/groups/{GroupID}/admins';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'GroupID' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($list_participants_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($list_participants_request));
            } else {
                $httpBody = $list_participants_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation rejectGroupApplicationsList
     *
     * Reject group applications for listed users
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ApplicationRequest|null $application_request Chat ID list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectGroupApplicationsList'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\GroupApplicationChange[]|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function rejectGroupApplicationsList($group_id, $application_request = null, string $contentType = self::contentTypes['rejectGroupApplicationsList'][0])
    {
        list($response) = $this->rejectGroupApplicationsListWithHttpInfo($group_id, $application_request, $contentType);
        return $response;
    }

    /**
     * Operation rejectGroupApplicationsListWithHttpInfo
     *
     * Reject group applications for listed users
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ApplicationRequest|null $application_request Chat ID list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectGroupApplicationsList'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\GroupApplicationChange[]|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function rejectGroupApplicationsListWithHttpInfo($group_id, $application_request = null, string $contentType = self::contentTypes['rejectGroupApplicationsList'][0])
    {
        $request = $this->rejectGroupApplicationsListRequest($group_id, $application_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\GroupApplicationChange[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\GroupApplicationChange[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\GroupApplicationChange[]',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation rejectGroupApplicationsListAsync
     *
     * Reject group applications for listed users
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ApplicationRequest|null $application_request Chat ID list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectGroupApplicationsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rejectGroupApplicationsListAsync($group_id, $application_request = null, string $contentType = self::contentTypes['rejectGroupApplicationsList'][0])
    {
        return $this->rejectGroupApplicationsListAsyncWithHttpInfo($group_id, $application_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation rejectGroupApplicationsListAsyncWithHttpInfo
     *
     * Reject group applications for listed users
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ApplicationRequest|null $application_request Chat ID list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectGroupApplicationsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rejectGroupApplicationsListAsyncWithHttpInfo($group_id, $application_request = null, string $contentType = self::contentTypes['rejectGroupApplicationsList'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\GroupApplicationChange[]';
        $request = $this->rejectGroupApplicationsListRequest($group_id, $application_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'rejectGroupApplicationsList'
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ApplicationRequest|null $application_request Chat ID list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectGroupApplicationsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rejectGroupApplicationsListRequest($group_id, $application_request = null, string $contentType = self::contentTypes['rejectGroupApplicationsList'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling rejectGroupApplicationsList',
            );
        }
        if (!preg_match("/^[\\d-]{10,31}@g\\.us$/", $group_id)) {
            throw new \InvalidArgumentException("invalid value for \"group_id\" when calling GroupsApi.rejectGroupApplicationsList, must conform to the pattern /^[\\d-]{10,31}@g\\.us$/.");
        }



        $resourcePath = '/groups/{GroupID}/applications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'GroupID' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($application_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($application_request));
            } else {
                $httpBody = $application_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation removeGroupParticipant
     *
     * Remove group participant
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ListParticipantsRequest $list_participants_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeGroupParticipant'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseListParticipants|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function removeGroupParticipant($group_id, $list_participants_request, string $contentType = self::contentTypes['removeGroupParticipant'][0])
    {
        list($response) = $this->removeGroupParticipantWithHttpInfo($group_id, $list_participants_request, $contentType);
        return $response;
    }

    /**
     * Operation removeGroupParticipantWithHttpInfo
     *
     * Remove group participant
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ListParticipantsRequest $list_participants_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeGroupParticipant'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseListParticipants|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeGroupParticipantWithHttpInfo($group_id, $list_participants_request, string $contentType = self::contentTypes['removeGroupParticipant'][0])
    {
        $request = $this->removeGroupParticipantRequest($group_id, $list_participants_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseListParticipants',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseListParticipants',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseListParticipants',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation removeGroupParticipantAsync
     *
     * Remove group participant
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ListParticipantsRequest $list_participants_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeGroupParticipant'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeGroupParticipantAsync($group_id, $list_participants_request, string $contentType = self::contentTypes['removeGroupParticipant'][0])
    {
        return $this->removeGroupParticipantAsyncWithHttpInfo($group_id, $list_participants_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation removeGroupParticipantAsyncWithHttpInfo
     *
     * Remove group participant
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ListParticipantsRequest $list_participants_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeGroupParticipant'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeGroupParticipantAsyncWithHttpInfo($group_id, $list_participants_request, string $contentType = self::contentTypes['removeGroupParticipant'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseListParticipants';
        $request = $this->removeGroupParticipantRequest($group_id, $list_participants_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'removeGroupParticipant'
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\ListParticipantsRequest $list_participants_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeGroupParticipant'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeGroupParticipantRequest($group_id, $list_participants_request, string $contentType = self::contentTypes['removeGroupParticipant'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling removeGroupParticipant',
            );
        }
        if (!preg_match("/^[\\d-]{10,31}@g\\.us$/", $group_id)) {
            throw new \InvalidArgumentException("invalid value for \"group_id\" when calling GroupsApi.removeGroupParticipant, must conform to the pattern /^[\\d-]{10,31}@g\\.us$/.");
        }

        // verify the required parameter 'list_participants_request' is set
        if ($list_participants_request === null || (is_array($list_participants_request) && count($list_participants_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_participants_request when calling removeGroupParticipant',
            );
        }


        $resourcePath = '/groups/{GroupID}/participants';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'GroupID' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($list_participants_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($list_participants_request));
            } else {
                $httpBody = $list_participants_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation revokeGroupInvite
     *
     * Revoke group invite
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeGroupInvite'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function revokeGroupInvite($group_id, string $contentType = self::contentTypes['revokeGroupInvite'][0])
    {
        list($response) = $this->revokeGroupInviteWithHttpInfo($group_id, $contentType);
        return $response;
    }

    /**
     * Operation revokeGroupInviteWithHttpInfo
     *
     * Revoke group invite
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeGroupInvite'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function revokeGroupInviteWithHttpInfo($group_id, string $contentType = self::contentTypes['revokeGroupInvite'][0])
    {
        $request = $this->revokeGroupInviteRequest($group_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseSuccess',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation revokeGroupInviteAsync
     *
     * Revoke group invite
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeGroupInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeGroupInviteAsync($group_id, string $contentType = self::contentTypes['revokeGroupInvite'][0])
    {
        return $this->revokeGroupInviteAsyncWithHttpInfo($group_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation revokeGroupInviteAsyncWithHttpInfo
     *
     * Revoke group invite
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeGroupInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeGroupInviteAsyncWithHttpInfo($group_id, string $contentType = self::contentTypes['revokeGroupInvite'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseSuccess';
        $request = $this->revokeGroupInviteRequest($group_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'revokeGroupInvite'
     *
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeGroupInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function revokeGroupInviteRequest($group_id, string $contentType = self::contentTypes['revokeGroupInvite'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling revokeGroupInvite',
            );
        }
        if (!preg_match("/^[\\d-]{10,31}@g\\.us$/", $group_id)) {
            throw new \InvalidArgumentException("invalid value for \"group_id\" when calling GroupsApi.revokeGroupInvite, must conform to the pattern /^[\\d-]{10,31}@g\\.us$/.");
        }


        $resourcePath = '/groups/{GroupID}/invite';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'GroupID' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation sendGroupInvite
     *
     * Send group invite link
     *
     * @param  string $invite_code Invite Code (required)
     * @param  \Purelines\WhapiSdk\Model\SenderGroupInviteByCode $sender_group_invite_by_code Message group invite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendGroupInvite'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\SentMessage|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function sendGroupInvite($invite_code, $sender_group_invite_by_code, string $contentType = self::contentTypes['sendGroupInvite'][0])
    {
        list($response) = $this->sendGroupInviteWithHttpInfo($invite_code, $sender_group_invite_by_code, $contentType);
        return $response;
    }

    /**
     * Operation sendGroupInviteWithHttpInfo
     *
     * Send group invite link
     *
     * @param  string $invite_code Invite Code (required)
     * @param  \Purelines\WhapiSdk\Model\SenderGroupInviteByCode $sender_group_invite_by_code Message group invite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendGroupInvite'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\SentMessage|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendGroupInviteWithHttpInfo($invite_code, $sender_group_invite_by_code, string $contentType = self::contentTypes['sendGroupInvite'][0])
    {
        $request = $this->sendGroupInviteRequest($invite_code, $sender_group_invite_by_code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\SentMessage',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\SentMessage',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\SentMessage',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation sendGroupInviteAsync
     *
     * Send group invite link
     *
     * @param  string $invite_code Invite Code (required)
     * @param  \Purelines\WhapiSdk\Model\SenderGroupInviteByCode $sender_group_invite_by_code Message group invite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendGroupInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendGroupInviteAsync($invite_code, $sender_group_invite_by_code, string $contentType = self::contentTypes['sendGroupInvite'][0])
    {
        return $this->sendGroupInviteAsyncWithHttpInfo($invite_code, $sender_group_invite_by_code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation sendGroupInviteAsyncWithHttpInfo
     *
     * Send group invite link
     *
     * @param  string $invite_code Invite Code (required)
     * @param  \Purelines\WhapiSdk\Model\SenderGroupInviteByCode $sender_group_invite_by_code Message group invite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendGroupInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendGroupInviteAsyncWithHttpInfo($invite_code, $sender_group_invite_by_code, string $contentType = self::contentTypes['sendGroupInvite'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\SentMessage';
        $request = $this->sendGroupInviteRequest($invite_code, $sender_group_invite_by_code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'sendGroupInvite'
     *
     * @param  string $invite_code Invite Code (required)
     * @param  \Purelines\WhapiSdk\Model\SenderGroupInviteByCode $sender_group_invite_by_code Message group invite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendGroupInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendGroupInviteRequest($invite_code, $sender_group_invite_by_code, string $contentType = self::contentTypes['sendGroupInvite'][0])
    {

        // verify the required parameter 'invite_code' is set
        if ($invite_code === null || (is_array($invite_code) && count($invite_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invite_code when calling sendGroupInvite',
            );
        }
        if (!preg_match("/^[A-Za-z0-9]{14,22}$/", $invite_code)) {
            throw new \InvalidArgumentException("invalid value for \"invite_code\" when calling GroupsApi.sendGroupInvite, must conform to the pattern /^[A-Za-z0-9]{14,22}$/.");
        }

        // verify the required parameter 'sender_group_invite_by_code' is set
        if ($sender_group_invite_by_code === null || (is_array($sender_group_invite_by_code) && count($sender_group_invite_by_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sender_group_invite_by_code when calling sendGroupInvite',
            );
        }


        $resourcePath = '/groups/link/{InviteCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($invite_code !== null) {
            $resourcePath = str_replace(
                '{' . 'InviteCode' . '}',
                ObjectSerializer::toPathValue($invite_code),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($sender_group_invite_by_code)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sender_group_invite_by_code));
            } else {
                $httpBody = $sender_group_invite_by_code;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation setGroupIcon
     *
     * Set group icon
     *
     * @param  string $group_id Group ID (required)
     * @param  \SplFileObject $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setGroupIcon'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function setGroupIcon($group_id, $body, string $contentType = self::contentTypes['setGroupIcon'][0])
    {
        list($response) = $this->setGroupIconWithHttpInfo($group_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation setGroupIconWithHttpInfo
     *
     * Set group icon
     *
     * @param  string $group_id Group ID (required)
     * @param  \SplFileObject $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setGroupIcon'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function setGroupIconWithHttpInfo($group_id, $body, string $contentType = self::contentTypes['setGroupIcon'][0])
    {
        $request = $this->setGroupIconRequest($group_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseSuccess',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation setGroupIconAsync
     *
     * Set group icon
     *
     * @param  string $group_id Group ID (required)
     * @param  \SplFileObject $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setGroupIcon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setGroupIconAsync($group_id, $body, string $contentType = self::contentTypes['setGroupIcon'][0])
    {
        return $this->setGroupIconAsyncWithHttpInfo($group_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation setGroupIconAsyncWithHttpInfo
     *
     * Set group icon
     *
     * @param  string $group_id Group ID (required)
     * @param  \SplFileObject $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setGroupIcon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setGroupIconAsyncWithHttpInfo($group_id, $body, string $contentType = self::contentTypes['setGroupIcon'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseSuccess';
        $request = $this->setGroupIconRequest($group_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'setGroupIcon'
     *
     * @param  string $group_id Group ID (required)
     * @param  \SplFileObject $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setGroupIcon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setGroupIconRequest($group_id, $body, string $contentType = self::contentTypes['setGroupIcon'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling setGroupIcon',
            );
        }
        if (!preg_match("/^[\\d-]{10,31}@g\\.us$/", $group_id)) {
            throw new \InvalidArgumentException("invalid value for \"group_id\" when calling GroupsApi.setGroupIcon, must conform to the pattern /^[\\d-]{10,31}@g\\.us$/.");
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling setGroupIcon',
            );
        }


        $resourcePath = '/groups/{GroupID}/icon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'GroupID' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation updateGroupInfo
     *
     * Update group info
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\UpdateGroupInfoRequest $update_group_info_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateGroupInfo'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function updateGroupInfo($group_id, $update_group_info_request, string $contentType = self::contentTypes['updateGroupInfo'][0])
    {
        list($response) = $this->updateGroupInfoWithHttpInfo($group_id, $update_group_info_request, $contentType);
        return $response;
    }

    /**
     * Operation updateGroupInfoWithHttpInfo
     *
     * Update group info
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\UpdateGroupInfoRequest $update_group_info_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateGroupInfo'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateGroupInfoWithHttpInfo($group_id, $update_group_info_request, string $contentType = self::contentTypes['updateGroupInfo'][0])
    {
        $request = $this->updateGroupInfoRequest($group_id, $update_group_info_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseSuccess',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation updateGroupInfoAsync
     *
     * Update group info
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\UpdateGroupInfoRequest $update_group_info_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateGroupInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGroupInfoAsync($group_id, $update_group_info_request, string $contentType = self::contentTypes['updateGroupInfo'][0])
    {
        return $this->updateGroupInfoAsyncWithHttpInfo($group_id, $update_group_info_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation updateGroupInfoAsyncWithHttpInfo
     *
     * Update group info
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\UpdateGroupInfoRequest $update_group_info_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateGroupInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGroupInfoAsyncWithHttpInfo($group_id, $update_group_info_request, string $contentType = self::contentTypes['updateGroupInfo'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseSuccess';
        $request = $this->updateGroupInfoRequest($group_id, $update_group_info_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'updateGroupInfo'
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\UpdateGroupInfoRequest $update_group_info_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateGroupInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateGroupInfoRequest($group_id, $update_group_info_request, string $contentType = self::contentTypes['updateGroupInfo'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling updateGroupInfo',
            );
        }
        if (!preg_match("/^[\\d-]{10,31}@g\\.us$/", $group_id)) {
            throw new \InvalidArgumentException("invalid value for \"group_id\" when calling GroupsApi.updateGroupInfo, must conform to the pattern /^[\\d-]{10,31}@g\\.us$/.");
        }

        // verify the required parameter 'update_group_info_request' is set
        if ($update_group_info_request === null || (is_array($update_group_info_request) && count($update_group_info_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_group_info_request when calling updateGroupInfo',
            );
        }


        $resourcePath = '/groups/{GroupID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'GroupID' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($update_group_info_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_group_info_request));
            } else {
                $httpBody = $update_group_info_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation updateGroupSetting
     *
     * Update group setting
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\UpdateGroupSettingRequest $update_group_setting_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateGroupSetting'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function updateGroupSetting($group_id, $update_group_setting_request, string $contentType = self::contentTypes['updateGroupSetting'][0])
    {
        list($response) = $this->updateGroupSettingWithHttpInfo($group_id, $update_group_setting_request, $contentType);
        return $response;
    }

    /**
     * Operation updateGroupSettingWithHttpInfo
     *
     * Update group setting
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\UpdateGroupSettingRequest $update_group_setting_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateGroupSetting'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateGroupSettingWithHttpInfo($group_id, $update_group_setting_request, string $contentType = self::contentTypes['updateGroupSetting'][0])
    {
        $request = $this->updateGroupSettingRequest($group_id, $update_group_setting_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseSuccess',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation updateGroupSettingAsync
     *
     * Update group setting
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\UpdateGroupSettingRequest $update_group_setting_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateGroupSetting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGroupSettingAsync($group_id, $update_group_setting_request, string $contentType = self::contentTypes['updateGroupSetting'][0])
    {
        return $this->updateGroupSettingAsyncWithHttpInfo($group_id, $update_group_setting_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation updateGroupSettingAsyncWithHttpInfo
     *
     * Update group setting
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\UpdateGroupSettingRequest $update_group_setting_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateGroupSetting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGroupSettingAsyncWithHttpInfo($group_id, $update_group_setting_request, string $contentType = self::contentTypes['updateGroupSetting'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseSuccess';
        $request = $this->updateGroupSettingRequest($group_id, $update_group_setting_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'updateGroupSetting'
     *
     * @param  string $group_id Group ID (required)
     * @param  \Purelines\WhapiSdk\Model\UpdateGroupSettingRequest $update_group_setting_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateGroupSetting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateGroupSettingRequest($group_id, $update_group_setting_request, string $contentType = self::contentTypes['updateGroupSetting'][0])
    {

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling updateGroupSetting',
            );
        }
        if (!preg_match("/^[\\d-]{10,31}@g\\.us$/", $group_id)) {
            throw new \InvalidArgumentException("invalid value for \"group_id\" when calling GroupsApi.updateGroupSetting, must conform to the pattern /^[\\d-]{10,31}@g\\.us$/.");
        }

        // verify the required parameter 'update_group_setting_request' is set
        if ($update_group_setting_request === null || (is_array($update_group_setting_request) && count($update_group_setting_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_group_setting_request when calling updateGroupSetting',
            );
        }


        $resourcePath = '/groups/{GroupID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'GroupID' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($update_group_setting_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_group_setting_request));
            } else {
                $httpBody = $update_group_setting_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        if ($this->config->getCertFile()) {
            $options[RequestOptions::CERT] = $this->config->getCertFile();
        }

        if ($this->config->getKeyFile()) {
            $options[RequestOptions::SSL_KEY] = $this->config->getKeyFile();
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response,
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri(),
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content,
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders(),
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode,
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
