<?php

/**
 * BusinessApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Whapi API
 *
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Purelines\WhapiSdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Purelines\WhapiSdk\ApiException;
use Purelines\WhapiSdk\Configuration;
use Purelines\WhapiSdk\FormDataProcessor;
use Purelines\WhapiSdk\HeaderSelector;
use Purelines\WhapiSdk\ObjectSerializer;

/**
 * BusinessApi Class Doc Comment
 *
 * @category Class
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BusinessApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createCollection' => [
            'application/json',
        ],
        'createProduct' => [
            'application/json',
        ],
        'deleteCollection' => [
            'application/json',
        ],
        'deleteProduct' => [
            'application/json',
        ],
        'editBusinessProfile' => [
            'application/json',
        ],
        'editCollection' => [
            'application/json',
        ],
        'getBusinessProfile' => [
            'application/json',
        ],
        'getCollection' => [
            'application/json',
        ],
        'getCollectionProductList' => [
            'application/json',
        ],
        'getCollectionsList' => [
            'application/json',
        ],
        'getCollectionsProductsList' => [
            'application/json',
        ],
        'getContactProducts' => [
            'application/json',
        ],
        'getOrderItems' => [
            'application/json',
        ],
        'getProduct' => [
            'application/json',
        ],
        'getProducts' => [
            'application/json',
        ],
        'sendCatalog' => [
            'application/json',
            'multipart/form-data',
        ],
        'sendProduct' => [
            'application/json',
            'multipart/form-data',
        ],
        'updateProduct' => [
            'application/json',
            'multipart/form-data',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0,
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createCollection
     *
     * Create collection
     *
     * @param  \Purelines\WhapiSdk\Model\BusinessCollectionCreate $business_collection_create Business collection parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCollection'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\BusinessCollectionEditResult|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function createCollection($business_collection_create, string $contentType = self::contentTypes['createCollection'][0])
    {
        list($response) = $this->createCollectionWithHttpInfo($business_collection_create, $contentType);
        return $response;
    }

    /**
     * Operation createCollectionWithHttpInfo
     *
     * Create collection
     *
     * @param  \Purelines\WhapiSdk\Model\BusinessCollectionCreate $business_collection_create Business collection parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCollection'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\BusinessCollectionEditResult|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCollectionWithHttpInfo($business_collection_create, string $contentType = self::contentTypes['createCollection'][0])
    {
        $request = $this->createCollectionRequest($business_collection_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\BusinessCollectionEditResult',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\BusinessCollectionEditResult',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\BusinessCollectionEditResult',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation createCollectionAsync
     *
     * Create collection
     *
     * @param  \Purelines\WhapiSdk\Model\BusinessCollectionCreate $business_collection_create Business collection parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCollectionAsync($business_collection_create, string $contentType = self::contentTypes['createCollection'][0])
    {
        return $this->createCollectionAsyncWithHttpInfo($business_collection_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation createCollectionAsyncWithHttpInfo
     *
     * Create collection
     *
     * @param  \Purelines\WhapiSdk\Model\BusinessCollectionCreate $business_collection_create Business collection parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCollectionAsyncWithHttpInfo($business_collection_create, string $contentType = self::contentTypes['createCollection'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\BusinessCollectionEditResult';
        $request = $this->createCollectionRequest($business_collection_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'createCollection'
     *
     * @param  \Purelines\WhapiSdk\Model\BusinessCollectionCreate $business_collection_create Business collection parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCollectionRequest($business_collection_create, string $contentType = self::contentTypes['createCollection'][0])
    {

        // verify the required parameter 'business_collection_create' is set
        if ($business_collection_create === null || (is_array($business_collection_create) && count($business_collection_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_collection_create when calling createCollection',
            );
        }


        $resourcePath = '/business/collections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($business_collection_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($business_collection_create));
            } else {
                $httpBody = $business_collection_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation createProduct
     *
     * Create product
     *
     * @param  \Purelines\WhapiSdk\Model\ProductCreate|null $product_create Request body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProduct'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\Product|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function createProduct($product_create = null, string $contentType = self::contentTypes['createProduct'][0])
    {
        list($response) = $this->createProductWithHttpInfo($product_create, $contentType);
        return $response;
    }

    /**
     * Operation createProductWithHttpInfo
     *
     * Create product
     *
     * @param  \Purelines\WhapiSdk\Model\ProductCreate|null $product_create Request body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProduct'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\Product|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProductWithHttpInfo($product_create = null, string $contentType = self::contentTypes['createProduct'][0])
    {
        $request = $this->createProductRequest($product_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\Product',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\Product',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\Product',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation createProductAsync
     *
     * Create product
     *
     * @param  \Purelines\WhapiSdk\Model\ProductCreate|null $product_create Request body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProductAsync($product_create = null, string $contentType = self::contentTypes['createProduct'][0])
    {
        return $this->createProductAsyncWithHttpInfo($product_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation createProductAsyncWithHttpInfo
     *
     * Create product
     *
     * @param  \Purelines\WhapiSdk\Model\ProductCreate|null $product_create Request body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProductAsyncWithHttpInfo($product_create = null, string $contentType = self::contentTypes['createProduct'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\Product';
        $request = $this->createProductRequest($product_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'createProduct'
     *
     * @param  \Purelines\WhapiSdk\Model\ProductCreate|null $product_create Request body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createProductRequest($product_create = null, string $contentType = self::contentTypes['createProduct'][0])
    {



        $resourcePath = '/business/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($product_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($product_create));
            } else {
                $httpBody = $product_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation deleteCollection
     *
     * Delete collection
     *
     * @param  string $collection_id Collection ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCollection'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function deleteCollection($collection_id, string $contentType = self::contentTypes['deleteCollection'][0])
    {
        list($response) = $this->deleteCollectionWithHttpInfo($collection_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteCollectionWithHttpInfo
     *
     * Delete collection
     *
     * @param  string $collection_id Collection ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCollection'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCollectionWithHttpInfo($collection_id, string $contentType = self::contentTypes['deleteCollection'][0])
    {
        $request = $this->deleteCollectionRequest($collection_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseSuccess',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation deleteCollectionAsync
     *
     * Delete collection
     *
     * @param  string $collection_id Collection ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCollectionAsync($collection_id, string $contentType = self::contentTypes['deleteCollection'][0])
    {
        return $this->deleteCollectionAsyncWithHttpInfo($collection_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation deleteCollectionAsyncWithHttpInfo
     *
     * Delete collection
     *
     * @param  string $collection_id Collection ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCollectionAsyncWithHttpInfo($collection_id, string $contentType = self::contentTypes['deleteCollection'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseSuccess';
        $request = $this->deleteCollectionRequest($collection_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'deleteCollection'
     *
     * @param  string $collection_id Collection ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCollectionRequest($collection_id, string $contentType = self::contentTypes['deleteCollection'][0])
    {

        // verify the required parameter 'collection_id' is set
        if ($collection_id === null || (is_array($collection_id) && count($collection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling deleteCollection',
            );
        }


        $resourcePath = '/business/collections/{CollectionID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CollectionID' . '}',
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation deleteProduct
     *
     * Delete product
     *
     * @param  string $product_id Product ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProduct'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function deleteProduct($product_id, string $contentType = self::contentTypes['deleteProduct'][0])
    {
        list($response) = $this->deleteProductWithHttpInfo($product_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteProductWithHttpInfo
     *
     * Delete product
     *
     * @param  string $product_id Product ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProduct'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProductWithHttpInfo($product_id, string $contentType = self::contentTypes['deleteProduct'][0])
    {
        $request = $this->deleteProductRequest($product_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseSuccess',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation deleteProductAsync
     *
     * Delete product
     *
     * @param  string $product_id Product ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProductAsync($product_id, string $contentType = self::contentTypes['deleteProduct'][0])
    {
        return $this->deleteProductAsyncWithHttpInfo($product_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation deleteProductAsyncWithHttpInfo
     *
     * Delete product
     *
     * @param  string $product_id Product ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProductAsyncWithHttpInfo($product_id, string $contentType = self::contentTypes['deleteProduct'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseSuccess';
        $request = $this->deleteProductRequest($product_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'deleteProduct'
     *
     * @param  string $product_id Product ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteProductRequest($product_id, string $contentType = self::contentTypes['deleteProduct'][0])
    {

        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_id when calling deleteProduct',
            );
        }
        if (!preg_match("/^([\\d]{10,18})?$/", $product_id)) {
            throw new \InvalidArgumentException("invalid value for \"product_id\" when calling BusinessApi.deleteProduct, must conform to the pattern /^([\\d]{10,18})?$/.");
        }


        $resourcePath = '/business/products/{ProductID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ProductID' . '}',
                ObjectSerializer::toPathValue($product_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation editBusinessProfile
     *
     * Edit your Business Profile
     *
     * @param  \Purelines\WhapiSdk\Model\BusinessProfileCustom|null $business_profile_custom Request body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editBusinessProfile'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function editBusinessProfile($business_profile_custom = null, string $contentType = self::contentTypes['editBusinessProfile'][0])
    {
        list($response) = $this->editBusinessProfileWithHttpInfo($business_profile_custom, $contentType);
        return $response;
    }

    /**
     * Operation editBusinessProfileWithHttpInfo
     *
     * Edit your Business Profile
     *
     * @param  \Purelines\WhapiSdk\Model\BusinessProfileCustom|null $business_profile_custom Request body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editBusinessProfile'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function editBusinessProfileWithHttpInfo($business_profile_custom = null, string $contentType = self::contentTypes['editBusinessProfile'][0])
    {
        $request = $this->editBusinessProfileRequest($business_profile_custom, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseSuccess',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation editBusinessProfileAsync
     *
     * Edit your Business Profile
     *
     * @param  \Purelines\WhapiSdk\Model\BusinessProfileCustom|null $business_profile_custom Request body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editBusinessProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editBusinessProfileAsync($business_profile_custom = null, string $contentType = self::contentTypes['editBusinessProfile'][0])
    {
        return $this->editBusinessProfileAsyncWithHttpInfo($business_profile_custom, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation editBusinessProfileAsyncWithHttpInfo
     *
     * Edit your Business Profile
     *
     * @param  \Purelines\WhapiSdk\Model\BusinessProfileCustom|null $business_profile_custom Request body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editBusinessProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editBusinessProfileAsyncWithHttpInfo($business_profile_custom = null, string $contentType = self::contentTypes['editBusinessProfile'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseSuccess';
        $request = $this->editBusinessProfileRequest($business_profile_custom, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'editBusinessProfile'
     *
     * @param  \Purelines\WhapiSdk\Model\BusinessProfileCustom|null $business_profile_custom Request body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editBusinessProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function editBusinessProfileRequest($business_profile_custom = null, string $contentType = self::contentTypes['editBusinessProfile'][0])
    {



        $resourcePath = '/business';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($business_profile_custom)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($business_profile_custom));
            } else {
                $httpBody = $business_profile_custom;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation editCollection
     *
     * Edit collection
     *
     * @param  string $collection_id Collection ID (required)
     * @param  \Purelines\WhapiSdk\Model\BusinessCollectionEdit $business_collection_edit Business collection edit parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editCollection'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\BusinessCollectionEditResult|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function editCollection($collection_id, $business_collection_edit, string $contentType = self::contentTypes['editCollection'][0])
    {
        list($response) = $this->editCollectionWithHttpInfo($collection_id, $business_collection_edit, $contentType);
        return $response;
    }

    /**
     * Operation editCollectionWithHttpInfo
     *
     * Edit collection
     *
     * @param  string $collection_id Collection ID (required)
     * @param  \Purelines\WhapiSdk\Model\BusinessCollectionEdit $business_collection_edit Business collection edit parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editCollection'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\BusinessCollectionEditResult|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function editCollectionWithHttpInfo($collection_id, $business_collection_edit, string $contentType = self::contentTypes['editCollection'][0])
    {
        $request = $this->editCollectionRequest($collection_id, $business_collection_edit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\BusinessCollectionEditResult',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\BusinessCollectionEditResult',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\BusinessCollectionEditResult',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation editCollectionAsync
     *
     * Edit collection
     *
     * @param  string $collection_id Collection ID (required)
     * @param  \Purelines\WhapiSdk\Model\BusinessCollectionEdit $business_collection_edit Business collection edit parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editCollectionAsync($collection_id, $business_collection_edit, string $contentType = self::contentTypes['editCollection'][0])
    {
        return $this->editCollectionAsyncWithHttpInfo($collection_id, $business_collection_edit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation editCollectionAsyncWithHttpInfo
     *
     * Edit collection
     *
     * @param  string $collection_id Collection ID (required)
     * @param  \Purelines\WhapiSdk\Model\BusinessCollectionEdit $business_collection_edit Business collection edit parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editCollectionAsyncWithHttpInfo($collection_id, $business_collection_edit, string $contentType = self::contentTypes['editCollection'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\BusinessCollectionEditResult';
        $request = $this->editCollectionRequest($collection_id, $business_collection_edit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'editCollection'
     *
     * @param  string $collection_id Collection ID (required)
     * @param  \Purelines\WhapiSdk\Model\BusinessCollectionEdit $business_collection_edit Business collection edit parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function editCollectionRequest($collection_id, $business_collection_edit, string $contentType = self::contentTypes['editCollection'][0])
    {

        // verify the required parameter 'collection_id' is set
        if ($collection_id === null || (is_array($collection_id) && count($collection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling editCollection',
            );
        }

        // verify the required parameter 'business_collection_edit' is set
        if ($business_collection_edit === null || (is_array($business_collection_edit) && count($business_collection_edit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_collection_edit when calling editCollection',
            );
        }


        $resourcePath = '/business/collections/{CollectionID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CollectionID' . '}',
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($business_collection_edit)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($business_collection_edit));
            } else {
                $httpBody = $business_collection_edit;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation getBusinessProfile
     *
     * Get business profile
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBusinessProfile'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\BusinessProfile|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function getBusinessProfile(string $contentType = self::contentTypes['getBusinessProfile'][0])
    {
        list($response) = $this->getBusinessProfileWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getBusinessProfileWithHttpInfo
     *
     * Get business profile
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBusinessProfile'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\BusinessProfile|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBusinessProfileWithHttpInfo(string $contentType = self::contentTypes['getBusinessProfile'][0])
    {
        $request = $this->getBusinessProfileRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\BusinessProfile',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\BusinessProfile',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\BusinessProfile',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation getBusinessProfileAsync
     *
     * Get business profile
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBusinessProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessProfileAsync(string $contentType = self::contentTypes['getBusinessProfile'][0])
    {
        return $this->getBusinessProfileAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation getBusinessProfileAsyncWithHttpInfo
     *
     * Get business profile
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBusinessProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessProfileAsyncWithHttpInfo(string $contentType = self::contentTypes['getBusinessProfile'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\BusinessProfile';
        $request = $this->getBusinessProfileRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'getBusinessProfile'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBusinessProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBusinessProfileRequest(string $contentType = self::contentTypes['getBusinessProfile'][0])
    {


        $resourcePath = '/business';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation getCollection
     *
     * Get collection
     *
     * @param  string $collection_id Collection ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCollection'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\BusinessCollection|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function getCollection($collection_id, string $contentType = self::contentTypes['getCollection'][0])
    {
        list($response) = $this->getCollectionWithHttpInfo($collection_id, $contentType);
        return $response;
    }

    /**
     * Operation getCollectionWithHttpInfo
     *
     * Get collection
     *
     * @param  string $collection_id Collection ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCollection'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\BusinessCollection|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCollectionWithHttpInfo($collection_id, string $contentType = self::contentTypes['getCollection'][0])
    {
        $request = $this->getCollectionRequest($collection_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\BusinessCollection',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\BusinessCollection',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\BusinessCollection',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation getCollectionAsync
     *
     * Get collection
     *
     * @param  string $collection_id Collection ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionAsync($collection_id, string $contentType = self::contentTypes['getCollection'][0])
    {
        return $this->getCollectionAsyncWithHttpInfo($collection_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation getCollectionAsyncWithHttpInfo
     *
     * Get collection
     *
     * @param  string $collection_id Collection ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionAsyncWithHttpInfo($collection_id, string $contentType = self::contentTypes['getCollection'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\BusinessCollection';
        $request = $this->getCollectionRequest($collection_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'getCollection'
     *
     * @param  string $collection_id Collection ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCollectionRequest($collection_id, string $contentType = self::contentTypes['getCollection'][0])
    {

        // verify the required parameter 'collection_id' is set
        if ($collection_id === null || (is_array($collection_id) && count($collection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling getCollection',
            );
        }


        $resourcePath = '/business/collections/{CollectionID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CollectionID' . '}',
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation getCollectionProductList
     *
     * Get collection
     *
     * @param  string $collection_id Collection ID (required)
     * @param  float|null $products_count Count of products in collection to return (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCollectionProductList'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ProductsList|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function getCollectionProductList($collection_id, $products_count = 10, string $contentType = self::contentTypes['getCollectionProductList'][0])
    {
        list($response) = $this->getCollectionProductListWithHttpInfo($collection_id, $products_count, $contentType);
        return $response;
    }

    /**
     * Operation getCollectionProductListWithHttpInfo
     *
     * Get collection
     *
     * @param  string $collection_id Collection ID (required)
     * @param  float|null $products_count Count of products in collection to return (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCollectionProductList'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ProductsList|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCollectionProductListWithHttpInfo($collection_id, $products_count = 10, string $contentType = self::contentTypes['getCollectionProductList'][0])
    {
        $request = $this->getCollectionProductListRequest($collection_id, $products_count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ProductsList',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ProductsList',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ProductsList',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation getCollectionProductListAsync
     *
     * Get collection
     *
     * @param  string $collection_id Collection ID (required)
     * @param  float|null $products_count Count of products in collection to return (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCollectionProductList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionProductListAsync($collection_id, $products_count = 10, string $contentType = self::contentTypes['getCollectionProductList'][0])
    {
        return $this->getCollectionProductListAsyncWithHttpInfo($collection_id, $products_count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation getCollectionProductListAsyncWithHttpInfo
     *
     * Get collection
     *
     * @param  string $collection_id Collection ID (required)
     * @param  float|null $products_count Count of products in collection to return (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCollectionProductList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionProductListAsyncWithHttpInfo($collection_id, $products_count = 10, string $contentType = self::contentTypes['getCollectionProductList'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ProductsList';
        $request = $this->getCollectionProductListRequest($collection_id, $products_count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'getCollectionProductList'
     *
     * @param  string $collection_id Collection ID (required)
     * @param  float|null $products_count Count of products in collection to return (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCollectionProductList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCollectionProductListRequest($collection_id, $products_count = 10, string $contentType = self::contentTypes['getCollectionProductList'][0])
    {

        // verify the required parameter 'collection_id' is set
        if ($collection_id === null || (is_array($collection_id) && count($collection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling getCollectionProductList',
            );
        }

        if ($products_count !== null && $products_count > 30) {
            throw new \InvalidArgumentException('invalid value for "$products_count" when calling BusinessApi.getCollectionProductList, must be smaller than or equal to 30.');
        }
        if ($products_count !== null && $products_count < 1) {
            throw new \InvalidArgumentException('invalid value for "$products_count" when calling BusinessApi.getCollectionProductList, must be bigger than or equal to 1.');
        }


        $resourcePath = '/business/collections/{CollectionID}/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $products_count,
            'products_count', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);


        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CollectionID' . '}',
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation getCollectionsList
     *
     * Get collections
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCollectionsList'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\BusinessCollectionList|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function getCollectionsList($count = 100, $offset = null, string $contentType = self::contentTypes['getCollectionsList'][0])
    {
        list($response) = $this->getCollectionsListWithHttpInfo($count, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getCollectionsListWithHttpInfo
     *
     * Get collections
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCollectionsList'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\BusinessCollectionList|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCollectionsListWithHttpInfo($count = 100, $offset = null, string $contentType = self::contentTypes['getCollectionsList'][0])
    {
        $request = $this->getCollectionsListRequest($count, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\BusinessCollectionList',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\BusinessCollectionList',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\BusinessCollectionList',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation getCollectionsListAsync
     *
     * Get collections
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCollectionsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionsListAsync($count = 100, $offset = null, string $contentType = self::contentTypes['getCollectionsList'][0])
    {
        return $this->getCollectionsListAsyncWithHttpInfo($count, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation getCollectionsListAsyncWithHttpInfo
     *
     * Get collections
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCollectionsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionsListAsyncWithHttpInfo($count = 100, $offset = null, string $contentType = self::contentTypes['getCollectionsList'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\BusinessCollectionList';
        $request = $this->getCollectionsListRequest($count, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'getCollectionsList'
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCollectionsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCollectionsListRequest($count = 100, $offset = null, string $contentType = self::contentTypes['getCollectionsList'][0])
    {

        if ($count !== null && $count > 500) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling BusinessApi.getCollectionsList, must be smaller than or equal to 500.');
        }
        if ($count !== null && $count < 1) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling BusinessApi.getCollectionsList, must be bigger than or equal to 1.');
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling BusinessApi.getCollectionsList, must be bigger than or equal to 0.');
        }


        $resourcePath = '/business/collections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation getCollectionsProductsList
     *
     * Get collections products
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  float|null $products_count Count of products in collection to return (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCollectionsProductsList'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\BusinessCollectionList|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     * @deprecated
     */
    public function getCollectionsProductsList($count = 100, $offset = null, $products_count = 10, string $contentType = self::contentTypes['getCollectionsProductsList'][0])
    {
        list($response) = $this->getCollectionsProductsListWithHttpInfo($count, $offset, $products_count, $contentType);
        return $response;
    }

    /**
     * Operation getCollectionsProductsListWithHttpInfo
     *
     * Get collections products
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  float|null $products_count Count of products in collection to return (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCollectionsProductsList'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\BusinessCollectionList|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getCollectionsProductsListWithHttpInfo($count = 100, $offset = null, $products_count = 10, string $contentType = self::contentTypes['getCollectionsProductsList'][0])
    {
        $request = $this->getCollectionsProductsListRequest($count, $offset, $products_count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\BusinessCollectionList',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\BusinessCollectionList',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\BusinessCollectionList',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation getCollectionsProductsListAsync
     *
     * Get collections products
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  float|null $products_count Count of products in collection to return (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCollectionsProductsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getCollectionsProductsListAsync($count = 100, $offset = null, $products_count = 10, string $contentType = self::contentTypes['getCollectionsProductsList'][0])
    {
        return $this->getCollectionsProductsListAsyncWithHttpInfo($count, $offset, $products_count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation getCollectionsProductsListAsyncWithHttpInfo
     *
     * Get collections products
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  float|null $products_count Count of products in collection to return (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCollectionsProductsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getCollectionsProductsListAsyncWithHttpInfo($count = 100, $offset = null, $products_count = 10, string $contentType = self::contentTypes['getCollectionsProductsList'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\BusinessCollectionList';
        $request = $this->getCollectionsProductsListRequest($count, $offset, $products_count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'getCollectionsProductsList'
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  float|null $products_count Count of products in collection to return (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCollectionsProductsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getCollectionsProductsListRequest($count = 100, $offset = null, $products_count = 10, string $contentType = self::contentTypes['getCollectionsProductsList'][0])
    {

        if ($count !== null && $count > 500) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling BusinessApi.getCollectionsProductsList, must be smaller than or equal to 500.');
        }
        if ($count !== null && $count < 1) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling BusinessApi.getCollectionsProductsList, must be bigger than or equal to 1.');
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling BusinessApi.getCollectionsProductsList, must be bigger than or equal to 0.');
        }

        if ($products_count !== null && $products_count > 30) {
            throw new \InvalidArgumentException('invalid value for "$products_count" when calling BusinessApi.getCollectionsProductsList, must be smaller than or equal to 30.');
        }
        if ($products_count !== null && $products_count < 1) {
            throw new \InvalidArgumentException('invalid value for "$products_count" when calling BusinessApi.getCollectionsProductsList, must be bigger than or equal to 1.');
        }


        $resourcePath = '/business/collections/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $products_count,
            'products_count', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation getContactProducts
     *
     * Get products by Contact ID
     *
     * @param  string $contact_id Contact ID (required)
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContactProducts'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ProductsList|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function getContactProducts($contact_id, $count = 100, $offset = null, string $contentType = self::contentTypes['getContactProducts'][0])
    {
        list($response) = $this->getContactProductsWithHttpInfo($contact_id, $count, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getContactProductsWithHttpInfo
     *
     * Get products by Contact ID
     *
     * @param  string $contact_id Contact ID (required)
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContactProducts'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ProductsList|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContactProductsWithHttpInfo($contact_id, $count = 100, $offset = null, string $contentType = self::contentTypes['getContactProducts'][0])
    {
        $request = $this->getContactProductsRequest($contact_id, $count, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ProductsList',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ProductsList',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ProductsList',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation getContactProductsAsync
     *
     * Get products by Contact ID
     *
     * @param  string $contact_id Contact ID (required)
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContactProducts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContactProductsAsync($contact_id, $count = 100, $offset = null, string $contentType = self::contentTypes['getContactProducts'][0])
    {
        return $this->getContactProductsAsyncWithHttpInfo($contact_id, $count, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation getContactProductsAsyncWithHttpInfo
     *
     * Get products by Contact ID
     *
     * @param  string $contact_id Contact ID (required)
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContactProducts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContactProductsAsyncWithHttpInfo($contact_id, $count = 100, $offset = null, string $contentType = self::contentTypes['getContactProducts'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ProductsList';
        $request = $this->getContactProductsRequest($contact_id, $count, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'getContactProducts'
     *
     * @param  string $contact_id Contact ID (required)
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContactProducts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getContactProductsRequest($contact_id, $count = 100, $offset = null, string $contentType = self::contentTypes['getContactProducts'][0])
    {

        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_id when calling getContactProducts',
            );
        }
        if (!preg_match("/^([\\d]{7,15})?$/", $contact_id)) {
            throw new \InvalidArgumentException("invalid value for \"contact_id\" when calling BusinessApi.getContactProducts, must conform to the pattern /^([\\d]{7,15})?$/.");
        }

        if ($count !== null && $count > 500) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling BusinessApi.getContactProducts, must be smaller than or equal to 500.');
        }
        if ($count !== null && $count < 1) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling BusinessApi.getContactProducts, must be bigger than or equal to 1.');
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling BusinessApi.getContactProducts, must be bigger than or equal to 0.');
        }


        $resourcePath = '/business/{ContactID}/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);


        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ContactID' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation getOrderItems
     *
     * Get order items
     *
     * @param  string $order_id Order ID (required)
     * @param  string|null $order_token Base64 token from order for receiving information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderItems'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\OrderItems|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function getOrderItems($order_id, $order_token = null, string $contentType = self::contentTypes['getOrderItems'][0])
    {
        list($response) = $this->getOrderItemsWithHttpInfo($order_id, $order_token, $contentType);
        return $response;
    }

    /**
     * Operation getOrderItemsWithHttpInfo
     *
     * Get order items
     *
     * @param  string $order_id Order ID (required)
     * @param  string|null $order_token Base64 token from order for receiving information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderItems'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\OrderItems|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderItemsWithHttpInfo($order_id, $order_token = null, string $contentType = self::contentTypes['getOrderItems'][0])
    {
        $request = $this->getOrderItemsRequest($order_id, $order_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\OrderItems',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\OrderItems',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\OrderItems',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation getOrderItemsAsync
     *
     * Get order items
     *
     * @param  string $order_id Order ID (required)
     * @param  string|null $order_token Base64 token from order for receiving information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderItemsAsync($order_id, $order_token = null, string $contentType = self::contentTypes['getOrderItems'][0])
    {
        return $this->getOrderItemsAsyncWithHttpInfo($order_id, $order_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation getOrderItemsAsyncWithHttpInfo
     *
     * Get order items
     *
     * @param  string $order_id Order ID (required)
     * @param  string|null $order_token Base64 token from order for receiving information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderItemsAsyncWithHttpInfo($order_id, $order_token = null, string $contentType = self::contentTypes['getOrderItems'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\OrderItems';
        $request = $this->getOrderItemsRequest($order_id, $order_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'getOrderItems'
     *
     * @param  string $order_id Order ID (required)
     * @param  string|null $order_token Base64 token from order for receiving information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrderItemsRequest($order_id, $order_token = null, string $contentType = self::contentTypes['getOrderItems'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling getOrderItems',
            );
        }
        if (!preg_match("/^([\\d]{10,18})?$/", $order_id)) {
            throw new \InvalidArgumentException("invalid value for \"order_id\" when calling BusinessApi.getOrderItems, must conform to the pattern /^([\\d]{10,18})?$/.");
        }



        $resourcePath = '/business/orders/{OrderID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_token,
            'order_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'OrderID' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation getProduct
     *
     * Get product
     *
     * @param  string $product_id Product ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProduct'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\Product|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function getProduct($product_id, string $contentType = self::contentTypes['getProduct'][0])
    {
        list($response) = $this->getProductWithHttpInfo($product_id, $contentType);
        return $response;
    }

    /**
     * Operation getProductWithHttpInfo
     *
     * Get product
     *
     * @param  string $product_id Product ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProduct'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\Product|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductWithHttpInfo($product_id, string $contentType = self::contentTypes['getProduct'][0])
    {
        $request = $this->getProductRequest($product_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\Product',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\Product',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\Product',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation getProductAsync
     *
     * Get product
     *
     * @param  string $product_id Product ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductAsync($product_id, string $contentType = self::contentTypes['getProduct'][0])
    {
        return $this->getProductAsyncWithHttpInfo($product_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation getProductAsyncWithHttpInfo
     *
     * Get product
     *
     * @param  string $product_id Product ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductAsyncWithHttpInfo($product_id, string $contentType = self::contentTypes['getProduct'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\Product';
        $request = $this->getProductRequest($product_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'getProduct'
     *
     * @param  string $product_id Product ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductRequest($product_id, string $contentType = self::contentTypes['getProduct'][0])
    {

        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_id when calling getProduct',
            );
        }
        if (!preg_match("/^([\\d]{10,18})?$/", $product_id)) {
            throw new \InvalidArgumentException("invalid value for \"product_id\" when calling BusinessApi.getProduct, must conform to the pattern /^([\\d]{10,18})?$/.");
        }


        $resourcePath = '/business/products/{ProductID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ProductID' . '}',
                ObjectSerializer::toPathValue($product_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation getProducts
     *
     * Get products
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProducts'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ProductsList|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function getProducts($count = 100, $offset = null, string $contentType = self::contentTypes['getProducts'][0])
    {
        list($response) = $this->getProductsWithHttpInfo($count, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getProductsWithHttpInfo
     *
     * Get products
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProducts'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ProductsList|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductsWithHttpInfo($count = 100, $offset = null, string $contentType = self::contentTypes['getProducts'][0])
    {
        $request = $this->getProductsRequest($count, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ProductsList',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ProductsList',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ProductsList',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation getProductsAsync
     *
     * Get products
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProducts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductsAsync($count = 100, $offset = null, string $contentType = self::contentTypes['getProducts'][0])
    {
        return $this->getProductsAsyncWithHttpInfo($count, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation getProductsAsyncWithHttpInfo
     *
     * Get products
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProducts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductsAsyncWithHttpInfo($count = 100, $offset = null, string $contentType = self::contentTypes['getProducts'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ProductsList';
        $request = $this->getProductsRequest($count, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'getProducts'
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProducts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductsRequest($count = 100, $offset = null, string $contentType = self::contentTypes['getProducts'][0])
    {

        if ($count !== null && $count > 500) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling BusinessApi.getProducts, must be smaller than or equal to 500.');
        }
        if ($count !== null && $count < 1) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling BusinessApi.getProducts, must be bigger than or equal to 1.');
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling BusinessApi.getProducts, must be bigger than or equal to 0.');
        }


        $resourcePath = '/business/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation sendCatalog
     *
     * Send catalog by Contact ID (phone number)
     *
     * @param  string $contact_id Contact ID (required)
     * @param  \Purelines\WhapiSdk\Model\SenderCatalogByID $sender_catalog_by_id Message catalog (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendCatalog'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\SentMessage|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function sendCatalog($contact_id, $sender_catalog_by_id, string $contentType = self::contentTypes['sendCatalog'][0])
    {
        list($response) = $this->sendCatalogWithHttpInfo($contact_id, $sender_catalog_by_id, $contentType);
        return $response;
    }

    /**
     * Operation sendCatalogWithHttpInfo
     *
     * Send catalog by Contact ID (phone number)
     *
     * @param  string $contact_id Contact ID (required)
     * @param  \Purelines\WhapiSdk\Model\SenderCatalogByID $sender_catalog_by_id Message catalog (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendCatalog'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\SentMessage|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendCatalogWithHttpInfo($contact_id, $sender_catalog_by_id, string $contentType = self::contentTypes['sendCatalog'][0])
    {
        $request = $this->sendCatalogRequest($contact_id, $sender_catalog_by_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\SentMessage',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\SentMessage',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\SentMessage',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation sendCatalogAsync
     *
     * Send catalog by Contact ID (phone number)
     *
     * @param  string $contact_id Contact ID (required)
     * @param  \Purelines\WhapiSdk\Model\SenderCatalogByID $sender_catalog_by_id Message catalog (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendCatalog'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendCatalogAsync($contact_id, $sender_catalog_by_id, string $contentType = self::contentTypes['sendCatalog'][0])
    {
        return $this->sendCatalogAsyncWithHttpInfo($contact_id, $sender_catalog_by_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation sendCatalogAsyncWithHttpInfo
     *
     * Send catalog by Contact ID (phone number)
     *
     * @param  string $contact_id Contact ID (required)
     * @param  \Purelines\WhapiSdk\Model\SenderCatalogByID $sender_catalog_by_id Message catalog (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendCatalog'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendCatalogAsyncWithHttpInfo($contact_id, $sender_catalog_by_id, string $contentType = self::contentTypes['sendCatalog'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\SentMessage';
        $request = $this->sendCatalogRequest($contact_id, $sender_catalog_by_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'sendCatalog'
     *
     * @param  string $contact_id Contact ID (required)
     * @param  \Purelines\WhapiSdk\Model\SenderCatalogByID $sender_catalog_by_id Message catalog (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendCatalog'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendCatalogRequest($contact_id, $sender_catalog_by_id, string $contentType = self::contentTypes['sendCatalog'][0])
    {

        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_id when calling sendCatalog',
            );
        }
        if (!preg_match("/^([\\d]{7,15})?$/", $contact_id)) {
            throw new \InvalidArgumentException("invalid value for \"contact_id\" when calling BusinessApi.sendCatalog, must conform to the pattern /^([\\d]{7,15})?$/.");
        }

        // verify the required parameter 'sender_catalog_by_id' is set
        if ($sender_catalog_by_id === null || (is_array($sender_catalog_by_id) && count($sender_catalog_by_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sender_catalog_by_id when calling sendCatalog',
            );
        }


        $resourcePath = '/business/catalogs/{ContactID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ContactID' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($sender_catalog_by_id)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sender_catalog_by_id));
            } else {
                $httpBody = $sender_catalog_by_id;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation sendProduct
     *
     * Send product
     *
     * @param  string $product_id Product ID (required)
     * @param  \Purelines\WhapiSdk\Model\SenderProductFromCatalog $sender_product_from_catalog Message product (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendProduct'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\SentMessage|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function sendProduct($product_id, $sender_product_from_catalog, string $contentType = self::contentTypes['sendProduct'][0])
    {
        list($response) = $this->sendProductWithHttpInfo($product_id, $sender_product_from_catalog, $contentType);
        return $response;
    }

    /**
     * Operation sendProductWithHttpInfo
     *
     * Send product
     *
     * @param  string $product_id Product ID (required)
     * @param  \Purelines\WhapiSdk\Model\SenderProductFromCatalog $sender_product_from_catalog Message product (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendProduct'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\SentMessage|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendProductWithHttpInfo($product_id, $sender_product_from_catalog, string $contentType = self::contentTypes['sendProduct'][0])
    {
        $request = $this->sendProductRequest($product_id, $sender_product_from_catalog, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\SentMessage',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\SentMessage',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\SentMessage',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation sendProductAsync
     *
     * Send product
     *
     * @param  string $product_id Product ID (required)
     * @param  \Purelines\WhapiSdk\Model\SenderProductFromCatalog $sender_product_from_catalog Message product (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendProductAsync($product_id, $sender_product_from_catalog, string $contentType = self::contentTypes['sendProduct'][0])
    {
        return $this->sendProductAsyncWithHttpInfo($product_id, $sender_product_from_catalog, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation sendProductAsyncWithHttpInfo
     *
     * Send product
     *
     * @param  string $product_id Product ID (required)
     * @param  \Purelines\WhapiSdk\Model\SenderProductFromCatalog $sender_product_from_catalog Message product (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendProductAsyncWithHttpInfo($product_id, $sender_product_from_catalog, string $contentType = self::contentTypes['sendProduct'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\SentMessage';
        $request = $this->sendProductRequest($product_id, $sender_product_from_catalog, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'sendProduct'
     *
     * @param  string $product_id Product ID (required)
     * @param  \Purelines\WhapiSdk\Model\SenderProductFromCatalog $sender_product_from_catalog Message product (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendProductRequest($product_id, $sender_product_from_catalog, string $contentType = self::contentTypes['sendProduct'][0])
    {

        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_id when calling sendProduct',
            );
        }
        if (!preg_match("/^([\\d]{10,18})?$/", $product_id)) {
            throw new \InvalidArgumentException("invalid value for \"product_id\" when calling BusinessApi.sendProduct, must conform to the pattern /^([\\d]{10,18})?$/.");
        }

        // verify the required parameter 'sender_product_from_catalog' is set
        if ($sender_product_from_catalog === null || (is_array($sender_product_from_catalog) && count($sender_product_from_catalog) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sender_product_from_catalog when calling sendProduct',
            );
        }


        $resourcePath = '/business/products/{ProductID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ProductID' . '}',
                ObjectSerializer::toPathValue($product_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($sender_product_from_catalog)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sender_product_from_catalog));
            } else {
                $httpBody = $sender_product_from_catalog;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation updateProduct
     *
     * Update product
     *
     * @param  string $product_id Product ID (required)
     * @param  \Purelines\WhapiSdk\Model\ProductEdit $product_edit Message product (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProduct'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\Product|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function updateProduct($product_id, $product_edit, string $contentType = self::contentTypes['updateProduct'][0])
    {
        list($response) = $this->updateProductWithHttpInfo($product_id, $product_edit, $contentType);
        return $response;
    }

    /**
     * Operation updateProductWithHttpInfo
     *
     * Update product
     *
     * @param  string $product_id Product ID (required)
     * @param  \Purelines\WhapiSdk\Model\ProductEdit $product_edit Message product (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProduct'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\Product|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProductWithHttpInfo($product_id, $product_edit, string $contentType = self::contentTypes['updateProduct'][0])
    {
        $request = $this->updateProductRequest($product_id, $product_edit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\Product',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\Product',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\Product',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation updateProductAsync
     *
     * Update product
     *
     * @param  string $product_id Product ID (required)
     * @param  \Purelines\WhapiSdk\Model\ProductEdit $product_edit Message product (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProductAsync($product_id, $product_edit, string $contentType = self::contentTypes['updateProduct'][0])
    {
        return $this->updateProductAsyncWithHttpInfo($product_id, $product_edit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation updateProductAsyncWithHttpInfo
     *
     * Update product
     *
     * @param  string $product_id Product ID (required)
     * @param  \Purelines\WhapiSdk\Model\ProductEdit $product_edit Message product (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProductAsyncWithHttpInfo($product_id, $product_edit, string $contentType = self::contentTypes['updateProduct'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\Product';
        $request = $this->updateProductRequest($product_id, $product_edit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'updateProduct'
     *
     * @param  string $product_id Product ID (required)
     * @param  \Purelines\WhapiSdk\Model\ProductEdit $product_edit Message product (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateProductRequest($product_id, $product_edit, string $contentType = self::contentTypes['updateProduct'][0])
    {

        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_id when calling updateProduct',
            );
        }
        if (!preg_match("/^([\\d]{10,18})?$/", $product_id)) {
            throw new \InvalidArgumentException("invalid value for \"product_id\" when calling BusinessApi.updateProduct, must conform to the pattern /^([\\d]{10,18})?$/.");
        }

        // verify the required parameter 'product_edit' is set
        if ($product_edit === null || (is_array($product_edit) && count($product_edit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_edit when calling updateProduct',
            );
        }


        $resourcePath = '/business/products/{ProductID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ProductID' . '}',
                ObjectSerializer::toPathValue($product_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($product_edit)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($product_edit));
            } else {
                $httpBody = $product_edit;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        if ($this->config->getCertFile()) {
            $options[RequestOptions::CERT] = $this->config->getCertFile();
        }

        if ($this->config->getKeyFile()) {
            $options[RequestOptions::SSL_KEY] = $this->config->getKeyFile();
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response,
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri(),
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content,
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders(),
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode,
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
