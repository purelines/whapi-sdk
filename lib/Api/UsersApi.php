<?php

/**
 * UsersApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Whapi API
 *
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Purelines\WhapiSdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Purelines\WhapiSdk\ApiException;
use Purelines\WhapiSdk\Configuration;
use Purelines\WhapiSdk\FormDataProcessor;
use Purelines\WhapiSdk\HeaderSelector;
use Purelines\WhapiSdk\ObjectSerializer;

/**
 * UsersApi Class Doc Comment
 *
 * @category Class
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UsersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'changeStatus' => [
            'application/json',
        ],
        'getUserProfile' => [
            'application/json',
        ],
        'loginUser' => [
            'application/json',
        ],
        'loginUserImage' => [
            'application/json',
        ],
        'loginUserRowData' => [
            'application/json',
        ],
        'loginUserViaAuthCode' => [
            'application/json',
        ],
        'logoutUser' => [
            'application/json',
        ],
        'updateUserProfile' => [
            'application/json',
            'multipart/form-data',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0,
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation changeStatus
     *
     * Change status text
     *
     * @param  \Purelines\WhapiSdk\Model\ChangeStatusRequest $change_status_request New about text (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changeStatus'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function changeStatus($change_status_request, string $contentType = self::contentTypes['changeStatus'][0])
    {
        list($response) = $this->changeStatusWithHttpInfo($change_status_request, $contentType);
        return $response;
    }

    /**
     * Operation changeStatusWithHttpInfo
     *
     * Change status text
     *
     * @param  \Purelines\WhapiSdk\Model\ChangeStatusRequest $change_status_request New about text (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changeStatus'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function changeStatusWithHttpInfo($change_status_request, string $contentType = self::contentTypes['changeStatus'][0])
    {
        $request = $this->changeStatusRequest($change_status_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseSuccess',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation changeStatusAsync
     *
     * Change status text
     *
     * @param  \Purelines\WhapiSdk\Model\ChangeStatusRequest $change_status_request New about text (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changeStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changeStatusAsync($change_status_request, string $contentType = self::contentTypes['changeStatus'][0])
    {
        return $this->changeStatusAsyncWithHttpInfo($change_status_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation changeStatusAsyncWithHttpInfo
     *
     * Change status text
     *
     * @param  \Purelines\WhapiSdk\Model\ChangeStatusRequest $change_status_request New about text (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changeStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changeStatusAsyncWithHttpInfo($change_status_request, string $contentType = self::contentTypes['changeStatus'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseSuccess';
        $request = $this->changeStatusRequest($change_status_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'changeStatus'
     *
     * @param  \Purelines\WhapiSdk\Model\ChangeStatusRequest $change_status_request New about text (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changeStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function changeStatusRequest($change_status_request, string $contentType = self::contentTypes['changeStatus'][0])
    {

        // verify the required parameter 'change_status_request' is set
        if ($change_status_request === null || (is_array($change_status_request) && count($change_status_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $change_status_request when calling changeStatus',
            );
        }


        $resourcePath = '/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($change_status_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($change_status_request));
            } else {
                $httpBody = $change_status_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation getUserProfile
     *
     * User info
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserProfile'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\UserProfile|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function getUserProfile(string $contentType = self::contentTypes['getUserProfile'][0])
    {
        list($response) = $this->getUserProfileWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getUserProfileWithHttpInfo
     *
     * User info
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserProfile'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\UserProfile|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserProfileWithHttpInfo(string $contentType = self::contentTypes['getUserProfile'][0])
    {
        $request = $this->getUserProfileRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\UserProfile',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\UserProfile',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\UserProfile',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation getUserProfileAsync
     *
     * User info
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserProfileAsync(string $contentType = self::contentTypes['getUserProfile'][0])
    {
        return $this->getUserProfileAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation getUserProfileAsyncWithHttpInfo
     *
     * User info
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserProfileAsyncWithHttpInfo(string $contentType = self::contentTypes['getUserProfile'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\UserProfile';
        $request = $this->getUserProfileRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'getUserProfile'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserProfileRequest(string $contentType = self::contentTypes['getUserProfile'][0])
    {


        $resourcePath = '/users/profile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation loginUser
     *
     * Login user with QR-base64
     *
     * @param  bool|null $wakeup If set to false, the channel will not launch (optional, default to true)
     * @param  float|null $size Size of QR-code (optional)
     * @param  float|null $width Width of result image (optional)
     * @param  float|null $height Height of result image (optional)
     * @param  string|null $color_light Background color (optional)
     * @param  string|null $color_dark Color of code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loginUser'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\QR|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function loginUser($wakeup = true, $size = null, $width = null, $height = null, $color_light = null, $color_dark = null, string $contentType = self::contentTypes['loginUser'][0])
    {
        list($response) = $this->loginUserWithHttpInfo($wakeup, $size, $width, $height, $color_light, $color_dark, $contentType);
        return $response;
    }

    /**
     * Operation loginUserWithHttpInfo
     *
     * Login user with QR-base64
     *
     * @param  bool|null $wakeup If set to false, the channel will not launch (optional, default to true)
     * @param  float|null $size Size of QR-code (optional)
     * @param  float|null $width Width of result image (optional)
     * @param  float|null $height Height of result image (optional)
     * @param  string|null $color_light Background color (optional)
     * @param  string|null $color_dark Color of code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loginUser'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\QR|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function loginUserWithHttpInfo($wakeup = true, $size = null, $width = null, $height = null, $color_light = null, $color_dark = null, string $contentType = self::contentTypes['loginUser'][0])
    {
        $request = $this->loginUserRequest($wakeup, $size, $width, $height, $color_light, $color_dark, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\QR',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\QR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\QR',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation loginUserAsync
     *
     * Login user with QR-base64
     *
     * @param  bool|null $wakeup If set to false, the channel will not launch (optional, default to true)
     * @param  float|null $size Size of QR-code (optional)
     * @param  float|null $width Width of result image (optional)
     * @param  float|null $height Height of result image (optional)
     * @param  string|null $color_light Background color (optional)
     * @param  string|null $color_dark Color of code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loginUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loginUserAsync($wakeup = true, $size = null, $width = null, $height = null, $color_light = null, $color_dark = null, string $contentType = self::contentTypes['loginUser'][0])
    {
        return $this->loginUserAsyncWithHttpInfo($wakeup, $size, $width, $height, $color_light, $color_dark, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation loginUserAsyncWithHttpInfo
     *
     * Login user with QR-base64
     *
     * @param  bool|null $wakeup If set to false, the channel will not launch (optional, default to true)
     * @param  float|null $size Size of QR-code (optional)
     * @param  float|null $width Width of result image (optional)
     * @param  float|null $height Height of result image (optional)
     * @param  string|null $color_light Background color (optional)
     * @param  string|null $color_dark Color of code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loginUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loginUserAsyncWithHttpInfo($wakeup = true, $size = null, $width = null, $height = null, $color_light = null, $color_dark = null, string $contentType = self::contentTypes['loginUser'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\QR';
        $request = $this->loginUserRequest($wakeup, $size, $width, $height, $color_light, $color_dark, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'loginUser'
     *
     * @param  bool|null $wakeup If set to false, the channel will not launch (optional, default to true)
     * @param  float|null $size Size of QR-code (optional)
     * @param  float|null $width Width of result image (optional)
     * @param  float|null $height Height of result image (optional)
     * @param  string|null $color_light Background color (optional)
     * @param  string|null $color_dark Color of code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loginUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function loginUserRequest($wakeup = true, $size = null, $width = null, $height = null, $color_light = null, $color_dark = null, string $contentType = self::contentTypes['loginUser'][0])
    {








        $resourcePath = '/users/login';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wakeup,
            'wakeup', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $width,
            'width', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $height,
            'height', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $color_light,
            'color_light', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $color_dark,
            'color_dark', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation loginUserImage
     *
     * Login user with QR-image
     *
     * @param  bool|null $wakeup If set to false, the channel will not launch (optional, default to true)
     * @param  float|null $size Size of QR-code (optional)
     * @param  float|null $width Width of result image (optional)
     * @param  float|null $height Height of result image (optional)
     * @param  string|null $color_light Background color (optional)
     * @param  string|null $color_dark Color of code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loginUserImage'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function loginUserImage($wakeup = true, $size = null, $width = null, $height = null, $color_light = null, $color_dark = null, string $contentType = self::contentTypes['loginUserImage'][0])
    {
        list($response) = $this->loginUserImageWithHttpInfo($wakeup, $size, $width, $height, $color_light, $color_dark, $contentType);
        return $response;
    }

    /**
     * Operation loginUserImageWithHttpInfo
     *
     * Login user with QR-image
     *
     * @param  bool|null $wakeup If set to false, the channel will not launch (optional, default to true)
     * @param  float|null $size Size of QR-code (optional)
     * @param  float|null $width Width of result image (optional)
     * @param  float|null $height Height of result image (optional)
     * @param  string|null $color_light Background color (optional)
     * @param  string|null $color_dark Color of code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loginUserImage'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function loginUserImageWithHttpInfo($wakeup = true, $size = null, $width = null, $height = null, $color_light = null, $color_dark = null, string $contentType = self::contentTypes['loginUserImage'][0])
    {
        $request = $this->loginUserImageRequest($wakeup, $size, $width, $height, $color_light, $color_dark, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SplFileObject',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\SplFileObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation loginUserImageAsync
     *
     * Login user with QR-image
     *
     * @param  bool|null $wakeup If set to false, the channel will not launch (optional, default to true)
     * @param  float|null $size Size of QR-code (optional)
     * @param  float|null $width Width of result image (optional)
     * @param  float|null $height Height of result image (optional)
     * @param  string|null $color_light Background color (optional)
     * @param  string|null $color_dark Color of code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loginUserImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loginUserImageAsync($wakeup = true, $size = null, $width = null, $height = null, $color_light = null, $color_dark = null, string $contentType = self::contentTypes['loginUserImage'][0])
    {
        return $this->loginUserImageAsyncWithHttpInfo($wakeup, $size, $width, $height, $color_light, $color_dark, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation loginUserImageAsyncWithHttpInfo
     *
     * Login user with QR-image
     *
     * @param  bool|null $wakeup If set to false, the channel will not launch (optional, default to true)
     * @param  float|null $size Size of QR-code (optional)
     * @param  float|null $width Width of result image (optional)
     * @param  float|null $height Height of result image (optional)
     * @param  string|null $color_light Background color (optional)
     * @param  string|null $color_dark Color of code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loginUserImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loginUserImageAsyncWithHttpInfo($wakeup = true, $size = null, $width = null, $height = null, $color_light = null, $color_dark = null, string $contentType = self::contentTypes['loginUserImage'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->loginUserImageRequest($wakeup, $size, $width, $height, $color_light, $color_dark, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'loginUserImage'
     *
     * @param  bool|null $wakeup If set to false, the channel will not launch (optional, default to true)
     * @param  float|null $size Size of QR-code (optional)
     * @param  float|null $width Width of result image (optional)
     * @param  float|null $height Height of result image (optional)
     * @param  string|null $color_light Background color (optional)
     * @param  string|null $color_dark Color of code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loginUserImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function loginUserImageRequest($wakeup = true, $size = null, $width = null, $height = null, $color_light = null, $color_dark = null, string $contentType = self::contentTypes['loginUserImage'][0])
    {








        $resourcePath = '/users/login/image';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wakeup,
            'wakeup', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $width,
            'width', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $height,
            'height', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $color_light,
            'color_light', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $color_dark,
            'color_dark', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['image/png', 'application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation loginUserRowData
     *
     * Login user with QR-rowdata
     *
     * @param  bool|null $wakeup If set to false, the channel will not launch (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loginUserRowData'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\QR|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function loginUserRowData($wakeup = true, string $contentType = self::contentTypes['loginUserRowData'][0])
    {
        list($response) = $this->loginUserRowDataWithHttpInfo($wakeup, $contentType);
        return $response;
    }

    /**
     * Operation loginUserRowDataWithHttpInfo
     *
     * Login user with QR-rowdata
     *
     * @param  bool|null $wakeup If set to false, the channel will not launch (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loginUserRowData'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\QR|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function loginUserRowDataWithHttpInfo($wakeup = true, string $contentType = self::contentTypes['loginUserRowData'][0])
    {
        $request = $this->loginUserRowDataRequest($wakeup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\QR',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\QR',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\QR',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation loginUserRowDataAsync
     *
     * Login user with QR-rowdata
     *
     * @param  bool|null $wakeup If set to false, the channel will not launch (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loginUserRowData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loginUserRowDataAsync($wakeup = true, string $contentType = self::contentTypes['loginUserRowData'][0])
    {
        return $this->loginUserRowDataAsyncWithHttpInfo($wakeup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation loginUserRowDataAsyncWithHttpInfo
     *
     * Login user with QR-rowdata
     *
     * @param  bool|null $wakeup If set to false, the channel will not launch (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loginUserRowData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loginUserRowDataAsyncWithHttpInfo($wakeup = true, string $contentType = self::contentTypes['loginUserRowData'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\QR';
        $request = $this->loginUserRowDataRequest($wakeup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'loginUserRowData'
     *
     * @param  bool|null $wakeup If set to false, the channel will not launch (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loginUserRowData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function loginUserRowDataRequest($wakeup = true, string $contentType = self::contentTypes['loginUserRowData'][0])
    {



        $resourcePath = '/users/login/rowdata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wakeup,
            'wakeup', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation loginUserViaAuthCode
     *
     * Get auth code by phone number
     *
     * @param  string $phone_number Phone number without + and spaces, only digits (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loginUserViaAuthCode'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\AuthCode|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function loginUserViaAuthCode($phone_number, string $contentType = self::contentTypes['loginUserViaAuthCode'][0])
    {
        list($response) = $this->loginUserViaAuthCodeWithHttpInfo($phone_number, $contentType);
        return $response;
    }

    /**
     * Operation loginUserViaAuthCodeWithHttpInfo
     *
     * Get auth code by phone number
     *
     * @param  string $phone_number Phone number without + and spaces, only digits (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loginUserViaAuthCode'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\AuthCode|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function loginUserViaAuthCodeWithHttpInfo($phone_number, string $contentType = self::contentTypes['loginUserViaAuthCode'][0])
    {
        $request = $this->loginUserViaAuthCodeRequest($phone_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\AuthCode',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\AuthCode',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\AuthCode',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation loginUserViaAuthCodeAsync
     *
     * Get auth code by phone number
     *
     * @param  string $phone_number Phone number without + and spaces, only digits (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loginUserViaAuthCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loginUserViaAuthCodeAsync($phone_number, string $contentType = self::contentTypes['loginUserViaAuthCode'][0])
    {
        return $this->loginUserViaAuthCodeAsyncWithHttpInfo($phone_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation loginUserViaAuthCodeAsyncWithHttpInfo
     *
     * Get auth code by phone number
     *
     * @param  string $phone_number Phone number without + and spaces, only digits (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loginUserViaAuthCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loginUserViaAuthCodeAsyncWithHttpInfo($phone_number, string $contentType = self::contentTypes['loginUserViaAuthCode'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\AuthCode';
        $request = $this->loginUserViaAuthCodeRequest($phone_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'loginUserViaAuthCode'
     *
     * @param  string $phone_number Phone number without + and spaces, only digits (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loginUserViaAuthCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function loginUserViaAuthCodeRequest($phone_number, string $contentType = self::contentTypes['loginUserViaAuthCode'][0])
    {

        // verify the required parameter 'phone_number' is set
        if ($phone_number === null || (is_array($phone_number) && count($phone_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_number when calling loginUserViaAuthCode',
            );
        }
        if (!preg_match("/^([\\d]{7,15})?$/", $phone_number)) {
            throw new \InvalidArgumentException("invalid value for \"phone_number\" when calling UsersApi.loginUserViaAuthCode, must conform to the pattern /^([\\d]{7,15})?$/.");
        }


        $resourcePath = '/users/login/{PhoneNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($phone_number !== null) {
            $resourcePath = str_replace(
                '{' . 'PhoneNumber' . '}',
                ObjectSerializer::toPathValue($phone_number),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation logoutUser
     *
     * Logout user
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['logoutUser'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function logoutUser(string $contentType = self::contentTypes['logoutUser'][0])
    {
        list($response) = $this->logoutUserWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation logoutUserWithHttpInfo
     *
     * Logout user
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['logoutUser'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function logoutUserWithHttpInfo(string $contentType = self::contentTypes['logoutUser'][0])
    {
        $request = $this->logoutUserRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseSuccess',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation logoutUserAsync
     *
     * Logout user
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['logoutUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function logoutUserAsync(string $contentType = self::contentTypes['logoutUser'][0])
    {
        return $this->logoutUserAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation logoutUserAsyncWithHttpInfo
     *
     * Logout user
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['logoutUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function logoutUserAsyncWithHttpInfo(string $contentType = self::contentTypes['logoutUser'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseSuccess';
        $request = $this->logoutUserRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'logoutUser'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['logoutUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function logoutUserRequest(string $contentType = self::contentTypes['logoutUser'][0])
    {


        $resourcePath = '/users/logout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation updateUserProfile
     *
     * Update user info
     *
     * @param  \Purelines\WhapiSdk\Model\UserProfileUpdate $user_profile_update Change user profile (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUserProfile'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function updateUserProfile($user_profile_update, string $contentType = self::contentTypes['updateUserProfile'][0])
    {
        list($response) = $this->updateUserProfileWithHttpInfo($user_profile_update, $contentType);
        return $response;
    }

    /**
     * Operation updateUserProfileWithHttpInfo
     *
     * Update user info
     *
     * @param  \Purelines\WhapiSdk\Model\UserProfileUpdate $user_profile_update Change user profile (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUserProfile'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateUserProfileWithHttpInfo($user_profile_update, string $contentType = self::contentTypes['updateUserProfile'][0])
    {
        $request = $this->updateUserProfileRequest($user_profile_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseSuccess',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation updateUserProfileAsync
     *
     * Update user info
     *
     * @param  \Purelines\WhapiSdk\Model\UserProfileUpdate $user_profile_update Change user profile (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUserProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateUserProfileAsync($user_profile_update, string $contentType = self::contentTypes['updateUserProfile'][0])
    {
        return $this->updateUserProfileAsyncWithHttpInfo($user_profile_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation updateUserProfileAsyncWithHttpInfo
     *
     * Update user info
     *
     * @param  \Purelines\WhapiSdk\Model\UserProfileUpdate $user_profile_update Change user profile (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUserProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateUserProfileAsyncWithHttpInfo($user_profile_update, string $contentType = self::contentTypes['updateUserProfile'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseSuccess';
        $request = $this->updateUserProfileRequest($user_profile_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'updateUserProfile'
     *
     * @param  \Purelines\WhapiSdk\Model\UserProfileUpdate $user_profile_update Change user profile (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUserProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateUserProfileRequest($user_profile_update, string $contentType = self::contentTypes['updateUserProfile'][0])
    {

        // verify the required parameter 'user_profile_update' is set
        if ($user_profile_update === null || (is_array($user_profile_update) && count($user_profile_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_profile_update when calling updateUserProfile',
            );
        }


        $resourcePath = '/users/profile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($user_profile_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($user_profile_update));
            } else {
                $httpBody = $user_profile_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        if ($this->config->getCertFile()) {
            $options[RequestOptions::CERT] = $this->config->getCertFile();
        }

        if ($this->config->getKeyFile()) {
            $options[RequestOptions::SSL_KEY] = $this->config->getKeyFile();
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response,
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri(),
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content,
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders(),
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode,
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
