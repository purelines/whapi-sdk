<?php

/**
 * NewslettersApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Whapi API
 *
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Purelines\WhapiSdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Purelines\WhapiSdk\ApiException;
use Purelines\WhapiSdk\Configuration;
use Purelines\WhapiSdk\FormDataProcessor;
use Purelines\WhapiSdk\HeaderSelector;
use Purelines\WhapiSdk\ObjectSerializer;

/**
 * NewslettersApi Class Doc Comment
 *
 * @category Class
 * @package  Purelines\WhapiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NewslettersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'acceptNewsletterAdminRequest' => [
            'application/json',
        ],
        'createNewsletter' => [
            'application/json',
        ],
        'createNewsletterAdminInvite' => [
            'application/json',
        ],
        'deleteNewsletter' => [
            'application/json',
        ],
        'demoteNewsletterAdmin' => [
            'application/json',
        ],
        'editNewsletter' => [
            'application/json',
        ],
        'findNewsletter' => [
            'application/json',
        ],
        'getMessagesNewsletter' => [
            'application/json',
        ],
        'getNewsletter' => [
            'application/json',
        ],
        'getNewsletterByInviteCode' => [
            'application/json',
        ],
        'getNewsletters' => [
            'application/json',
        ],
        'recommendedNewsletter' => [
            'application/json',
        ],
        'revokeNewsletterAdminInvite' => [
            'application/json',
        ],
        'sendNewsletterInvite' => [
            'application/json',
            'multipart/form-data',
        ],
        'subscribeNewsletter' => [
            'application/json',
        ],
        'subscribeNewsletterInvite' => [
            'application/json',
        ],
        'trackingNewsletter' => [
            'application/json',
        ],
        'unsubscribeNewsletter' => [
            'application/json',
        ],
        'unsubscribeNewsletterInvite' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0,
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation acceptNewsletterAdminRequest
     *
     * Accept Newsletter admin-request
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contact_id Contact ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptNewsletterAdminRequest'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function acceptNewsletterAdminRequest($newsletter_id, $contact_id, string $contentType = self::contentTypes['acceptNewsletterAdminRequest'][0])
    {
        list($response) = $this->acceptNewsletterAdminRequestWithHttpInfo($newsletter_id, $contact_id, $contentType);
        return $response;
    }

    /**
     * Operation acceptNewsletterAdminRequestWithHttpInfo
     *
     * Accept Newsletter admin-request
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contact_id Contact ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptNewsletterAdminRequest'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function acceptNewsletterAdminRequestWithHttpInfo($newsletter_id, $contact_id, string $contentType = self::contentTypes['acceptNewsletterAdminRequest'][0])
    {
        $request = $this->acceptNewsletterAdminRequestRequest($newsletter_id, $contact_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseSuccess',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation acceptNewsletterAdminRequestAsync
     *
     * Accept Newsletter admin-request
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contact_id Contact ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptNewsletterAdminRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptNewsletterAdminRequestAsync($newsletter_id, $contact_id, string $contentType = self::contentTypes['acceptNewsletterAdminRequest'][0])
    {
        return $this->acceptNewsletterAdminRequestAsyncWithHttpInfo($newsletter_id, $contact_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation acceptNewsletterAdminRequestAsyncWithHttpInfo
     *
     * Accept Newsletter admin-request
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contact_id Contact ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptNewsletterAdminRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptNewsletterAdminRequestAsyncWithHttpInfo($newsletter_id, $contact_id, string $contentType = self::contentTypes['acceptNewsletterAdminRequest'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseSuccess';
        $request = $this->acceptNewsletterAdminRequestRequest($newsletter_id, $contact_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'acceptNewsletterAdminRequest'
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contact_id Contact ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptNewsletterAdminRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function acceptNewsletterAdminRequestRequest($newsletter_id, $contact_id, string $contentType = self::contentTypes['acceptNewsletterAdminRequest'][0])
    {

        // verify the required parameter 'newsletter_id' is set
        if ($newsletter_id === null || (is_array($newsletter_id) && count($newsletter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_id when calling acceptNewsletterAdminRequest',
            );
        }
        if (!preg_match("/^[\\d]{10,18}@newsletter$/", $newsletter_id)) {
            throw new \InvalidArgumentException("invalid value for \"newsletter_id\" when calling NewslettersApi.acceptNewsletterAdminRequest, must conform to the pattern /^[\\d]{10,18}@newsletter$/.");
        }

        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_id when calling acceptNewsletterAdminRequest',
            );
        }
        if (!preg_match("/^([\\d]{7,15})?$/", $contact_id)) {
            throw new \InvalidArgumentException("invalid value for \"contact_id\" when calling NewslettersApi.acceptNewsletterAdminRequest, must conform to the pattern /^([\\d]{7,15})?$/.");
        }


        $resourcePath = '/newsletters/{NewsletterID}/admins/{ContactID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($newsletter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'NewsletterID' . '}',
                ObjectSerializer::toPathValue($newsletter_id),
                $resourcePath,
            );
        }
        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ContactID' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation createNewsletter
     *
     * Create newsletter
     *
     * @param  \Purelines\WhapiSdk\Model\CreateNewsletterRequest $create_newsletter_request Newsletter data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewsletter'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\Newsletter|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function createNewsletter($create_newsletter_request, string $contentType = self::contentTypes['createNewsletter'][0])
    {
        list($response) = $this->createNewsletterWithHttpInfo($create_newsletter_request, $contentType);
        return $response;
    }

    /**
     * Operation createNewsletterWithHttpInfo
     *
     * Create newsletter
     *
     * @param  \Purelines\WhapiSdk\Model\CreateNewsletterRequest $create_newsletter_request Newsletter data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewsletter'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\Newsletter|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNewsletterWithHttpInfo($create_newsletter_request, string $contentType = self::contentTypes['createNewsletter'][0])
    {
        $request = $this->createNewsletterRequest($create_newsletter_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\Newsletter',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\Newsletter',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\Newsletter',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation createNewsletterAsync
     *
     * Create newsletter
     *
     * @param  \Purelines\WhapiSdk\Model\CreateNewsletterRequest $create_newsletter_request Newsletter data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewsletterAsync($create_newsletter_request, string $contentType = self::contentTypes['createNewsletter'][0])
    {
        return $this->createNewsletterAsyncWithHttpInfo($create_newsletter_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation createNewsletterAsyncWithHttpInfo
     *
     * Create newsletter
     *
     * @param  \Purelines\WhapiSdk\Model\CreateNewsletterRequest $create_newsletter_request Newsletter data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewsletterAsyncWithHttpInfo($create_newsletter_request, string $contentType = self::contentTypes['createNewsletter'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\Newsletter';
        $request = $this->createNewsletterRequest($create_newsletter_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'createNewsletter'
     *
     * @param  \Purelines\WhapiSdk\Model\CreateNewsletterRequest $create_newsletter_request Newsletter data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNewsletterRequest($create_newsletter_request, string $contentType = self::contentTypes['createNewsletter'][0])
    {

        // verify the required parameter 'create_newsletter_request' is set
        if ($create_newsletter_request === null || (is_array($create_newsletter_request) && count($create_newsletter_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_newsletter_request when calling createNewsletter',
            );
        }


        $resourcePath = '/newsletters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($create_newsletter_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_newsletter_request));
            } else {
                $httpBody = $create_newsletter_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation createNewsletterAdminInvite
     *
     * Create Newsletter admin-invite
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contact_id Contact ID (required)
     * @param  \Purelines\WhapiSdk\Model\CreateNewsletterAdminInviteRequest|null $create_newsletter_admin_invite_request Invite data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewsletterAdminInvite'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\SentMessage|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function createNewsletterAdminInvite($newsletter_id, $contact_id, $create_newsletter_admin_invite_request = null, string $contentType = self::contentTypes['createNewsletterAdminInvite'][0])
    {
        list($response) = $this->createNewsletterAdminInviteWithHttpInfo($newsletter_id, $contact_id, $create_newsletter_admin_invite_request, $contentType);
        return $response;
    }

    /**
     * Operation createNewsletterAdminInviteWithHttpInfo
     *
     * Create Newsletter admin-invite
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contact_id Contact ID (required)
     * @param  \Purelines\WhapiSdk\Model\CreateNewsletterAdminInviteRequest|null $create_newsletter_admin_invite_request Invite data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewsletterAdminInvite'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\SentMessage|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNewsletterAdminInviteWithHttpInfo($newsletter_id, $contact_id, $create_newsletter_admin_invite_request = null, string $contentType = self::contentTypes['createNewsletterAdminInvite'][0])
    {
        $request = $this->createNewsletterAdminInviteRequest($newsletter_id, $contact_id, $create_newsletter_admin_invite_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\SentMessage',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\SentMessage',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\SentMessage',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation createNewsletterAdminInviteAsync
     *
     * Create Newsletter admin-invite
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contact_id Contact ID (required)
     * @param  \Purelines\WhapiSdk\Model\CreateNewsletterAdminInviteRequest|null $create_newsletter_admin_invite_request Invite data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewsletterAdminInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewsletterAdminInviteAsync($newsletter_id, $contact_id, $create_newsletter_admin_invite_request = null, string $contentType = self::contentTypes['createNewsletterAdminInvite'][0])
    {
        return $this->createNewsletterAdminInviteAsyncWithHttpInfo($newsletter_id, $contact_id, $create_newsletter_admin_invite_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation createNewsletterAdminInviteAsyncWithHttpInfo
     *
     * Create Newsletter admin-invite
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contact_id Contact ID (required)
     * @param  \Purelines\WhapiSdk\Model\CreateNewsletterAdminInviteRequest|null $create_newsletter_admin_invite_request Invite data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewsletterAdminInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewsletterAdminInviteAsyncWithHttpInfo($newsletter_id, $contact_id, $create_newsletter_admin_invite_request = null, string $contentType = self::contentTypes['createNewsletterAdminInvite'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\SentMessage';
        $request = $this->createNewsletterAdminInviteRequest($newsletter_id, $contact_id, $create_newsletter_admin_invite_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'createNewsletterAdminInvite'
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contact_id Contact ID (required)
     * @param  \Purelines\WhapiSdk\Model\CreateNewsletterAdminInviteRequest|null $create_newsletter_admin_invite_request Invite data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewsletterAdminInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNewsletterAdminInviteRequest($newsletter_id, $contact_id, $create_newsletter_admin_invite_request = null, string $contentType = self::contentTypes['createNewsletterAdminInvite'][0])
    {

        // verify the required parameter 'newsletter_id' is set
        if ($newsletter_id === null || (is_array($newsletter_id) && count($newsletter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_id when calling createNewsletterAdminInvite',
            );
        }
        if (!preg_match("/^[\\d]{10,18}@newsletter$/", $newsletter_id)) {
            throw new \InvalidArgumentException("invalid value for \"newsletter_id\" when calling NewslettersApi.createNewsletterAdminInvite, must conform to the pattern /^[\\d]{10,18}@newsletter$/.");
        }

        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_id when calling createNewsletterAdminInvite',
            );
        }
        if (!preg_match("/^([\\d]{7,15})?$/", $contact_id)) {
            throw new \InvalidArgumentException("invalid value for \"contact_id\" when calling NewslettersApi.createNewsletterAdminInvite, must conform to the pattern /^([\\d]{7,15})?$/.");
        }



        $resourcePath = '/newsletters/{NewsletterID}/invite/{ContactID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($newsletter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'NewsletterID' . '}',
                ObjectSerializer::toPathValue($newsletter_id),
                $resourcePath,
            );
        }
        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ContactID' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($create_newsletter_admin_invite_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_newsletter_admin_invite_request));
            } else {
                $httpBody = $create_newsletter_admin_invite_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation deleteNewsletter
     *
     * Delete newsletter
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNewsletter'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function deleteNewsletter($newsletter_id, string $contentType = self::contentTypes['deleteNewsletter'][0])
    {
        list($response) = $this->deleteNewsletterWithHttpInfo($newsletter_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteNewsletterWithHttpInfo
     *
     * Delete newsletter
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNewsletter'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNewsletterWithHttpInfo($newsletter_id, string $contentType = self::contentTypes['deleteNewsletter'][0])
    {
        $request = $this->deleteNewsletterRequest($newsletter_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseSuccess',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation deleteNewsletterAsync
     *
     * Delete newsletter
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNewsletterAsync($newsletter_id, string $contentType = self::contentTypes['deleteNewsletter'][0])
    {
        return $this->deleteNewsletterAsyncWithHttpInfo($newsletter_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation deleteNewsletterAsyncWithHttpInfo
     *
     * Delete newsletter
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNewsletterAsyncWithHttpInfo($newsletter_id, string $contentType = self::contentTypes['deleteNewsletter'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseSuccess';
        $request = $this->deleteNewsletterRequest($newsletter_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'deleteNewsletter'
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteNewsletterRequest($newsletter_id, string $contentType = self::contentTypes['deleteNewsletter'][0])
    {

        // verify the required parameter 'newsletter_id' is set
        if ($newsletter_id === null || (is_array($newsletter_id) && count($newsletter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_id when calling deleteNewsletter',
            );
        }
        if (!preg_match("/^[\\d]{10,18}@newsletter$/", $newsletter_id)) {
            throw new \InvalidArgumentException("invalid value for \"newsletter_id\" when calling NewslettersApi.deleteNewsletter, must conform to the pattern /^[\\d]{10,18}@newsletter$/.");
        }


        $resourcePath = '/newsletters/{NewsletterID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($newsletter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'NewsletterID' . '}',
                ObjectSerializer::toPathValue($newsletter_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation demoteNewsletterAdmin
     *
     * Demote Newsletter admin
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contact_id Contact ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['demoteNewsletterAdmin'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function demoteNewsletterAdmin($newsletter_id, $contact_id, string $contentType = self::contentTypes['demoteNewsletterAdmin'][0])
    {
        list($response) = $this->demoteNewsletterAdminWithHttpInfo($newsletter_id, $contact_id, $contentType);
        return $response;
    }

    /**
     * Operation demoteNewsletterAdminWithHttpInfo
     *
     * Demote Newsletter admin
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contact_id Contact ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['demoteNewsletterAdmin'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function demoteNewsletterAdminWithHttpInfo($newsletter_id, $contact_id, string $contentType = self::contentTypes['demoteNewsletterAdmin'][0])
    {
        $request = $this->demoteNewsletterAdminRequest($newsletter_id, $contact_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseSuccess',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation demoteNewsletterAdminAsync
     *
     * Demote Newsletter admin
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contact_id Contact ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['demoteNewsletterAdmin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function demoteNewsletterAdminAsync($newsletter_id, $contact_id, string $contentType = self::contentTypes['demoteNewsletterAdmin'][0])
    {
        return $this->demoteNewsletterAdminAsyncWithHttpInfo($newsletter_id, $contact_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation demoteNewsletterAdminAsyncWithHttpInfo
     *
     * Demote Newsletter admin
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contact_id Contact ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['demoteNewsletterAdmin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function demoteNewsletterAdminAsyncWithHttpInfo($newsletter_id, $contact_id, string $contentType = self::contentTypes['demoteNewsletterAdmin'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseSuccess';
        $request = $this->demoteNewsletterAdminRequest($newsletter_id, $contact_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'demoteNewsletterAdmin'
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contact_id Contact ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['demoteNewsletterAdmin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function demoteNewsletterAdminRequest($newsletter_id, $contact_id, string $contentType = self::contentTypes['demoteNewsletterAdmin'][0])
    {

        // verify the required parameter 'newsletter_id' is set
        if ($newsletter_id === null || (is_array($newsletter_id) && count($newsletter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_id when calling demoteNewsletterAdmin',
            );
        }
        if (!preg_match("/^[\\d]{10,18}@newsletter$/", $newsletter_id)) {
            throw new \InvalidArgumentException("invalid value for \"newsletter_id\" when calling NewslettersApi.demoteNewsletterAdmin, must conform to the pattern /^[\\d]{10,18}@newsletter$/.");
        }

        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_id when calling demoteNewsletterAdmin',
            );
        }
        if (!preg_match("/^([\\d]{7,15})?$/", $contact_id)) {
            throw new \InvalidArgumentException("invalid value for \"contact_id\" when calling NewslettersApi.demoteNewsletterAdmin, must conform to the pattern /^([\\d]{7,15})?$/.");
        }


        $resourcePath = '/newsletters/{NewsletterID}/admins/{ContactID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($newsletter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'NewsletterID' . '}',
                ObjectSerializer::toPathValue($newsletter_id),
                $resourcePath,
            );
        }
        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ContactID' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation editNewsletter
     *
     * Edit newsletter
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  \Purelines\WhapiSdk\Model\EditNewsletterRequest $edit_newsletter_request Newsletter data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editNewsletter'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\Newsletter|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function editNewsletter($newsletter_id, $edit_newsletter_request, string $contentType = self::contentTypes['editNewsletter'][0])
    {
        list($response) = $this->editNewsletterWithHttpInfo($newsletter_id, $edit_newsletter_request, $contentType);
        return $response;
    }

    /**
     * Operation editNewsletterWithHttpInfo
     *
     * Edit newsletter
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  \Purelines\WhapiSdk\Model\EditNewsletterRequest $edit_newsletter_request Newsletter data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editNewsletter'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\Newsletter|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function editNewsletterWithHttpInfo($newsletter_id, $edit_newsletter_request, string $contentType = self::contentTypes['editNewsletter'][0])
    {
        $request = $this->editNewsletterRequest($newsletter_id, $edit_newsletter_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\Newsletter',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\Newsletter',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\Newsletter',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation editNewsletterAsync
     *
     * Edit newsletter
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  \Purelines\WhapiSdk\Model\EditNewsletterRequest $edit_newsletter_request Newsletter data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editNewsletterAsync($newsletter_id, $edit_newsletter_request, string $contentType = self::contentTypes['editNewsletter'][0])
    {
        return $this->editNewsletterAsyncWithHttpInfo($newsletter_id, $edit_newsletter_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation editNewsletterAsyncWithHttpInfo
     *
     * Edit newsletter
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  \Purelines\WhapiSdk\Model\EditNewsletterRequest $edit_newsletter_request Newsletter data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editNewsletterAsyncWithHttpInfo($newsletter_id, $edit_newsletter_request, string $contentType = self::contentTypes['editNewsletter'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\Newsletter';
        $request = $this->editNewsletterRequest($newsletter_id, $edit_newsletter_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'editNewsletter'
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  \Purelines\WhapiSdk\Model\EditNewsletterRequest $edit_newsletter_request Newsletter data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function editNewsletterRequest($newsletter_id, $edit_newsletter_request, string $contentType = self::contentTypes['editNewsletter'][0])
    {

        // verify the required parameter 'newsletter_id' is set
        if ($newsletter_id === null || (is_array($newsletter_id) && count($newsletter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_id when calling editNewsletter',
            );
        }
        if (!preg_match("/^[\\d]{10,18}@newsletter$/", $newsletter_id)) {
            throw new \InvalidArgumentException("invalid value for \"newsletter_id\" when calling NewslettersApi.editNewsletter, must conform to the pattern /^[\\d]{10,18}@newsletter$/.");
        }

        // verify the required parameter 'edit_newsletter_request' is set
        if ($edit_newsletter_request === null || (is_array($edit_newsletter_request) && count($edit_newsletter_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $edit_newsletter_request when calling editNewsletter',
            );
        }


        $resourcePath = '/newsletters/{NewsletterID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($newsletter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'NewsletterID' . '}',
                ObjectSerializer::toPathValue($newsletter_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($edit_newsletter_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($edit_newsletter_request));
            } else {
                $httpBody = $edit_newsletter_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation findNewsletter
     *
     * Find newsletters by filters
     *
     * @param  string|null $country_code Country for search (optional)
     * @param  string|null $search Search word (optional)
     * @param  string|null $newsletter_field Cursor to continue pagination (optional)
     * @param  string|null $cursor Cursor to continue pagination (optional)
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  string|null $sort Order for items in request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findNewsletter'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\NewslettersListPaged|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function findNewsletter($country_code = null, $search = null, $newsletter_field = null, $cursor = null, $count = 100, $sort = null, string $contentType = self::contentTypes['findNewsletter'][0])
    {
        list($response) = $this->findNewsletterWithHttpInfo($country_code, $search, $newsletter_field, $cursor, $count, $sort, $contentType);
        return $response;
    }

    /**
     * Operation findNewsletterWithHttpInfo
     *
     * Find newsletters by filters
     *
     * @param  string|null $country_code Country for search (optional)
     * @param  string|null $search Search word (optional)
     * @param  string|null $newsletter_field Cursor to continue pagination (optional)
     * @param  string|null $cursor Cursor to continue pagination (optional)
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  string|null $sort Order for items in request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findNewsletter'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\NewslettersListPaged|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function findNewsletterWithHttpInfo($country_code = null, $search = null, $newsletter_field = null, $cursor = null, $count = 100, $sort = null, string $contentType = self::contentTypes['findNewsletter'][0])
    {
        $request = $this->findNewsletterRequest($country_code, $search, $newsletter_field, $cursor, $count, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\NewslettersListPaged',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\NewslettersListPaged',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\NewslettersListPaged',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation findNewsletterAsync
     *
     * Find newsletters by filters
     *
     * @param  string|null $country_code Country for search (optional)
     * @param  string|null $search Search word (optional)
     * @param  string|null $newsletter_field Cursor to continue pagination (optional)
     * @param  string|null $cursor Cursor to continue pagination (optional)
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  string|null $sort Order for items in request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findNewsletterAsync($country_code = null, $search = null, $newsletter_field = null, $cursor = null, $count = 100, $sort = null, string $contentType = self::contentTypes['findNewsletter'][0])
    {
        return $this->findNewsletterAsyncWithHttpInfo($country_code, $search, $newsletter_field, $cursor, $count, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation findNewsletterAsyncWithHttpInfo
     *
     * Find newsletters by filters
     *
     * @param  string|null $country_code Country for search (optional)
     * @param  string|null $search Search word (optional)
     * @param  string|null $newsletter_field Cursor to continue pagination (optional)
     * @param  string|null $cursor Cursor to continue pagination (optional)
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  string|null $sort Order for items in request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findNewsletterAsyncWithHttpInfo($country_code = null, $search = null, $newsletter_field = null, $cursor = null, $count = 100, $sort = null, string $contentType = self::contentTypes['findNewsletter'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\NewslettersListPaged';
        $request = $this->findNewsletterRequest($country_code, $search, $newsletter_field, $cursor, $count, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'findNewsletter'
     *
     * @param  string|null $country_code Country for search (optional)
     * @param  string|null $search Search word (optional)
     * @param  string|null $newsletter_field Cursor to continue pagination (optional)
     * @param  string|null $cursor Cursor to continue pagination (optional)
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  string|null $sort Order for items in request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findNewsletterRequest($country_code = null, $search = null, $newsletter_field = null, $cursor = null, $count = 100, $sort = null, string $contentType = self::contentTypes['findNewsletter'][0])
    {





        if ($count !== null && $count > 500) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling NewslettersApi.findNewsletter, must be smaller than or equal to 500.');
        }
        if ($count !== null && $count < 1) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling NewslettersApi.findNewsletter, must be bigger than or equal to 1.');
        }



        $resourcePath = '/newsletters/find';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $country_code,
            'country_code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $newsletter_field,
            'newsletter_field', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cursor,
            'cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation getMessagesNewsletter
     *
     * Get newsletter messages
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $before Request messages before the specified one (see first and last) (optional)
     * @param  float|null $after Request messages after the specified one (see first and last) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessagesNewsletter'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\MessagesList|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function getMessagesNewsletter($newsletter_id, $count = 100, $before = null, $after = null, string $contentType = self::contentTypes['getMessagesNewsletter'][0])
    {
        list($response) = $this->getMessagesNewsletterWithHttpInfo($newsletter_id, $count, $before, $after, $contentType);
        return $response;
    }

    /**
     * Operation getMessagesNewsletterWithHttpInfo
     *
     * Get newsletter messages
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $before Request messages before the specified one (see first and last) (optional)
     * @param  float|null $after Request messages after the specified one (see first and last) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessagesNewsletter'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\MessagesList|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMessagesNewsletterWithHttpInfo($newsletter_id, $count = 100, $before = null, $after = null, string $contentType = self::contentTypes['getMessagesNewsletter'][0])
    {
        $request = $this->getMessagesNewsletterRequest($newsletter_id, $count, $before, $after, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\MessagesList',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\MessagesList',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\MessagesList',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation getMessagesNewsletterAsync
     *
     * Get newsletter messages
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $before Request messages before the specified one (see first and last) (optional)
     * @param  float|null $after Request messages after the specified one (see first and last) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessagesNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMessagesNewsletterAsync($newsletter_id, $count = 100, $before = null, $after = null, string $contentType = self::contentTypes['getMessagesNewsletter'][0])
    {
        return $this->getMessagesNewsletterAsyncWithHttpInfo($newsletter_id, $count, $before, $after, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation getMessagesNewsletterAsyncWithHttpInfo
     *
     * Get newsletter messages
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $before Request messages before the specified one (see first and last) (optional)
     * @param  float|null $after Request messages after the specified one (see first and last) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessagesNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMessagesNewsletterAsyncWithHttpInfo($newsletter_id, $count = 100, $before = null, $after = null, string $contentType = self::contentTypes['getMessagesNewsletter'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\MessagesList';
        $request = $this->getMessagesNewsletterRequest($newsletter_id, $count, $before, $after, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'getMessagesNewsletter'
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $before Request messages before the specified one (see first and last) (optional)
     * @param  float|null $after Request messages after the specified one (see first and last) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessagesNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMessagesNewsletterRequest($newsletter_id, $count = 100, $before = null, $after = null, string $contentType = self::contentTypes['getMessagesNewsletter'][0])
    {

        // verify the required parameter 'newsletter_id' is set
        if ($newsletter_id === null || (is_array($newsletter_id) && count($newsletter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_id when calling getMessagesNewsletter',
            );
        }
        if (!preg_match("/^[\\d]{10,18}@newsletter$/", $newsletter_id)) {
            throw new \InvalidArgumentException("invalid value for \"newsletter_id\" when calling NewslettersApi.getMessagesNewsletter, must conform to the pattern /^[\\d]{10,18}@newsletter$/.");
        }

        if ($count !== null && $count > 500) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling NewslettersApi.getMessagesNewsletter, must be smaller than or equal to 500.');
        }
        if ($count !== null && $count < 1) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling NewslettersApi.getMessagesNewsletter, must be bigger than or equal to 1.');
        }

        if ($before !== null && $before < 0) {
            throw new \InvalidArgumentException('invalid value for "$before" when calling NewslettersApi.getMessagesNewsletter, must be bigger than or equal to 0.');
        }

        if ($after !== null && $after < 0) {
            throw new \InvalidArgumentException('invalid value for "$after" when calling NewslettersApi.getMessagesNewsletter, must be bigger than or equal to 0.');
        }


        $resourcePath = '/newsletters/{NewsletterID}/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $before,
            'before', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $after,
            'after', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);


        // path params
        if ($newsletter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'NewsletterID' . '}',
                ObjectSerializer::toPathValue($newsletter_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation getNewsletter
     *
     * Get newsletter information
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string|null $user_role User&#39;s role regarding the newsletter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletter'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\MessagesList|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function getNewsletter($newsletter_id, $user_role = null, string $contentType = self::contentTypes['getNewsletter'][0])
    {
        list($response) = $this->getNewsletterWithHttpInfo($newsletter_id, $user_role, $contentType);
        return $response;
    }

    /**
     * Operation getNewsletterWithHttpInfo
     *
     * Get newsletter information
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string|null $user_role User&#39;s role regarding the newsletter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletter'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\MessagesList|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNewsletterWithHttpInfo($newsletter_id, $user_role = null, string $contentType = self::contentTypes['getNewsletter'][0])
    {
        $request = $this->getNewsletterRequest($newsletter_id, $user_role, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\MessagesList',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\MessagesList',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\MessagesList',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation getNewsletterAsync
     *
     * Get newsletter information
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string|null $user_role User&#39;s role regarding the newsletter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNewsletterAsync($newsletter_id, $user_role = null, string $contentType = self::contentTypes['getNewsletter'][0])
    {
        return $this->getNewsletterAsyncWithHttpInfo($newsletter_id, $user_role, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation getNewsletterAsyncWithHttpInfo
     *
     * Get newsletter information
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string|null $user_role User&#39;s role regarding the newsletter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNewsletterAsyncWithHttpInfo($newsletter_id, $user_role = null, string $contentType = self::contentTypes['getNewsletter'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\MessagesList';
        $request = $this->getNewsletterRequest($newsletter_id, $user_role, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'getNewsletter'
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string|null $user_role User&#39;s role regarding the newsletter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNewsletterRequest($newsletter_id, $user_role = null, string $contentType = self::contentTypes['getNewsletter'][0])
    {

        // verify the required parameter 'newsletter_id' is set
        if ($newsletter_id === null || (is_array($newsletter_id) && count($newsletter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_id when calling getNewsletter',
            );
        }
        if (!preg_match("/^[\\d]{10,18}@newsletter$/", $newsletter_id)) {
            throw new \InvalidArgumentException("invalid value for \"newsletter_id\" when calling NewslettersApi.getNewsletter, must conform to the pattern /^[\\d]{10,18}@newsletter$/.");
        }



        $resourcePath = '/newsletters/{NewsletterID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_role,
            'user role', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);


        // path params
        if ($newsletter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'NewsletterID' . '}',
                ObjectSerializer::toPathValue($newsletter_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation getNewsletterByInviteCode
     *
     * Get newsletter info by invite code
     *
     * @param  string $newsletter_invite_code Newsletter Invite Code (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletterByInviteCode'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\Newsletter|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function getNewsletterByInviteCode($newsletter_invite_code, string $contentType = self::contentTypes['getNewsletterByInviteCode'][0])
    {
        list($response) = $this->getNewsletterByInviteCodeWithHttpInfo($newsletter_invite_code, $contentType);
        return $response;
    }

    /**
     * Operation getNewsletterByInviteCodeWithHttpInfo
     *
     * Get newsletter info by invite code
     *
     * @param  string $newsletter_invite_code Newsletter Invite Code (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletterByInviteCode'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\Newsletter|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNewsletterByInviteCodeWithHttpInfo($newsletter_invite_code, string $contentType = self::contentTypes['getNewsletterByInviteCode'][0])
    {
        $request = $this->getNewsletterByInviteCodeRequest($newsletter_invite_code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\Newsletter',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\Newsletter',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\Newsletter',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation getNewsletterByInviteCodeAsync
     *
     * Get newsletter info by invite code
     *
     * @param  string $newsletter_invite_code Newsletter Invite Code (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletterByInviteCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNewsletterByInviteCodeAsync($newsletter_invite_code, string $contentType = self::contentTypes['getNewsletterByInviteCode'][0])
    {
        return $this->getNewsletterByInviteCodeAsyncWithHttpInfo($newsletter_invite_code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation getNewsletterByInviteCodeAsyncWithHttpInfo
     *
     * Get newsletter info by invite code
     *
     * @param  string $newsletter_invite_code Newsletter Invite Code (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletterByInviteCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNewsletterByInviteCodeAsyncWithHttpInfo($newsletter_invite_code, string $contentType = self::contentTypes['getNewsletterByInviteCode'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\Newsletter';
        $request = $this->getNewsletterByInviteCodeRequest($newsletter_invite_code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'getNewsletterByInviteCode'
     *
     * @param  string $newsletter_invite_code Newsletter Invite Code (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletterByInviteCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNewsletterByInviteCodeRequest($newsletter_invite_code, string $contentType = self::contentTypes['getNewsletterByInviteCode'][0])
    {

        // verify the required parameter 'newsletter_invite_code' is set
        if ($newsletter_invite_code === null || (is_array($newsletter_invite_code) && count($newsletter_invite_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_invite_code when calling getNewsletterByInviteCode',
            );
        }
        if (!preg_match("/^[A-Za-z0-9]{24}$/", $newsletter_invite_code)) {
            throw new \InvalidArgumentException("invalid value for \"newsletter_invite_code\" when calling NewslettersApi.getNewsletterByInviteCode, must conform to the pattern /^[A-Za-z0-9]{24}$/.");
        }


        $resourcePath = '/newsletters/link/{NewsletterInviteCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($newsletter_invite_code !== null) {
            $resourcePath = str_replace(
                '{' . 'NewsletterInviteCode' . '}',
                ObjectSerializer::toPathValue($newsletter_invite_code),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation getNewsletters
     *
     * Get newsletters
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletters'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\NewslettersList|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function getNewsletters($count = 100, $offset = null, string $contentType = self::contentTypes['getNewsletters'][0])
    {
        list($response) = $this->getNewslettersWithHttpInfo($count, $offset, $contentType);
        return $response;
    }

    /**
     * Operation getNewslettersWithHttpInfo
     *
     * Get newsletters
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletters'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\NewslettersList|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNewslettersWithHttpInfo($count = 100, $offset = null, string $contentType = self::contentTypes['getNewsletters'][0])
    {
        $request = $this->getNewslettersRequest($count, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\NewslettersList',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\NewslettersList',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\NewslettersList',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation getNewslettersAsync
     *
     * Get newsletters
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNewslettersAsync($count = 100, $offset = null, string $contentType = self::contentTypes['getNewsletters'][0])
    {
        return $this->getNewslettersAsyncWithHttpInfo($count, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation getNewslettersAsyncWithHttpInfo
     *
     * Get newsletters
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNewslettersAsyncWithHttpInfo($count = 100, $offset = null, string $contentType = self::contentTypes['getNewsletters'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\NewslettersList';
        $request = $this->getNewslettersRequest($count, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'getNewsletters'
     *
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  float|null $offset Offset of objects to return (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewsletters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNewslettersRequest($count = 100, $offset = null, string $contentType = self::contentTypes['getNewsletters'][0])
    {

        if ($count !== null && $count > 500) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling NewslettersApi.getNewsletters, must be smaller than or equal to 500.');
        }
        if ($count !== null && $count < 1) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling NewslettersApi.getNewsletters, must be bigger than or equal to 1.');
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling NewslettersApi.getNewsletters, must be bigger than or equal to 0.');
        }


        $resourcePath = '/newsletters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation recommendedNewsletter
     *
     * Get recommended newsletters by country
     *
     * @param  string|null $country_code Country for search (optional)
     * @param  string|null $cursor Cursor to continue pagination (optional)
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recommendedNewsletter'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\NewslettersListPaged|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function recommendedNewsletter($country_code = null, $cursor = null, $count = 100, string $contentType = self::contentTypes['recommendedNewsletter'][0])
    {
        list($response) = $this->recommendedNewsletterWithHttpInfo($country_code, $cursor, $count, $contentType);
        return $response;
    }

    /**
     * Operation recommendedNewsletterWithHttpInfo
     *
     * Get recommended newsletters by country
     *
     * @param  string|null $country_code Country for search (optional)
     * @param  string|null $cursor Cursor to continue pagination (optional)
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recommendedNewsletter'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\NewslettersListPaged|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function recommendedNewsletterWithHttpInfo($country_code = null, $cursor = null, $count = 100, string $contentType = self::contentTypes['recommendedNewsletter'][0])
    {
        $request = $this->recommendedNewsletterRequest($country_code, $cursor, $count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\NewslettersListPaged',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\NewslettersListPaged',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\NewslettersListPaged',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation recommendedNewsletterAsync
     *
     * Get recommended newsletters by country
     *
     * @param  string|null $country_code Country for search (optional)
     * @param  string|null $cursor Cursor to continue pagination (optional)
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recommendedNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recommendedNewsletterAsync($country_code = null, $cursor = null, $count = 100, string $contentType = self::contentTypes['recommendedNewsletter'][0])
    {
        return $this->recommendedNewsletterAsyncWithHttpInfo($country_code, $cursor, $count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation recommendedNewsletterAsyncWithHttpInfo
     *
     * Get recommended newsletters by country
     *
     * @param  string|null $country_code Country for search (optional)
     * @param  string|null $cursor Cursor to continue pagination (optional)
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recommendedNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recommendedNewsletterAsyncWithHttpInfo($country_code = null, $cursor = null, $count = 100, string $contentType = self::contentTypes['recommendedNewsletter'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\NewslettersListPaged';
        $request = $this->recommendedNewsletterRequest($country_code, $cursor, $count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'recommendedNewsletter'
     *
     * @param  string|null $country_code Country for search (optional)
     * @param  string|null $cursor Cursor to continue pagination (optional)
     * @param  float|null $count Count of objects to return (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recommendedNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recommendedNewsletterRequest($country_code = null, $cursor = null, $count = 100, string $contentType = self::contentTypes['recommendedNewsletter'][0])
    {



        if ($count !== null && $count > 500) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling NewslettersApi.recommendedNewsletter, must be smaller than or equal to 500.');
        }
        if ($count !== null && $count < 1) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling NewslettersApi.recommendedNewsletter, must be bigger than or equal to 1.');
        }


        $resourcePath = '/newsletters/recommended';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $country_code,
            'country_code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cursor,
            'cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false, // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation revokeNewsletterAdminInvite
     *
     * Revoke Newsletter admin-invite
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contact_id Contact ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeNewsletterAdminInvite'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function revokeNewsletterAdminInvite($newsletter_id, $contact_id, string $contentType = self::contentTypes['revokeNewsletterAdminInvite'][0])
    {
        list($response) = $this->revokeNewsletterAdminInviteWithHttpInfo($newsletter_id, $contact_id, $contentType);
        return $response;
    }

    /**
     * Operation revokeNewsletterAdminInviteWithHttpInfo
     *
     * Revoke Newsletter admin-invite
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contact_id Contact ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeNewsletterAdminInvite'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function revokeNewsletterAdminInviteWithHttpInfo($newsletter_id, $contact_id, string $contentType = self::contentTypes['revokeNewsletterAdminInvite'][0])
    {
        $request = $this->revokeNewsletterAdminInviteRequest($newsletter_id, $contact_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseSuccess',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation revokeNewsletterAdminInviteAsync
     *
     * Revoke Newsletter admin-invite
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contact_id Contact ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeNewsletterAdminInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeNewsletterAdminInviteAsync($newsletter_id, $contact_id, string $contentType = self::contentTypes['revokeNewsletterAdminInvite'][0])
    {
        return $this->revokeNewsletterAdminInviteAsyncWithHttpInfo($newsletter_id, $contact_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation revokeNewsletterAdminInviteAsyncWithHttpInfo
     *
     * Revoke Newsletter admin-invite
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contact_id Contact ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeNewsletterAdminInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeNewsletterAdminInviteAsyncWithHttpInfo($newsletter_id, $contact_id, string $contentType = self::contentTypes['revokeNewsletterAdminInvite'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseSuccess';
        $request = $this->revokeNewsletterAdminInviteRequest($newsletter_id, $contact_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'revokeNewsletterAdminInvite'
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contact_id Contact ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeNewsletterAdminInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function revokeNewsletterAdminInviteRequest($newsletter_id, $contact_id, string $contentType = self::contentTypes['revokeNewsletterAdminInvite'][0])
    {

        // verify the required parameter 'newsletter_id' is set
        if ($newsletter_id === null || (is_array($newsletter_id) && count($newsletter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_id when calling revokeNewsletterAdminInvite',
            );
        }
        if (!preg_match("/^[\\d]{10,18}@newsletter$/", $newsletter_id)) {
            throw new \InvalidArgumentException("invalid value for \"newsletter_id\" when calling NewslettersApi.revokeNewsletterAdminInvite, must conform to the pattern /^[\\d]{10,18}@newsletter$/.");
        }

        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_id when calling revokeNewsletterAdminInvite',
            );
        }
        if (!preg_match("/^([\\d]{7,15})?$/", $contact_id)) {
            throw new \InvalidArgumentException("invalid value for \"contact_id\" when calling NewslettersApi.revokeNewsletterAdminInvite, must conform to the pattern /^([\\d]{7,15})?$/.");
        }


        $resourcePath = '/newsletters/{NewsletterID}/invite/{ContactID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($newsletter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'NewsletterID' . '}',
                ObjectSerializer::toPathValue($newsletter_id),
                $resourcePath,
            );
        }
        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ContactID' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation sendNewsletterInvite
     *
     * Send newsletter invite link
     *
     * @param  string $newsletter_invite_code Newsletter Invite Code (required)
     * @param  \Purelines\WhapiSdk\Model\SenderNewsletterInviteByCode $sender_newsletter_invite_by_code Newsletter invite link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendNewsletterInvite'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\SentMessage|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function sendNewsletterInvite($newsletter_invite_code, $sender_newsletter_invite_by_code, string $contentType = self::contentTypes['sendNewsletterInvite'][0])
    {
        list($response) = $this->sendNewsletterInviteWithHttpInfo($newsletter_invite_code, $sender_newsletter_invite_by_code, $contentType);
        return $response;
    }

    /**
     * Operation sendNewsletterInviteWithHttpInfo
     *
     * Send newsletter invite link
     *
     * @param  string $newsletter_invite_code Newsletter Invite Code (required)
     * @param  \Purelines\WhapiSdk\Model\SenderNewsletterInviteByCode $sender_newsletter_invite_by_code Newsletter invite link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendNewsletterInvite'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\SentMessage|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendNewsletterInviteWithHttpInfo($newsletter_invite_code, $sender_newsletter_invite_by_code, string $contentType = self::contentTypes['sendNewsletterInvite'][0])
    {
        $request = $this->sendNewsletterInviteRequest($newsletter_invite_code, $sender_newsletter_invite_by_code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\SentMessage',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\SentMessage',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\SentMessage',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation sendNewsletterInviteAsync
     *
     * Send newsletter invite link
     *
     * @param  string $newsletter_invite_code Newsletter Invite Code (required)
     * @param  \Purelines\WhapiSdk\Model\SenderNewsletterInviteByCode $sender_newsletter_invite_by_code Newsletter invite link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendNewsletterInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendNewsletterInviteAsync($newsletter_invite_code, $sender_newsletter_invite_by_code, string $contentType = self::contentTypes['sendNewsletterInvite'][0])
    {
        return $this->sendNewsletterInviteAsyncWithHttpInfo($newsletter_invite_code, $sender_newsletter_invite_by_code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation sendNewsletterInviteAsyncWithHttpInfo
     *
     * Send newsletter invite link
     *
     * @param  string $newsletter_invite_code Newsletter Invite Code (required)
     * @param  \Purelines\WhapiSdk\Model\SenderNewsletterInviteByCode $sender_newsletter_invite_by_code Newsletter invite link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendNewsletterInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendNewsletterInviteAsyncWithHttpInfo($newsletter_invite_code, $sender_newsletter_invite_by_code, string $contentType = self::contentTypes['sendNewsletterInvite'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\SentMessage';
        $request = $this->sendNewsletterInviteRequest($newsletter_invite_code, $sender_newsletter_invite_by_code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'sendNewsletterInvite'
     *
     * @param  string $newsletter_invite_code Newsletter Invite Code (required)
     * @param  \Purelines\WhapiSdk\Model\SenderNewsletterInviteByCode $sender_newsletter_invite_by_code Newsletter invite link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendNewsletterInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendNewsletterInviteRequest($newsletter_invite_code, $sender_newsletter_invite_by_code, string $contentType = self::contentTypes['sendNewsletterInvite'][0])
    {

        // verify the required parameter 'newsletter_invite_code' is set
        if ($newsletter_invite_code === null || (is_array($newsletter_invite_code) && count($newsletter_invite_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_invite_code when calling sendNewsletterInvite',
            );
        }
        if (!preg_match("/^[A-Za-z0-9]{24}$/", $newsletter_invite_code)) {
            throw new \InvalidArgumentException("invalid value for \"newsletter_invite_code\" when calling NewslettersApi.sendNewsletterInvite, must conform to the pattern /^[A-Za-z0-9]{24}$/.");
        }

        // verify the required parameter 'sender_newsletter_invite_by_code' is set
        if ($sender_newsletter_invite_by_code === null || (is_array($sender_newsletter_invite_by_code) && count($sender_newsletter_invite_by_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sender_newsletter_invite_by_code when calling sendNewsletterInvite',
            );
        }


        $resourcePath = '/newsletters/link/{NewsletterInviteCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($newsletter_invite_code !== null) {
            $resourcePath = str_replace(
                '{' . 'NewsletterInviteCode' . '}',
                ObjectSerializer::toPathValue($newsletter_invite_code),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (isset($sender_newsletter_invite_by_code)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sender_newsletter_invite_by_code));
            } else {
                $httpBody = $sender_newsletter_invite_by_code;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation subscribeNewsletter
     *
     * Subscribe to newsletter
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['subscribeNewsletter'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function subscribeNewsletter($newsletter_id, string $contentType = self::contentTypes['subscribeNewsletter'][0])
    {
        list($response) = $this->subscribeNewsletterWithHttpInfo($newsletter_id, $contentType);
        return $response;
    }

    /**
     * Operation subscribeNewsletterWithHttpInfo
     *
     * Subscribe to newsletter
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['subscribeNewsletter'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscribeNewsletterWithHttpInfo($newsletter_id, string $contentType = self::contentTypes['subscribeNewsletter'][0])
    {
        $request = $this->subscribeNewsletterRequest($newsletter_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseSuccess',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation subscribeNewsletterAsync
     *
     * Subscribe to newsletter
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['subscribeNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subscribeNewsletterAsync($newsletter_id, string $contentType = self::contentTypes['subscribeNewsletter'][0])
    {
        return $this->subscribeNewsletterAsyncWithHttpInfo($newsletter_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation subscribeNewsletterAsyncWithHttpInfo
     *
     * Subscribe to newsletter
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['subscribeNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subscribeNewsletterAsyncWithHttpInfo($newsletter_id, string $contentType = self::contentTypes['subscribeNewsletter'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseSuccess';
        $request = $this->subscribeNewsletterRequest($newsletter_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'subscribeNewsletter'
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['subscribeNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function subscribeNewsletterRequest($newsletter_id, string $contentType = self::contentTypes['subscribeNewsletter'][0])
    {

        // verify the required parameter 'newsletter_id' is set
        if ($newsletter_id === null || (is_array($newsletter_id) && count($newsletter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_id when calling subscribeNewsletter',
            );
        }
        if (!preg_match("/^[\\d]{10,18}@newsletter$/", $newsletter_id)) {
            throw new \InvalidArgumentException("invalid value for \"newsletter_id\" when calling NewslettersApi.subscribeNewsletter, must conform to the pattern /^[\\d]{10,18}@newsletter$/.");
        }


        $resourcePath = '/newsletters/{NewsletterID}/subscription';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($newsletter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'NewsletterID' . '}',
                ObjectSerializer::toPathValue($newsletter_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation subscribeNewsletterInvite
     *
     * Subscribe to newsletter by invite code
     *
     * @param  string $newsletter_invite_code Newsletter Invite Code (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['subscribeNewsletterInvite'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function subscribeNewsletterInvite($newsletter_invite_code, string $contentType = self::contentTypes['subscribeNewsletterInvite'][0])
    {
        list($response) = $this->subscribeNewsletterInviteWithHttpInfo($newsletter_invite_code, $contentType);
        return $response;
    }

    /**
     * Operation subscribeNewsletterInviteWithHttpInfo
     *
     * Subscribe to newsletter by invite code
     *
     * @param  string $newsletter_invite_code Newsletter Invite Code (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['subscribeNewsletterInvite'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function subscribeNewsletterInviteWithHttpInfo($newsletter_invite_code, string $contentType = self::contentTypes['subscribeNewsletterInvite'][0])
    {
        $request = $this->subscribeNewsletterInviteRequest($newsletter_invite_code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseSuccess',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation subscribeNewsletterInviteAsync
     *
     * Subscribe to newsletter by invite code
     *
     * @param  string $newsletter_invite_code Newsletter Invite Code (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['subscribeNewsletterInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subscribeNewsletterInviteAsync($newsletter_invite_code, string $contentType = self::contentTypes['subscribeNewsletterInvite'][0])
    {
        return $this->subscribeNewsletterInviteAsyncWithHttpInfo($newsletter_invite_code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation subscribeNewsletterInviteAsyncWithHttpInfo
     *
     * Subscribe to newsletter by invite code
     *
     * @param  string $newsletter_invite_code Newsletter Invite Code (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['subscribeNewsletterInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subscribeNewsletterInviteAsyncWithHttpInfo($newsletter_invite_code, string $contentType = self::contentTypes['subscribeNewsletterInvite'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseSuccess';
        $request = $this->subscribeNewsletterInviteRequest($newsletter_invite_code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'subscribeNewsletterInvite'
     *
     * @param  string $newsletter_invite_code Newsletter Invite Code (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['subscribeNewsletterInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function subscribeNewsletterInviteRequest($newsletter_invite_code, string $contentType = self::contentTypes['subscribeNewsletterInvite'][0])
    {

        // verify the required parameter 'newsletter_invite_code' is set
        if ($newsletter_invite_code === null || (is_array($newsletter_invite_code) && count($newsletter_invite_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_invite_code when calling subscribeNewsletterInvite',
            );
        }
        if (!preg_match("/^[A-Za-z0-9]{24}$/", $newsletter_invite_code)) {
            throw new \InvalidArgumentException("invalid value for \"newsletter_invite_code\" when calling NewslettersApi.subscribeNewsletterInvite, must conform to the pattern /^[A-Za-z0-9]{24}$/.");
        }


        $resourcePath = '/newsletters/invite/{NewsletterInviteCode}/subscription';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($newsletter_invite_code !== null) {
            $resourcePath = str_replace(
                '{' . 'NewsletterInviteCode' . '}',
                ObjectSerializer::toPathValue($newsletter_invite_code),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation trackingNewsletter
     *
     * Subscribe to newsletter updates
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['trackingNewsletter'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function trackingNewsletter($newsletter_id, string $contentType = self::contentTypes['trackingNewsletter'][0])
    {
        list($response) = $this->trackingNewsletterWithHttpInfo($newsletter_id, $contentType);
        return $response;
    }

    /**
     * Operation trackingNewsletterWithHttpInfo
     *
     * Subscribe to newsletter updates
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['trackingNewsletter'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function trackingNewsletterWithHttpInfo($newsletter_id, string $contentType = self::contentTypes['trackingNewsletter'][0])
    {
        $request = $this->trackingNewsletterRequest($newsletter_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseSuccess',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation trackingNewsletterAsync
     *
     * Subscribe to newsletter updates
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['trackingNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trackingNewsletterAsync($newsletter_id, string $contentType = self::contentTypes['trackingNewsletter'][0])
    {
        return $this->trackingNewsletterAsyncWithHttpInfo($newsletter_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation trackingNewsletterAsyncWithHttpInfo
     *
     * Subscribe to newsletter updates
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['trackingNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trackingNewsletterAsyncWithHttpInfo($newsletter_id, string $contentType = self::contentTypes['trackingNewsletter'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseSuccess';
        $request = $this->trackingNewsletterRequest($newsletter_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'trackingNewsletter'
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['trackingNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function trackingNewsletterRequest($newsletter_id, string $contentType = self::contentTypes['trackingNewsletter'][0])
    {

        // verify the required parameter 'newsletter_id' is set
        if ($newsletter_id === null || (is_array($newsletter_id) && count($newsletter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_id when calling trackingNewsletter',
            );
        }
        if (!preg_match("/^[\\d]{10,18}@newsletter$/", $newsletter_id)) {
            throw new \InvalidArgumentException("invalid value for \"newsletter_id\" when calling NewslettersApi.trackingNewsletter, must conform to the pattern /^[\\d]{10,18}@newsletter$/.");
        }


        $resourcePath = '/newsletters/{NewsletterID}/tracking';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($newsletter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'NewsletterID' . '}',
                ObjectSerializer::toPathValue($newsletter_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation unsubscribeNewsletter
     *
     * Unsubscribe from newsletter
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unsubscribeNewsletter'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function unsubscribeNewsletter($newsletter_id, string $contentType = self::contentTypes['unsubscribeNewsletter'][0])
    {
        list($response) = $this->unsubscribeNewsletterWithHttpInfo($newsletter_id, $contentType);
        return $response;
    }

    /**
     * Operation unsubscribeNewsletterWithHttpInfo
     *
     * Unsubscribe from newsletter
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unsubscribeNewsletter'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function unsubscribeNewsletterWithHttpInfo($newsletter_id, string $contentType = self::contentTypes['unsubscribeNewsletter'][0])
    {
        $request = $this->unsubscribeNewsletterRequest($newsletter_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseSuccess',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation unsubscribeNewsletterAsync
     *
     * Unsubscribe from newsletter
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unsubscribeNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unsubscribeNewsletterAsync($newsletter_id, string $contentType = self::contentTypes['unsubscribeNewsletter'][0])
    {
        return $this->unsubscribeNewsletterAsyncWithHttpInfo($newsletter_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation unsubscribeNewsletterAsyncWithHttpInfo
     *
     * Unsubscribe from newsletter
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unsubscribeNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unsubscribeNewsletterAsyncWithHttpInfo($newsletter_id, string $contentType = self::contentTypes['unsubscribeNewsletter'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseSuccess';
        $request = $this->unsubscribeNewsletterRequest($newsletter_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'unsubscribeNewsletter'
     *
     * @param  string $newsletter_id Newsletter ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unsubscribeNewsletter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unsubscribeNewsletterRequest($newsletter_id, string $contentType = self::contentTypes['unsubscribeNewsletter'][0])
    {

        // verify the required parameter 'newsletter_id' is set
        if ($newsletter_id === null || (is_array($newsletter_id) && count($newsletter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_id when calling unsubscribeNewsletter',
            );
        }
        if (!preg_match("/^[\\d]{10,18}@newsletter$/", $newsletter_id)) {
            throw new \InvalidArgumentException("invalid value for \"newsletter_id\" when calling NewslettersApi.unsubscribeNewsletter, must conform to the pattern /^[\\d]{10,18}@newsletter$/.");
        }


        $resourcePath = '/newsletters/{NewsletterID}/subscription';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($newsletter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'NewsletterID' . '}',
                ObjectSerializer::toPathValue($newsletter_id),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Operation unsubscribeNewsletterInvite
     *
     * Unsubscribe from newsletter by invite code
     *
     * @param  string $newsletter_invite_code Newsletter Invite Code (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unsubscribeNewsletterInvite'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError
     */
    public function unsubscribeNewsletterInvite($newsletter_invite_code, string $contentType = self::contentTypes['unsubscribeNewsletterInvite'][0])
    {
        list($response) = $this->unsubscribeNewsletterInviteWithHttpInfo($newsletter_invite_code, $contentType);
        return $response;
    }

    /**
     * Operation unsubscribeNewsletterInviteWithHttpInfo
     *
     * Unsubscribe from newsletter by invite code
     *
     * @param  string $newsletter_invite_code Newsletter Invite Code (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unsubscribeNewsletterInvite'] to see the possible values for this operation
     *
     * @throws \Purelines\WhapiSdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Purelines\WhapiSdk\Model\ResponseSuccess|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError|\Purelines\WhapiSdk\Model\ResponseError, HTTP status code, HTTP response headers (array of strings)
     */
    public function unsubscribeNewsletterInviteWithHttpInfo($newsletter_invite_code, string $contentType = self::contentTypes['unsubscribeNewsletterInvite'][0])
    {
        $request = $this->unsubscribeNewsletterInviteRequest($newsletter_invite_code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                );
            }

            $statusCode = $response->getStatusCode();


            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri(),
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody(),
                );
            }

            return $this->handleResponseWithDataType(
                '\Purelines\WhapiSdk\Model\ResponseSuccess',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseSuccess',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Purelines\WhapiSdk\Model\ResponseError',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation unsubscribeNewsletterInviteAsync
     *
     * Unsubscribe from newsletter by invite code
     *
     * @param  string $newsletter_invite_code Newsletter Invite Code (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unsubscribeNewsletterInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unsubscribeNewsletterInviteAsync($newsletter_invite_code, string $contentType = self::contentTypes['unsubscribeNewsletterInvite'][0])
    {
        return $this->unsubscribeNewsletterInviteAsyncWithHttpInfo($newsletter_invite_code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                },
            );
    }

    /**
     * Operation unsubscribeNewsletterInviteAsyncWithHttpInfo
     *
     * Unsubscribe from newsletter by invite code
     *
     * @param  string $newsletter_invite_code Newsletter Invite Code (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unsubscribeNewsletterInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unsubscribeNewsletterInviteAsyncWithHttpInfo($newsletter_invite_code, string $contentType = self::contentTypes['unsubscribeNewsletterInvite'][0])
    {
        $returnType = '\Purelines\WhapiSdk\Model\ResponseSuccess';
        $request = $this->unsubscribeNewsletterInviteRequest($newsletter_invite_code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri(),
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody(),
                    );
                },
            );
    }

    /**
     * Create request for operation 'unsubscribeNewsletterInvite'
     *
     * @param  string $newsletter_invite_code Newsletter Invite Code (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unsubscribeNewsletterInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unsubscribeNewsletterInviteRequest($newsletter_invite_code, string $contentType = self::contentTypes['unsubscribeNewsletterInvite'][0])
    {

        // verify the required parameter 'newsletter_invite_code' is set
        if ($newsletter_invite_code === null || (is_array($newsletter_invite_code) && count($newsletter_invite_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_invite_code when calling unsubscribeNewsletterInvite',
            );
        }
        if (!preg_match("/^[A-Za-z0-9]{24}$/", $newsletter_invite_code)) {
            throw new \InvalidArgumentException("invalid value for \"newsletter_invite_code\" when calling NewslettersApi.unsubscribeNewsletterInvite, must conform to the pattern /^[A-Za-z0-9]{24}$/.");
        }


        $resourcePath = '/newsletters/invite/{NewsletterInviteCode}/subscription';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($newsletter_invite_code !== null) {
            $resourcePath = str_replace(
                '{' . 'NewsletterInviteCode' . '}',
                ObjectSerializer::toPathValue($newsletter_invite_code),
                $resourcePath,
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }
        // this endpoint requires Bearer (token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody,
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        if ($this->config->getCertFile()) {
            $options[RequestOptions::CERT] = $this->config->getCertFile();
        }

        if ($this->config->getKeyFile()) {
            $options[RequestOptions::SSL_KEY] = $this->config->getKeyFile();
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response,
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri(),
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content,
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders(),
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode,
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
